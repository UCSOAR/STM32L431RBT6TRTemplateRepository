
STM32L431RBT6TR_Template_Repository.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  08008350  08008350  00009350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008944  08008944  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008944  08008944  00009944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800894c  0800894c  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800894c  0800894c  0000994c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08008958  08008958  00009958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008960  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ab90  20000060  080089c0  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000abf0  080089c0  0000abf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fe97  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007660  00000000  00000000  00039f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df0  00000000  00000000  00041588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016ca  00000000  00000000  00043378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d99f  00000000  00000000  00044a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000292d0  00000000  00000000  000723e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed5cd  00000000  00000000  0009b6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00188c7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fe8  00000000  00000000  00188cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00190cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008338 	.word	0x08008338

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08008338 	.word	0x08008338

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <run_interface>:
#include "main_system.hpp"
#include "UARTDriver.hpp"

extern "C" {
    void run_interface()
    {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
        run_main();
 80002a4:	f000 f87c 	bl	80003a0 <_Z8run_mainv>
    }
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}

080002ac <_ZN10UARTDriverC1EP13USART_TypeDef>:
 *	      based on the STM32 LL Library
 */
class UARTDriver
{
public:
	UARTDriver(USART_TypeDef* uartInstance) :
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
		kUart_(uartInstance),
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	601a      	str	r2, [r3, #0]
		rxCharBuf_(nullptr),
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
		rxReceiver_(nullptr) {}
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4618      	mov	r0, r3
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
	...

080002d8 <_ZN8CubeTask4InstEv>:

/* Class ------------------------------------------------------------------*/
class CubeTask : public Task
{
public:
    static CubeTask& Inst() {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
        static CubeTask inst;
 80002dc:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <_ZN8CubeTask4InstEv+0x48>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f3bf 8f5b 	dmb	ish
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	bf0c      	ite	eq
 80002ec:	2301      	moveq	r3, #1
 80002ee:	2300      	movne	r3, #0
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d010      	beq.n	8000318 <_ZN8CubeTask4InstEv+0x40>
 80002f6:	480a      	ldr	r0, [pc, #40]	@ (8000320 <_ZN8CubeTask4InstEv+0x48>)
 80002f8:	f007 fac0 	bl	800787c <__cxa_guard_acquire>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	bf14      	ite	ne
 8000302:	2301      	movne	r3, #1
 8000304:	2300      	moveq	r3, #0
 8000306:	b2db      	uxtb	r3, r3
 8000308:	2b00      	cmp	r3, #0
 800030a:	d005      	beq.n	8000318 <_ZN8CubeTask4InstEv+0x40>
 800030c:	4805      	ldr	r0, [pc, #20]	@ (8000324 <_ZN8CubeTask4InstEv+0x4c>)
 800030e:	f000 f80b 	bl	8000328 <_ZN8CubeTaskC1Ev>
 8000312:	4803      	ldr	r0, [pc, #12]	@ (8000320 <_ZN8CubeTask4InstEv+0x48>)
 8000314:	f007 fabe 	bl	8007894 <__cxa_guard_release>
        return inst;
 8000318:	4b02      	ldr	r3, [pc, #8]	@ (8000324 <_ZN8CubeTask4InstEv+0x4c>)
    }
 800031a:	4618      	mov	r0, r3
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000088 	.word	0x20000088
 8000324:	2000007c 	.word	0x2000007c

08000328 <_ZN8CubeTaskC1Ev>:
    void Run(void* pvParams);    // Main run code

    void HandleCommand(Command& cm);

private:
    CubeTask() : Task(UART_TASK_QUEUE_DEPTH_OBJS) {}    // Private constructor
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	210a      	movs	r1, #10
 8000334:	4618      	mov	r0, r3
 8000336:	f006 ff01 	bl	800713c <_ZN4TaskC1Et>
 800033a:	4a04      	ldr	r2, [pc, #16]	@ (800034c <_ZN8CubeTaskC1Ev+0x24>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4618      	mov	r0, r3
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	0800890c 	.word	0x0800890c

08000350 <_ZN9DebugTask4InstEv>:
constexpr uint16_t DEBUG_RX_BUFFER_SZ_BYTES = 16;

/* Class ------------------------------------------------------------------*/
class DebugTask : public Task, public UARTReceiverBase {
 public:
  static DebugTask& Inst() {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
    static DebugTask inst;
 8000354:	4b10      	ldr	r3, [pc, #64]	@ (8000398 <_ZN9DebugTask4InstEv+0x48>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f3bf 8f5b 	dmb	ish
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b00      	cmp	r3, #0
 8000362:	bf0c      	ite	eq
 8000364:	2301      	moveq	r3, #1
 8000366:	2300      	movne	r3, #0
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b00      	cmp	r3, #0
 800036c:	d010      	beq.n	8000390 <_ZN9DebugTask4InstEv+0x40>
 800036e:	480a      	ldr	r0, [pc, #40]	@ (8000398 <_ZN9DebugTask4InstEv+0x48>)
 8000370:	f007 fa84 	bl	800787c <__cxa_guard_acquire>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	bf14      	ite	ne
 800037a:	2301      	movne	r3, #1
 800037c:	2300      	moveq	r3, #0
 800037e:	b2db      	uxtb	r3, r3
 8000380:	2b00      	cmp	r3, #0
 8000382:	d005      	beq.n	8000390 <_ZN9DebugTask4InstEv+0x40>
 8000384:	4805      	ldr	r0, [pc, #20]	@ (800039c <_ZN9DebugTask4InstEv+0x4c>)
 8000386:	f006 fb27 	bl	80069d8 <_ZN9DebugTaskC1Ev>
 800038a:	4803      	ldr	r0, [pc, #12]	@ (8000398 <_ZN9DebugTask4InstEv+0x48>)
 800038c:	f007 fa82 	bl	8007894 <__cxa_guard_release>
    return inst;
 8000390:	4b02      	ldr	r3, [pc, #8]	@ (800039c <_ZN9DebugTask4InstEv+0x4c>)
  }
 8000392:	4618      	mov	r0, r3
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200000b4 	.word	0x200000b4
 800039c:	2000008c 	.word	0x2000008c

080003a0 <_Z8run_mainv>:

/* Interface Functions ------------------------------------------------------------*/
/**
 * @brief Main function interface, called inside main.cpp before os initialization takes place.
*/
void run_main() {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
    // Init Tasks
    CubeTask::Inst().InitTask();
 80003a4:	f7ff ff98 	bl	80002d8 <_ZN8CubeTask4InstEv>
 80003a8:	4603      	mov	r3, r0
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	6812      	ldr	r2, [r2, #0]
 80003ae:	4618      	mov	r0, r3
 80003b0:	4790      	blx	r2
    DebugTask::Inst().InitTask();
 80003b2:	f7ff ffcd 	bl	8000350 <_ZN9DebugTask4InstEv>
 80003b6:	4603      	mov	r3, r0
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	6812      	ldr	r2, [r2, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	4790      	blx	r2

    // Print System Boot Info : Warning, don't queue more than 10 prints before scheduler starts
    SOAR_PRINT("\n-- CUBE SYSTEM --\n");
 80003c0:	4811      	ldr	r0, [pc, #68]	@ (8000408 <_Z8run_mainv+0x68>)
 80003c2:	f006 feed 	bl	80071a0 <_Z10cube_printPKcz>
    SOAR_PRINT("System Reset Reason: [TODO]\n"); //TODO: System reset reason can be implemented via. Flash storage
 80003c6:	4811      	ldr	r0, [pc, #68]	@ (800040c <_Z8run_mainv+0x6c>)
 80003c8:	f006 feea 	bl	80071a0 <_Z10cube_printPKcz>
    SOAR_PRINT("Current System Free Heap: %d Bytes\n", xPortGetFreeHeapSize());
 80003cc:	f006 fa20 	bl	8006810 <xPortGetFreeHeapSize>
 80003d0:	4603      	mov	r3, r0
 80003d2:	4619      	mov	r1, r3
 80003d4:	480e      	ldr	r0, [pc, #56]	@ (8000410 <_Z8run_mainv+0x70>)
 80003d6:	f006 fee3 	bl	80071a0 <_Z10cube_printPKcz>
    SOAR_PRINT("Lowest Ever Free Heap: %d Bytes\n\n", xPortGetMinimumEverFreeHeapSize());
 80003da:	f006 fa25 	bl	8006828 <xPortGetMinimumEverFreeHeapSize>
 80003de:	4603      	mov	r3, r0
 80003e0:	4619      	mov	r1, r3
 80003e2:	480c      	ldr	r0, [pc, #48]	@ (8000414 <_Z8run_mainv+0x74>)
 80003e4:	f006 fedc 	bl	80071a0 <_Z10cube_printPKcz>

    // Start the Scheduler
    // Guidelines:
    // - Be CAREFUL with race conditions after osKernelStart
    // - All uses of new and delete should be closely monitored after this point
    osKernelStart();
 80003e8:	f003 fb3a 	bl	8003a60 <osKernelStart>

    // Should never reach here
    SOAR_ASSERT(false, "osKernelStart() failed");
 80003ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000418 <_Z8run_mainv+0x78>)
 80003ee:	222b      	movs	r2, #43	@ 0x2b
 80003f0:	490a      	ldr	r1, [pc, #40]	@ (800041c <_Z8run_mainv+0x7c>)
 80003f2:	2000      	movs	r0, #0
 80003f4:	f006 ff32 	bl	800725c <_Z17cube_assert_debugbPKctS0_z>

    while (1)
    {
        osDelay(100);
 80003f8:	2064      	movs	r0, #100	@ 0x64
 80003fa:	f003 fb38 	bl	8003a6e <osDelay>
        HAL_NVIC_SystemReset();
 80003fe:	f000 fdb0 	bl	8000f62 <HAL_NVIC_SystemReset>
        osDelay(100);
 8000402:	bf00      	nop
 8000404:	e7f8      	b.n	80003f8 <_Z8run_mainv+0x58>
 8000406:	bf00      	nop
 8000408:	08008350 	.word	0x08008350
 800040c:	08008364 	.word	0x08008364
 8000410:	08008384 	.word	0x08008384
 8000414:	080083a8 	.word	0x080083a8
 8000418:	080083cc 	.word	0x080083cc
 800041c:	080083e4 	.word	0x080083e4

08000420 <_Z41__static_initialization_and_destruction_0v>:
    }
}
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
    UARTDriver uart1(USART1);
 8000424:	4902      	ldr	r1, [pc, #8]	@ (8000430 <_Z41__static_initialization_and_destruction_0v+0x10>)
 8000426:	4803      	ldr	r0, [pc, #12]	@ (8000434 <_Z41__static_initialization_and_destruction_0v+0x14>)
 8000428:	f7ff ff40 	bl	80002ac <_ZN10UARTDriverC1EP13USART_TypeDef>
}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40013800 	.word	0x40013800
 8000434:	200000b8 	.word	0x200000b8

08000438 <_GLOBAL__sub_I__ZN6Driver5uart1E>:
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
 800043c:	f7ff fff0 	bl	8000420 <_Z41__static_initialization_and_destruction_0v>
 8000440:	bd80      	pop	{r7, pc}

08000442 <_ZNK7Command10GetCommandEv>:
    void Reset();    // Reset the command, equivalent of a destructor that must be called, counts allocations and deallocations, asserts an error if the allocation count is too high

    // Getters
    uint16_t GetDataSize() const;
    uint8_t* GetDataPointer() const { return data; }
    GLOBAL_COMMANDS GetCommand() const { return command; }
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <_ZNK7Command14GetTaskCommandEv>:
    uint16_t GetTaskCommand() const { return taskCommand; }
 800045a:	b480      	push	{r7}
 800045c:	b083      	sub	sp, #12
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	885b      	ldrh	r3, [r3, #2]
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
	...

08000474 <_ZN16UARTReceiverBaseC1Ev>:
class UARTReceiverBase
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	4a04      	ldr	r2, [pc, #16]	@ (8000490 <_ZN16UARTReceiverBaseC1Ev+0x1c>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4618      	mov	r0, r3
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	08008890 	.word	0x08008890

08000494 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	4a07      	ldr	r2, [pc, #28]	@ (80004c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80004a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	4a06      	ldr	r2, [pc, #24]	@ (80004c4 <vApplicationGetIdleTaskMemory+0x30>)
 80004aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	22c0      	movs	r2, #192	@ 0xc0
 80004b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	200000c4 	.word	0x200000c4
 80004c4:	20000164 	.word	0x20000164

080004c8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	@ (80004f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	@ (80004f8 <vApplicationGetTimerTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80004e6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e8:	bf00      	nop
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	20000464 	.word	0x20000464
 80004f8:	20000504 	.word	0x20000504

080004fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000500:	4b04      	ldr	r3, [pc, #16]	@ (8000514 <__NVIC_GetPriorityGrouping+0x18>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	0a1b      	lsrs	r3, r3, #8
 8000506:	f003 0307 	and.w	r3, r3, #7
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	db0b      	blt.n	8000542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 021f 	and.w	r2, r3, #31
 8000530:	4907      	ldr	r1, [pc, #28]	@ (8000550 <__NVIC_EnableIRQ+0x38>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	095b      	lsrs	r3, r3, #5
 8000538:	2001      	movs	r0, #1
 800053a:	fa00 f202 	lsl.w	r2, r0, r2
 800053e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000e100 	.word	0xe000e100

08000554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db0a      	blt.n	800057e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	b2da      	uxtb	r2, r3
 800056c:	490c      	ldr	r1, [pc, #48]	@ (80005a0 <__NVIC_SetPriority+0x4c>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	0112      	lsls	r2, r2, #4
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	440b      	add	r3, r1
 8000578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800057c:	e00a      	b.n	8000594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4908      	ldr	r1, [pc, #32]	@ (80005a4 <__NVIC_SetPriority+0x50>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	3b04      	subs	r3, #4
 800058c:	0112      	lsls	r2, r2, #4
 800058e:	b2d2      	uxtb	r2, r2
 8000590:	440b      	add	r3, r1
 8000592:	761a      	strb	r2, [r3, #24]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000e100 	.word	0xe000e100
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b089      	sub	sp, #36	@ 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	f1c3 0307 	rsb	r3, r3, #7
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	bf28      	it	cs
 80005c6:	2304      	movcs	r3, #4
 80005c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	3304      	adds	r3, #4
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	d902      	bls.n	80005d8 <NVIC_EncodePriority+0x30>
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	3b03      	subs	r3, #3
 80005d6:	e000      	b.n	80005da <NVIC_EncodePriority+0x32>
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	43da      	mvns	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	401a      	ands	r2, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	43d9      	mvns	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	4313      	orrs	r3, r2
         );
}
 8000602:	4618      	mov	r0, r3
 8000604:	3724      	adds	r7, #36	@ 0x24
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f043 0201 	orr.w	r2, r3, #1
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	601a      	str	r2, [r3, #0]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	609a      	str	r2, [r3, #8]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
	...

0800065c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000664:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000666:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000668:	4907      	ldr	r1, [pc, #28]	@ (8000688 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4313      	orrs	r3, r2
 800066e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000670:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000672:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4013      	ands	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	40021000 	.word	0x40021000

0800068c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000696:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000698:	4907      	ldr	r1, [pc, #28]	@ (80006b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4313      	orrs	r3, r2
 800069e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006a0:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4013      	ands	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006aa:	68fb      	ldr	r3, [r7, #12]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	40021000 	.word	0x40021000

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f000 fb1d 	bl	8000cfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f80d 	bl	80006e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 f92e 	bl	8000928 <MX_GPIO_Init>
  MX_CRC_Init();
 80006cc:	f000 f850 	bl	8000770 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80006d0:	f000 f8b0 	bl	8000834 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80006d4:	f000 f86e 	bl	80007b4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  run_interface();
 80006d8:	f7ff fde2 	bl	80002a0 <run_interface>
 80006dc:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */
  }
#endif
  /* USER CODE END 3 */
}
 80006de:	4618      	mov	r0, r3
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b096      	sub	sp, #88	@ 0x58
 80006e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2244      	movs	r2, #68	@ 0x44
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f007 f945 	bl	8007980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000704:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000708:	f000 ffdc 	bl	80016c4 <HAL_PWREx_ControlVoltageScaling>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000712:	f000 f93f 	bl	8000994 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000716:	2310      	movs	r3, #16
 8000718:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800071a:	2301      	movs	r3, #1
 800071c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000722:	2360      	movs	r3, #96	@ 0x60
 8000724:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000726:	2300      	movs	r3, #0
 8000728:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f81e 	bl	8001770 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800073a:	f000 f92b 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fc1e 	bl	8001f98 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000762:	f000 f917 	bl	8000994 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3758      	adds	r7, #88	@ 0x58
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000774:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <MX_CRC_Init+0x3c>)
 8000776:	4a0e      	ldr	r2, [pc, #56]	@ (80007b0 <MX_CRC_Init+0x40>)
 8000778:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800077a:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_CRC_Init+0x3c>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <MX_CRC_Init+0x3c>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_CRC_Init+0x3c>)
 8000794:	2201      	movs	r2, #1
 8000796:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_CRC_Init+0x3c>)
 800079a:	f000 fbe7 	bl	8000f6c <HAL_CRC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007a4:	f000 f8f6 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000b04 	.word	0x20000b04
 80007b0:	40023000 	.word	0x40023000

080007b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	@ (800082c <MX_I2C2_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000830 <MX_I2C2_Init+0x7c>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007f0:	f000 fe28 	bl	8001444 <HAL_I2C_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007fa:	f000 f8cb 	bl	8000994 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4809      	ldr	r0, [pc, #36]	@ (8000828 <MX_I2C2_Init+0x74>)
 8000802:	f000 feba 	bl	800157a <HAL_I2CEx_ConfigAnalogFilter>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800080c:	f000 f8c2 	bl	8000994 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_I2C2_Init+0x74>)
 8000814:	f000 fefc 	bl	8001610 <HAL_I2CEx_ConfigDigitalFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 f8b9 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000b28 	.word	0x20000b28
 800082c:	40005800 	.word	0x40005800
 8000830:	00100d14 	.word	0x00100d14

08000834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b0a4      	sub	sp, #144	@ 0x90
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800083a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
 800085e:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000860:	463b      	mov	r3, r7
 8000862:	225c      	movs	r2, #92	@ 0x5c
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f007 f88a 	bl	8007980 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800086c:	2301      	movs	r3, #1
 800086e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fdce 	bl	8002418 <HAL_RCCEx_PeriphCLKConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f887 	bl	8000994 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000886:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800088a:	f7ff feff 	bl	800068c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800088e:	2001      	movs	r0, #1
 8000890:	f7ff fee4 	bl	800065c <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000894:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000898:	65fb      	str	r3, [r7, #92]	@ 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800089a:	2302      	movs	r3, #2
 800089c:	663b      	str	r3, [r7, #96]	@ 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	667b      	str	r3, [r7, #100]	@ 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008a6:	2300      	movs	r3, #0
 80008a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80008aa:	2307      	movs	r3, #7
 80008ac:	673b      	str	r3, [r7, #112]	@ 0x70
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b8:	f002 fc77 	bl	80031aa <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80008bc:	f7ff fe1e 	bl	80004fc <__NVIC_GetPriorityGrouping>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2200      	movs	r2, #0
 80008c4:	2105      	movs	r1, #5
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fe6e 	bl	80005a8 <NVIC_EncodePriority>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4619      	mov	r1, r3
 80008d0:	2025      	movs	r0, #37	@ 0x25
 80008d2:	f7ff fe3f 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80008d6:	2025      	movs	r0, #37	@ 0x25
 80008d8:	f7ff fe1e 	bl	8000518 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80008dc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80008e0:	677b      	str	r3, [r7, #116]	@ 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80008e2:	2300      	movs	r3, #0
 80008e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80008f0:	230c      	movs	r3, #12
 80008f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000902:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000906:	4619      	mov	r1, r3
 8000908:	4806      	ldr	r0, [pc, #24]	@ (8000924 <MX_USART1_UART_Init+0xf0>)
 800090a:	f003 f843 	bl	8003994 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800090e:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_USART1_UART_Init+0xf0>)
 8000910:	f7ff fe8d 	bl	800062e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000914:	4803      	ldr	r0, [pc, #12]	@ (8000924 <MX_USART1_UART_Init+0xf0>)
 8000916:	f7ff fe7a 	bl	800060e <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	3790      	adds	r7, #144	@ 0x90
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40013800 	.word	0x40013800

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_GPIO_Init+0x44>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4a0e      	ldr	r2, [pc, #56]	@ (800096c <MX_GPIO_Init+0x44>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_GPIO_Init+0x44>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_GPIO_Init+0x44>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	4a08      	ldr	r2, [pc, #32]	@ (800096c <MX_GPIO_Init+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_GPIO_Init+0x44>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000982:	f000 f9d5 	bl	8000d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40012c00 	.word	0x40012c00

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <Error_Handler+0x8>

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <HAL_MspInit+0x4c>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009aa:	4a10      	ldr	r2, [pc, #64]	@ (80009ec <HAL_MspInit+0x4c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <HAL_MspInit+0x4c>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <HAL_MspInit+0x4c>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c2:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <HAL_MspInit+0x4c>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	210f      	movs	r1, #15
 80009da:	f06f 0001 	mvn.w	r0, #1
 80009de:	f000 fa96 	bl	8000f0e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <HAL_CRC_MspInit+0x38>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d10b      	bne.n	8000a1a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a02:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <HAL_CRC_MspInit+0x3c>)
 8000a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a06:	4a09      	ldr	r2, [pc, #36]	@ (8000a2c <HAL_CRC_MspInit+0x3c>)
 8000a08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a0e:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <HAL_CRC_MspInit+0x3c>)
 8000a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023000 	.word	0x40023000
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0a0      	sub	sp, #128	@ 0x80
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	225c      	movs	r2, #92	@ 0x5c
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f006 ff95 	bl	8007980 <memset>
  if(hi2c->Instance==I2C2)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad8 <HAL_I2C_MspInit+0xa8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d136      	bne.n	8000ace <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a60:	2380      	movs	r3, #128	@ 0x80
 8000a62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fcd3 	bl	8002418 <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a78:	f7ff ff8c 	bl	8000994 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <HAL_I2C_MspInit+0xac>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a80:	4a16      	ldr	r2, [pc, #88]	@ (8000adc <HAL_I2C_MspInit+0xac>)
 8000a82:	f043 0302 	orr.w	r3, r3, #2
 8000a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <HAL_I2C_MspInit+0xac>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a94:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9a:	2312      	movs	r3, #18
 8000a9c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480b      	ldr	r0, [pc, #44]	@ (8000ae0 <HAL_I2C_MspInit+0xb0>)
 8000ab2:	f000 fb4d 	bl	8001150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ab6:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <HAL_I2C_MspInit+0xac>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aba:	4a08      	ldr	r2, [pc, #32]	@ (8000adc <HAL_I2C_MspInit+0xac>)
 8000abc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_I2C_MspInit+0xac>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000ace:	bf00      	nop
 8000ad0:	3780      	adds	r7, #128	@ 0x80
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40005800 	.word	0x40005800
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000400 	.word	0x48000400

08000ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	@ 0x30
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <HAL_InitTick+0xc8>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af6:	4a2d      	ldr	r2, [pc, #180]	@ (8000bac <HAL_InitTick+0xc8>)
 8000af8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000afc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000afe:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <HAL_InitTick+0xc8>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b0a:	f107 020c 	add.w	r2, r7, #12
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fbed 	bl	80022f4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b1a:	f001 fbd5 	bl	80022c8 <HAL_RCC_GetPCLK2Freq>
 8000b1e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b22:	4a23      	ldr	r2, [pc, #140]	@ (8000bb0 <HAL_InitTick+0xcc>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	0c9b      	lsrs	r3, r3, #18
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	@ (8000bb4 <HAL_InitTick+0xd0>)
 8000b30:	4a21      	ldr	r2, [pc, #132]	@ (8000bb8 <HAL_InitTick+0xd4>)
 8000b32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b34:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb4 <HAL_InitTick+0xd0>)
 8000b36:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b3a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb4 <HAL_InitTick+0xd0>)
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b40:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb4 <HAL_InitTick+0xd0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb4 <HAL_InitTick+0xd0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <HAL_InitTick+0xd0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b54:	4817      	ldr	r0, [pc, #92]	@ (8000bb4 <HAL_InitTick+0xd0>)
 8000b56:	f001 ff69 	bl	8002a2c <HAL_TIM_Base_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d11b      	bne.n	8000ba0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b68:	4812      	ldr	r0, [pc, #72]	@ (8000bb4 <HAL_InitTick+0xd0>)
 8000b6a:	f001 ffc1 	bl	8002af0 <HAL_TIM_Base_Start_IT>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d111      	bne.n	8000ba0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b7c:	2019      	movs	r0, #25
 8000b7e:	f000 f9e2 	bl	8000f46 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d808      	bhi.n	8000b9a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	2019      	movs	r0, #25
 8000b8e:	f000 f9be 	bl	8000f0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b92:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <HAL_InitTick+0xd8>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	e002      	b.n	8000ba0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3730      	adds	r7, #48	@ 0x30
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	431bde83 	.word	0x431bde83
 8000bb4:	20000b7c 	.word	0x20000b7c
 8000bb8:	40012c00 	.word	0x40012c00
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	@ (8000c08 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bfe:	f001 ffcb 	bl	8002b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000b7c 	.word	0x20000b7c

08000c0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c24:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <_sbrk+0x5c>)
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <_sbrk+0x60>)
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c30:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <_sbrk+0x64>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <_sbrk+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d207      	bcs.n	8000c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c4c:	f006 fea0 	bl	8007990 <__errno>
 8000c50:	4603      	mov	r3, r0
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000c000 	.word	0x2000c000
 8000c7c:	00000400 	.word	0x00000400
 8000c80:	20000bc8 	.word	0x20000bc8
 8000c84:	2000abf0 	.word	0x2000abf0

08000c88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	@ (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb0:	f7ff ffea 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	@ (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	@ (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cda:	f006 fe5f 	bl	800799c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cde:	f7ff fced 	bl	80006bc <main>

08000ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000cf0:	08008960 	.word	0x08008960
  ldr r2, =_sbss
 8000cf4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000cf8:	2000abf0 	.word	0x2000abf0

08000cfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_IRQHandler>

08000cfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f000 f8f5 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d0e:	200f      	movs	r0, #15
 8000d10:	f7ff fee8 	bl	8000ae4 <HAL_InitTick>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	e001      	b.n	8000d24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d20:	f7ff fe3e 	bl	80009a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d24:	79fb      	ldrb	r3, [r7, #7]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000bcc 	.word	0x20000bcc

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000bcc 	.word	0x20000bcc

08000d70 <__NVIC_SetPriorityGrouping>:
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	@ (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	@ (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	@ (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	@ 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed0:	f3bf 8f4f 	dsb	sy
}
 8000ed4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <__NVIC_SystemReset+0x24>)
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ede:	4904      	ldr	r1, [pc, #16]	@ (8000ef0 <__NVIC_SystemReset+0x24>)
 8000ee0:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <__NVIC_SystemReset+0x28>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee6:	f3bf 8f4f 	dsb	sy
}
 8000eea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <__NVIC_SystemReset+0x20>
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	05fa0004 	.word	0x05fa0004

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff35 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff4a 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff9a 	bl	8000e64 <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff69 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff3d 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000f66:	f7ff ffb1 	bl	8000ecc <__NVIC_SystemReset>
	...

08000f6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e054      	b.n	8001028 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7f5b      	ldrb	r3, [r3, #29]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d105      	bne.n	8000f94 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fd2e 	bl	80009f0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2202      	movs	r2, #2
 8000f98:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	791b      	ldrb	r3, [r3, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10c      	bne.n	8000fbc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a22      	ldr	r2, [pc, #136]	@ (8001030 <HAL_CRC_Init+0xc4>)
 8000fa8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0218 	bic.w	r2, r2, #24
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	e00c      	b.n	8000fd6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6899      	ldr	r1, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f834 	bl	8001034 <HAL_CRCEx_Polynomial_Set>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e028      	b.n	8001028 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	795b      	ldrb	r3, [r3, #5]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d105      	bne.n	8000fea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	e004      	b.n	8000ff4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6912      	ldr	r2, [r2, #16]
 8000ff2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695a      	ldr	r2, [r3, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	699a      	ldr	r2, [r3, #24]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	04c11db7 	.word	0x04c11db7

08001034 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001044:	231f      	movs	r3, #31
 8001046:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	75fb      	strb	r3, [r7, #23]
 8001056:	e063      	b.n	8001120 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001058:	bf00      	nop
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1e5a      	subs	r2, r3, #1
 800105e:	613a      	str	r2, [r7, #16]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d009      	beq.n	8001078 <HAL_CRCEx_Polynomial_Set+0x44>
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	f003 031f 	and.w	r3, r3, #31
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f0      	beq.n	800105a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b18      	cmp	r3, #24
 800107c:	d846      	bhi.n	800110c <HAL_CRCEx_Polynomial_Set+0xd8>
 800107e:	a201      	add	r2, pc, #4	@ (adr r2, 8001084 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	08001113 	.word	0x08001113
 8001088:	0800110d 	.word	0x0800110d
 800108c:	0800110d 	.word	0x0800110d
 8001090:	0800110d 	.word	0x0800110d
 8001094:	0800110d 	.word	0x0800110d
 8001098:	0800110d 	.word	0x0800110d
 800109c:	0800110d 	.word	0x0800110d
 80010a0:	0800110d 	.word	0x0800110d
 80010a4:	08001101 	.word	0x08001101
 80010a8:	0800110d 	.word	0x0800110d
 80010ac:	0800110d 	.word	0x0800110d
 80010b0:	0800110d 	.word	0x0800110d
 80010b4:	0800110d 	.word	0x0800110d
 80010b8:	0800110d 	.word	0x0800110d
 80010bc:	0800110d 	.word	0x0800110d
 80010c0:	0800110d 	.word	0x0800110d
 80010c4:	080010f5 	.word	0x080010f5
 80010c8:	0800110d 	.word	0x0800110d
 80010cc:	0800110d 	.word	0x0800110d
 80010d0:	0800110d 	.word	0x0800110d
 80010d4:	0800110d 	.word	0x0800110d
 80010d8:	0800110d 	.word	0x0800110d
 80010dc:	0800110d 	.word	0x0800110d
 80010e0:	0800110d 	.word	0x0800110d
 80010e4:	080010e9 	.word	0x080010e9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d913      	bls.n	8001116 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010f2:	e010      	b.n	8001116 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	2b07      	cmp	r3, #7
 80010f8:	d90f      	bls.n	800111a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010fe:	e00c      	b.n	800111a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	d90b      	bls.n	800111e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800110a:	e008      	b.n	800111e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	75fb      	strb	r3, [r7, #23]
        break;
 8001110:	e006      	b.n	8001120 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001112:	bf00      	nop
 8001114:	e004      	b.n	8001120 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001116:	bf00      	nop
 8001118:	e002      	b.n	8001120 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800111a:	bf00      	nop
 800111c:	e000      	b.n	8001120 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800111e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10d      	bne.n	8001142 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f023 0118 	bic.w	r1, r3, #24
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	430a      	orrs	r2, r1
 8001140:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001142:	7dfb      	ldrb	r3, [r7, #23]
}
 8001144:	4618      	mov	r0, r3
 8001146:	371c      	adds	r7, #28
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	e154      	b.n	800140a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	2101      	movs	r1, #1
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	4013      	ands	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8146 	beq.w	8001404 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b01      	cmp	r3, #1
 8001182:	d005      	beq.n	8001190 <HAL_GPIO_Init+0x40>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d130      	bne.n	80011f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011c6:	2201      	movs	r2, #1
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	f003 0201 	and.w	r2, r3, #1
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d017      	beq.n	800122e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d123      	bne.n	8001282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	6939      	ldr	r1, [r7, #16]
 800127e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0203 	and.w	r2, r3, #3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 80a0 	beq.w	8001404 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c4:	4b58      	ldr	r3, [pc, #352]	@ (8001428 <HAL_GPIO_Init+0x2d8>)
 80012c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c8:	4a57      	ldr	r2, [pc, #348]	@ (8001428 <HAL_GPIO_Init+0x2d8>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80012d0:	4b55      	ldr	r3, [pc, #340]	@ (8001428 <HAL_GPIO_Init+0x2d8>)
 80012d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012dc:	4a53      	ldr	r2, [pc, #332]	@ (800142c <HAL_GPIO_Init+0x2dc>)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001306:	d019      	beq.n	800133c <HAL_GPIO_Init+0x1ec>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a49      	ldr	r2, [pc, #292]	@ (8001430 <HAL_GPIO_Init+0x2e0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d013      	beq.n	8001338 <HAL_GPIO_Init+0x1e8>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a48      	ldr	r2, [pc, #288]	@ (8001434 <HAL_GPIO_Init+0x2e4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d00d      	beq.n	8001334 <HAL_GPIO_Init+0x1e4>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a47      	ldr	r2, [pc, #284]	@ (8001438 <HAL_GPIO_Init+0x2e8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d007      	beq.n	8001330 <HAL_GPIO_Init+0x1e0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a46      	ldr	r2, [pc, #280]	@ (800143c <HAL_GPIO_Init+0x2ec>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d101      	bne.n	800132c <HAL_GPIO_Init+0x1dc>
 8001328:	2304      	movs	r3, #4
 800132a:	e008      	b.n	800133e <HAL_GPIO_Init+0x1ee>
 800132c:	2307      	movs	r3, #7
 800132e:	e006      	b.n	800133e <HAL_GPIO_Init+0x1ee>
 8001330:	2303      	movs	r3, #3
 8001332:	e004      	b.n	800133e <HAL_GPIO_Init+0x1ee>
 8001334:	2302      	movs	r3, #2
 8001336:	e002      	b.n	800133e <HAL_GPIO_Init+0x1ee>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <HAL_GPIO_Init+0x1ee>
 800133c:	2300      	movs	r3, #0
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	f002 0203 	and.w	r2, r2, #3
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4093      	lsls	r3, r2
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800134e:	4937      	ldr	r1, [pc, #220]	@ (800142c <HAL_GPIO_Init+0x2dc>)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800135c:	4b38      	ldr	r3, [pc, #224]	@ (8001440 <HAL_GPIO_Init+0x2f0>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43db      	mvns	r3, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001380:	4a2f      	ldr	r2, [pc, #188]	@ (8001440 <HAL_GPIO_Init+0x2f0>)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001386:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <HAL_GPIO_Init+0x2f0>)
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013aa:	4a25      	ldr	r2, [pc, #148]	@ (8001440 <HAL_GPIO_Init+0x2f0>)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013b0:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <HAL_GPIO_Init+0x2f0>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001440 <HAL_GPIO_Init+0x2f0>)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013da:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_GPIO_Init+0x2f0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013fe:	4a10      	ldr	r2, [pc, #64]	@ (8001440 <HAL_GPIO_Init+0x2f0>)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3301      	adds	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	f47f aea3 	bne.w	8001160 <HAL_GPIO_Init+0x10>
  }
}
 800141a:	bf00      	nop
 800141c:	bf00      	nop
 800141e:	371c      	adds	r7, #28
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	40021000 	.word	0x40021000
 800142c:	40010000 	.word	0x40010000
 8001430:	48000400 	.word	0x48000400
 8001434:	48000800 	.word	0x48000800
 8001438:	48000c00 	.word	0x48000c00
 800143c:	48001000 	.word	0x48001000
 8001440:	40010400 	.word	0x40010400

08001444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e08d      	b.n	8001572 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d106      	bne.n	8001470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fae0 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2224      	movs	r2, #36	@ 0x24
 8001474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001494:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	e006      	b.n	80014cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80014ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d108      	bne.n	80014e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	e007      	b.n	80014f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001504:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001508:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001518:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69d9      	ldr	r1, [r3, #28]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1a      	ldr	r2, [r3, #32]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2220      	movs	r2, #32
 800155e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b20      	cmp	r3, #32
 800158e:	d138      	bne.n	8001602 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800159a:	2302      	movs	r3, #2
 800159c:	e032      	b.n	8001604 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2224      	movs	r2, #36	@ 0x24
 80015aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0201 	bic.w	r2, r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80015cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6819      	ldr	r1, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f042 0201 	orr.w	r2, r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2220      	movs	r2, #32
 80015f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001602:	2302      	movs	r3, #2
  }
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b20      	cmp	r3, #32
 8001624:	d139      	bne.n	800169a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001630:	2302      	movs	r3, #2
 8001632:	e033      	b.n	800169c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2224      	movs	r2, #36	@ 0x24
 8001640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001662:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2220      	movs	r2, #32
 800168a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800169a:	2302      	movs	r3, #2
  }
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016ac:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40007000 	.word	0x40007000

080016c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016d2:	d130      	bne.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016d4:	4b23      	ldr	r3, [pc, #140]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016e0:	d038      	beq.n	8001754 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e2:	4b20      	ldr	r3, [pc, #128]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2232      	movs	r2, #50	@ 0x32
 80016f8:	fb02 f303 	mul.w	r3, r2, r3
 80016fc:	4a1b      	ldr	r2, [pc, #108]	@ (800176c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	0c9b      	lsrs	r3, r3, #18
 8001704:	3301      	adds	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001708:	e002      	b.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3b01      	subs	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001710:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800171c:	d102      	bne.n	8001724 <HAL_PWREx_ControlVoltageScaling+0x60>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f2      	bne.n	800170a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001724:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800172c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001730:	d110      	bne.n	8001754 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e00f      	b.n	8001756 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001742:	d007      	beq.n	8001754 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800174c:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001752:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40007000 	.word	0x40007000
 8001768:	20000000 	.word	0x20000000
 800176c:	431bde83 	.word	0x431bde83

08001770 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	f000 bc02 	b.w	8001f88 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001784:	4b96      	ldr	r3, [pc, #600]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800178e:	4b94      	ldr	r3, [pc, #592]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80e4 	beq.w	800196e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d007      	beq.n	80017bc <HAL_RCC_OscConfig+0x4c>
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b0c      	cmp	r3, #12
 80017b0:	f040 808b 	bne.w	80018ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	f040 8087 	bne.w	80018ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017bc:	4b88      	ldr	r3, [pc, #544]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_OscConfig+0x64>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e3d9      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1a      	ldr	r2, [r3, #32]
 80017d8:	4b81      	ldr	r3, [pc, #516]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <HAL_RCC_OscConfig+0x7e>
 80017e4:	4b7e      	ldr	r3, [pc, #504]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017ec:	e005      	b.n	80017fa <HAL_RCC_OscConfig+0x8a>
 80017ee:	4b7c      	ldr	r3, [pc, #496]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 80017f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d223      	bcs.n	8001846 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fda8 	bl	8002358 <RCC_SetFlashLatencyFromMSIRange>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e3ba      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001812:	4b73      	ldr	r3, [pc, #460]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a72      	ldr	r2, [pc, #456]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b70      	ldr	r3, [pc, #448]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	496d      	ldr	r1, [pc, #436]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001830:	4b6b      	ldr	r3, [pc, #428]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	4968      	ldr	r1, [pc, #416]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
 8001844:	e025      	b.n	8001892 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001846:	4b66      	ldr	r3, [pc, #408]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a65      	ldr	r2, [pc, #404]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b63      	ldr	r3, [pc, #396]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4960      	ldr	r1, [pc, #384]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001864:	4b5e      	ldr	r3, [pc, #376]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	495b      	ldr	r1, [pc, #364]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fd68 	bl	8002358 <RCC_SetFlashLatencyFromMSIRange>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e37a      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001892:	f000 fc81 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8001896:	4602      	mov	r2, r0
 8001898:	4b51      	ldr	r3, [pc, #324]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	4950      	ldr	r1, [pc, #320]	@ (80019e4 <HAL_RCC_OscConfig+0x274>)
 80018a4:	5ccb      	ldrb	r3, [r1, r3]
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	4a4e      	ldr	r2, [pc, #312]	@ (80019e8 <HAL_RCC_OscConfig+0x278>)
 80018b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018b2:	4b4e      	ldr	r3, [pc, #312]	@ (80019ec <HAL_RCC_OscConfig+0x27c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f914 	bl	8000ae4 <HAL_InitTick>
 80018bc:	4603      	mov	r3, r0
 80018be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d052      	beq.n	800196c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	e35e      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d032      	beq.n	8001938 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018d2:	4b43      	ldr	r3, [pc, #268]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a42      	ldr	r2, [pc, #264]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018de:	f7ff fa3b 	bl	8000d58 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018e6:	f7ff fa37 	bl	8000d58 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e347      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018f8:	4b39      	ldr	r3, [pc, #228]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001904:	4b36      	ldr	r3, [pc, #216]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a35      	ldr	r2, [pc, #212]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 800190a:	f043 0308 	orr.w	r3, r3, #8
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b33      	ldr	r3, [pc, #204]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4930      	ldr	r1, [pc, #192]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001922:	4b2f      	ldr	r3, [pc, #188]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	492b      	ldr	r1, [pc, #172]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001932:	4313      	orrs	r3, r2
 8001934:	604b      	str	r3, [r1, #4]
 8001936:	e01a      	b.n	800196e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001938:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a28      	ldr	r2, [pc, #160]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001944:	f7ff fa08 	bl	8000d58 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800194c:	f7ff fa04 	bl	8000d58 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e314      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800195e:	4b20      	ldr	r3, [pc, #128]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x1dc>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d073      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b08      	cmp	r3, #8
 800197e:	d005      	beq.n	800198c <HAL_RCC_OscConfig+0x21c>
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d10e      	bne.n	80019a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d10b      	bne.n	80019a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d063      	beq.n	8001a60 <HAL_RCC_OscConfig+0x2f0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d15f      	bne.n	8001a60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e2f1      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ac:	d106      	bne.n	80019bc <HAL_RCC_OscConfig+0x24c>
 80019ae:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a0b      	ldr	r2, [pc, #44]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e025      	b.n	8001a08 <HAL_RCC_OscConfig+0x298>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019c4:	d114      	bne.n	80019f0 <HAL_RCC_OscConfig+0x280>
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a05      	ldr	r2, [pc, #20]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 80019cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	4b03      	ldr	r3, [pc, #12]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a02      	ldr	r2, [pc, #8]	@ (80019e0 <HAL_RCC_OscConfig+0x270>)
 80019d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e013      	b.n	8001a08 <HAL_RCC_OscConfig+0x298>
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08008894 	.word	0x08008894
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000004 	.word	0x20000004
 80019f0:	4ba0      	ldr	r3, [pc, #640]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a9f      	ldr	r2, [pc, #636]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 80019f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b9d      	ldr	r3, [pc, #628]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a9c      	ldr	r2, [pc, #624]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001a02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d013      	beq.n	8001a38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff f9a2 	bl	8000d58 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff f99e 	bl	8000d58 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	@ 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e2ae      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2a:	4b92      	ldr	r3, [pc, #584]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2a8>
 8001a36:	e014      	b.n	8001a62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff f98e 	bl	8000d58 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff f98a 	bl	8000d58 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	@ 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e29a      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a52:	4b88      	ldr	r3, [pc, #544]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2d0>
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d060      	beq.n	8001b30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_OscConfig+0x310>
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d119      	bne.n	8001aae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d116      	bne.n	8001aae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a80:	4b7c      	ldr	r3, [pc, #496]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_OscConfig+0x328>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e277      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b76      	ldr	r3, [pc, #472]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	061b      	lsls	r3, r3, #24
 8001aa6:	4973      	ldr	r1, [pc, #460]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aac:	e040      	b.n	8001b30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d023      	beq.n	8001afe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab6:	4b6f      	ldr	r3, [pc, #444]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6e      	ldr	r2, [pc, #440]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7ff f949 	bl	8000d58 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aca:	f7ff f945 	bl	8000d58 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e255      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001adc:	4b65      	ldr	r3, [pc, #404]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b62      	ldr	r3, [pc, #392]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	495f      	ldr	r1, [pc, #380]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
 8001afc:	e018      	b.n	8001b30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afe:	4b5d      	ldr	r3, [pc, #372]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a5c      	ldr	r2, [pc, #368]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7ff f925 	bl	8000d58 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b12:	f7ff f921 	bl	8000d58 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e231      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b24:	4b53      	ldr	r3, [pc, #332]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d03c      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01c      	beq.n	8001b7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b44:	4b4b      	ldr	r3, [pc, #300]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b4a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b54:	f7ff f900 	bl	8000d58 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7ff f8fc 	bl	8000d58 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e20c      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b6e:	4b41      	ldr	r3, [pc, #260]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0ef      	beq.n	8001b5c <HAL_RCC_OscConfig+0x3ec>
 8001b7c:	e01b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b84:	4a3b      	ldr	r2, [pc, #236]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8e:	f7ff f8e3 	bl	8000d58 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b96:	f7ff f8df 	bl	8000d58 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e1ef      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba8:	4b32      	ldr	r3, [pc, #200]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ef      	bne.n	8001b96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80a6 	beq.w	8001d10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10d      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd4:	4b27      	ldr	r3, [pc, #156]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	4a26      	ldr	r2, [pc, #152]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be0:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bec:	2301      	movs	r3, #1
 8001bee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf0:	4b21      	ldr	r3, [pc, #132]	@ (8001c78 <HAL_RCC_OscConfig+0x508>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d118      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <HAL_RCC_OscConfig+0x508>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1d      	ldr	r2, [pc, #116]	@ (8001c78 <HAL_RCC_OscConfig+0x508>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c08:	f7ff f8a6 	bl	8000d58 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c10:	f7ff f8a2 	bl	8000d58 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1b2      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <HAL_RCC_OscConfig+0x508>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d108      	bne.n	8001c48 <HAL_RCC_OscConfig+0x4d8>
 8001c36:	4b0f      	ldr	r3, [pc, #60]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c46:	e029      	b.n	8001c9c <HAL_RCC_OscConfig+0x52c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b05      	cmp	r3, #5
 8001c4e:	d115      	bne.n	8001c7c <HAL_RCC_OscConfig+0x50c>
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c56:	4a07      	ldr	r2, [pc, #28]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c60:	4b04      	ldr	r3, [pc, #16]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c66:	4a03      	ldr	r2, [pc, #12]	@ (8001c74 <HAL_RCC_OscConfig+0x504>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c70:	e014      	b.n	8001c9c <HAL_RCC_OscConfig+0x52c>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	4b9a      	ldr	r3, [pc, #616]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c82:	4a99      	ldr	r2, [pc, #612]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c8c:	4b96      	ldr	r3, [pc, #600]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c92:	4a95      	ldr	r2, [pc, #596]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001c94:	f023 0304 	bic.w	r3, r3, #4
 8001c98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d016      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f858 	bl	8000d58 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cac:	f7ff f854 	bl	8000d58 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e162      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc2:	4b89      	ldr	r3, [pc, #548]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0ed      	beq.n	8001cac <HAL_RCC_OscConfig+0x53c>
 8001cd0:	e015      	b.n	8001cfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd2:	f7ff f841 	bl	8000d58 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7ff f83d 	bl	8000d58 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e14b      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1ed      	bne.n	8001cda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cfe:	7ffb      	ldrb	r3, [r7, #31]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d04:	4b78      	ldr	r3, [pc, #480]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d08:	4a77      	ldr	r2, [pc, #476]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001d0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d03c      	beq.n	8001d96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01c      	beq.n	8001d5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d24:	4b70      	ldr	r3, [pc, #448]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d2a:	4a6f      	ldr	r2, [pc, #444]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f810 	bl	8000d58 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d3c:	f7ff f80c 	bl	8000d58 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e11c      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d4e:	4b66      	ldr	r3, [pc, #408]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ef      	beq.n	8001d3c <HAL_RCC_OscConfig+0x5cc>
 8001d5c:	e01b      	b.n	8001d96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d5e:	4b62      	ldr	r3, [pc, #392]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d64:	4a60      	ldr	r2, [pc, #384]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6e:	f7fe fff3 	bl	8000d58 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d76:	f7fe ffef 	bl	8000d58 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e0ff      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d88:	4b57      	ldr	r3, [pc, #348]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1ef      	bne.n	8001d76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 80f3 	beq.w	8001f86 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	f040 80c9 	bne.w	8001f3c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001daa:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f003 0203 	and.w	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d12c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d123      	bne.n	8001e18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d11b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d113      	bne.n	8001e18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d109      	bne.n	8001e18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	085b      	lsrs	r3, r3, #1
 8001e10:	3b01      	subs	r3, #1
 8001e12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d06b      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d062      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e1e:	4b32      	ldr	r3, [pc, #200]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0ac      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001e34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e3a:	f7fe ff8d 	bl	8000d58 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e42:	f7fe ff89 	bl	8000d58 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e099      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e54:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f0      	bne.n	8001e42 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e60:	4b21      	ldr	r3, [pc, #132]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	4b21      	ldr	r3, [pc, #132]	@ (8001eec <HAL_RCC_OscConfig+0x77c>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e70:	3a01      	subs	r2, #1
 8001e72:	0112      	lsls	r2, r2, #4
 8001e74:	4311      	orrs	r1, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e7a:	0212      	lsls	r2, r2, #8
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e82:	0852      	lsrs	r2, r2, #1
 8001e84:	3a01      	subs	r2, #1
 8001e86:	0552      	lsls	r2, r2, #21
 8001e88:	4311      	orrs	r1, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e8e:	0852      	lsrs	r2, r2, #1
 8001e90:	3a01      	subs	r2, #1
 8001e92:	0652      	lsls	r2, r2, #25
 8001e94:	4311      	orrs	r1, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e9a:	06d2      	lsls	r2, r2, #27
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	4912      	ldr	r1, [pc, #72]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001eaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001eb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ebc:	f7fe ff4c 	bl	8000d58 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7fe ff48 	bl	8000d58 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e058      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed6:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ee2:	e050      	b.n	8001f86 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e04f      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef0:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <HAL_RCC_OscConfig+0x820>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d144      	bne.n	8001f86 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001efc:	4b24      	ldr	r3, [pc, #144]	@ (8001f90 <HAL_RCC_OscConfig+0x820>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a23      	ldr	r2, [pc, #140]	@ (8001f90 <HAL_RCC_OscConfig+0x820>)
 8001f02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f08:	4b21      	ldr	r3, [pc, #132]	@ (8001f90 <HAL_RCC_OscConfig+0x820>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a20      	ldr	r2, [pc, #128]	@ (8001f90 <HAL_RCC_OscConfig+0x820>)
 8001f0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f14:	f7fe ff20 	bl	8000d58 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7fe ff1c 	bl	8000d58 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e02c      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2e:	4b18      	ldr	r3, [pc, #96]	@ (8001f90 <HAL_RCC_OscConfig+0x820>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x7ac>
 8001f3a:	e024      	b.n	8001f86 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d01f      	beq.n	8001f82 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <HAL_RCC_OscConfig+0x820>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a12      	ldr	r2, [pc, #72]	@ (8001f90 <HAL_RCC_OscConfig+0x820>)
 8001f48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4e:	f7fe ff03 	bl	8000d58 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f56:	f7fe feff 	bl	8000d58 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e00f      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <HAL_RCC_OscConfig+0x820>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f0      	bne.n	8001f56 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f74:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_RCC_OscConfig+0x820>)
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	4905      	ldr	r1, [pc, #20]	@ (8001f90 <HAL_RCC_OscConfig+0x820>)
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <HAL_RCC_OscConfig+0x824>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60cb      	str	r3, [r1, #12]
 8001f80:	e001      	b.n	8001f86 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40021000 	.word	0x40021000
 8001f94:	feeefffc 	.word	0xfeeefffc

08001f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0e7      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b75      	ldr	r3, [pc, #468]	@ (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d910      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b72      	ldr	r3, [pc, #456]	@ (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 0207 	bic.w	r2, r3, #7
 8001fc2:	4970      	ldr	r1, [pc, #448]	@ (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b6e      	ldr	r3, [pc, #440]	@ (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0cf      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d010      	beq.n	800200a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	4b66      	ldr	r3, [pc, #408]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d908      	bls.n	800200a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff8:	4b63      	ldr	r3, [pc, #396]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	4960      	ldr	r1, [pc, #384]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d04c      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b03      	cmp	r3, #3
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201e:	4b5a      	ldr	r3, [pc, #360]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d121      	bne.n	800206e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0a6      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002036:	4b54      	ldr	r3, [pc, #336]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d115      	bne.n	800206e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e09a      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800204e:	4b4e      	ldr	r3, [pc, #312]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e08e      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800205e:	4b4a      	ldr	r3, [pc, #296]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e086      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800206e:	4b46      	ldr	r3, [pc, #280]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f023 0203 	bic.w	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4943      	ldr	r1, [pc, #268]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002080:	f7fe fe6a 	bl	8000d58 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	e00a      	b.n	800209e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7fe fe66 	bl	8000d58 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e06e      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	4b3a      	ldr	r3, [pc, #232]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 020c 	and.w	r2, r3, #12
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1eb      	bne.n	8002088 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d010      	beq.n	80020de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	4b31      	ldr	r3, [pc, #196]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d208      	bcs.n	80020de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	492b      	ldr	r1, [pc, #172]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020de:	4b29      	ldr	r3, [pc, #164]	@ (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d210      	bcs.n	800210e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ec:	4b25      	ldr	r3, [pc, #148]	@ (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 0207 	bic.w	r2, r3, #7
 80020f4:	4923      	ldr	r1, [pc, #140]	@ (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fc:	4b21      	ldr	r3, [pc, #132]	@ (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d001      	beq.n	800210e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e036      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800211a:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	4918      	ldr	r1, [pc, #96]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002138:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4910      	ldr	r1, [pc, #64]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800214c:	f000 f824 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b0d      	ldr	r3, [pc, #52]	@ (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	490b      	ldr	r1, [pc, #44]	@ (800218c <HAL_RCC_ClockConfig+0x1f4>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	4a09      	ldr	r2, [pc, #36]	@ (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 800216a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800216c:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <HAL_RCC_ClockConfig+0x1fc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fcb7 	bl	8000ae4 <HAL_InitTick>
 8002176:	4603      	mov	r3, r0
 8002178:	72fb      	strb	r3, [r7, #11]

  return status;
 800217a:	7afb      	ldrb	r3, [r7, #11]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40022000 	.word	0x40022000
 8002188:	40021000 	.word	0x40021000
 800218c:	08008894 	.word	0x08008894
 8002190:	20000000 	.word	0x20000000
 8002194:	20000004 	.word	0x20000004

08002198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	@ 0x24
 800219c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a6:	4b3e      	ldr	r3, [pc, #248]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b0:	4b3b      	ldr	r3, [pc, #236]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x34>
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	d121      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d11e      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021cc:	4b34      	ldr	r3, [pc, #208]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021d8:	4b31      	ldr	r3, [pc, #196]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	e005      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021e8:	4b2d      	ldr	r3, [pc, #180]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021f4:	4a2b      	ldr	r2, [pc, #172]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10d      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d102      	bne.n	8002216 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002210:	4b25      	ldr	r3, [pc, #148]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	e004      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b08      	cmp	r3, #8
 800221a:	d101      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800221c:	4b23      	ldr	r3, [pc, #140]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x114>)
 800221e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d134      	bne.n	8002290 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002226:	4b1e      	ldr	r3, [pc, #120]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d003      	beq.n	800223e <HAL_RCC_GetSysClockFreq+0xa6>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d003      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0xac>
 800223c:	e005      	b.n	800224a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800223e:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002240:	617b      	str	r3, [r7, #20]
      break;
 8002242:	e005      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002244:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002246:	617b      	str	r3, [r7, #20]
      break;
 8002248:	e002      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	617b      	str	r3, [r7, #20]
      break;
 800224e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002250:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	3301      	adds	r3, #1
 800225c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800225e:	4b10      	ldr	r3, [pc, #64]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	fb03 f202 	mul.w	r2, r3, r2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	fbb2 f3f3 	udiv	r3, r2, r3
 8002274:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002276:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	0e5b      	lsrs	r3, r3, #25
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	3301      	adds	r3, #1
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002290:	69bb      	ldr	r3, [r7, #24]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	@ 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	080088ac 	.word	0x080088ac
 80022a8:	00f42400 	.word	0x00f42400
 80022ac:	007a1200 	.word	0x007a1200

080022b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b4:	4b03      	ldr	r3, [pc, #12]	@ (80022c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000000 	.word	0x20000000

080022c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022cc:	f7ff fff0 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 80022d0:	4602      	mov	r2, r0
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	0adb      	lsrs	r3, r3, #11
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	4904      	ldr	r1, [pc, #16]	@ (80022f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022de:	5ccb      	ldrb	r3, [r1, r3]
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	080088a4 	.word	0x080088a4

080022f4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	220f      	movs	r2, #15
 8002302:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002304:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <HAL_RCC_GetClockConfig+0x5c>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0203 	and.w	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002310:	4b0f      	ldr	r3, [pc, #60]	@ (8002350 <HAL_RCC_GetClockConfig+0x5c>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800231c:	4b0c      	ldr	r3, [pc, #48]	@ (8002350 <HAL_RCC_GetClockConfig+0x5c>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002328:	4b09      	ldr	r3, [pc, #36]	@ (8002350 <HAL_RCC_GetClockConfig+0x5c>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	08db      	lsrs	r3, r3, #3
 800232e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002336:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <HAL_RCC_GetClockConfig+0x60>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0207 	and.w	r2, r3, #7
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	601a      	str	r2, [r3, #0]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	40022000 	.word	0x40022000

08002358 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002364:	4b2a      	ldr	r3, [pc, #168]	@ (8002410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002370:	f7ff f99a 	bl	80016a8 <HAL_PWREx_GetVoltageRange>
 8002374:	6178      	str	r0, [r7, #20]
 8002376:	e014      	b.n	80023a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002378:	4b25      	ldr	r3, [pc, #148]	@ (8002410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	4a24      	ldr	r2, [pc, #144]	@ (8002410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800237e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002382:	6593      	str	r3, [r2, #88]	@ 0x58
 8002384:	4b22      	ldr	r3, [pc, #136]	@ (8002410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002390:	f7ff f98a 	bl	80016a8 <HAL_PWREx_GetVoltageRange>
 8002394:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002396:	4b1e      	ldr	r3, [pc, #120]	@ (8002410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239a:	4a1d      	ldr	r2, [pc, #116]	@ (8002410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800239c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023a8:	d10b      	bne.n	80023c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b80      	cmp	r3, #128	@ 0x80
 80023ae:	d919      	bls.n	80023e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80023b4:	d902      	bls.n	80023bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023b6:	2302      	movs	r3, #2
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	e013      	b.n	80023e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023bc:	2301      	movs	r3, #1
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	e010      	b.n	80023e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b80      	cmp	r3, #128	@ 0x80
 80023c6:	d902      	bls.n	80023ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023c8:	2303      	movs	r3, #3
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	e00a      	b.n	80023e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b80      	cmp	r3, #128	@ 0x80
 80023d2:	d102      	bne.n	80023da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023d4:	2302      	movs	r3, #2
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	e004      	b.n	80023e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b70      	cmp	r3, #112	@ 0x70
 80023de:	d101      	bne.n	80023e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023e0:	2301      	movs	r3, #1
 80023e2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 0207 	bic.w	r2, r3, #7
 80023ec:	4909      	ldr	r1, [pc, #36]	@ (8002414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023f4:	4b07      	ldr	r3, [pc, #28]	@ (8002414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d001      	beq.n	8002406 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	40022000 	.word	0x40022000

08002418 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002420:	2300      	movs	r3, #0
 8002422:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002424:	2300      	movs	r3, #0
 8002426:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002430:	2b00      	cmp	r3, #0
 8002432:	d031      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002438:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800243c:	d01a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800243e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002442:	d814      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002444:	2b00      	cmp	r3, #0
 8002446:	d009      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002448:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800244c:	d10f      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800244e:	4b5d      	ldr	r3, [pc, #372]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	4a5c      	ldr	r2, [pc, #368]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002458:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800245a:	e00c      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f9f0 	bl	8002848 <RCCEx_PLLSAI1_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800246c:	e003      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	74fb      	strb	r3, [r7, #19]
      break;
 8002472:	e000      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800247c:	4b51      	ldr	r3, [pc, #324]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248a:	494e      	ldr	r1, [pc, #312]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002492:	e001      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 809e 	beq.w	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024aa:	4b46      	ldr	r3, [pc, #280]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	4b40      	ldr	r3, [pc, #256]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c4:	4a3f      	ldr	r2, [pc, #252]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80024cc:	4b3d      	ldr	r3, [pc, #244]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024dc:	4b3a      	ldr	r3, [pc, #232]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a39      	ldr	r2, [pc, #228]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024e8:	f7fe fc36 	bl	8000d58 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024ee:	e009      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7fe fc32 	bl	8000d58 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d902      	bls.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	74fb      	strb	r3, [r7, #19]
        break;
 8002502:	e005      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002504:	4b30      	ldr	r3, [pc, #192]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ef      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d15a      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002516:	4b2b      	ldr	r3, [pc, #172]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002520:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01e      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	429a      	cmp	r2, r3
 8002530:	d019      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002532:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800253c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800253e:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002544:	4a1f      	ldr	r2, [pc, #124]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002554:	4a1b      	ldr	r2, [pc, #108]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800255a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800255e:	4a19      	ldr	r2, [pc, #100]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d016      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe fbf2 	bl	8000d58 <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002576:	e00b      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002578:	f7fe fbee 	bl	8000d58 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d902      	bls.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	74fb      	strb	r3, [r7, #19]
            break;
 800258e:	e006      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002590:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0ec      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10b      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a4:	4b07      	ldr	r3, [pc, #28]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b2:	4904      	ldr	r1, [pc, #16]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025ba:	e009      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	74bb      	strb	r3, [r7, #18]
 80025c0:	e006      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025cc:	7cfb      	ldrb	r3, [r7, #19]
 80025ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d0:	7c7b      	ldrb	r3, [r7, #17]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d105      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b9b      	ldr	r3, [pc, #620]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025da:	4a9a      	ldr	r2, [pc, #616]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ee:	4b95      	ldr	r3, [pc, #596]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f4:	f023 0203 	bic.w	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4991      	ldr	r1, [pc, #580]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002610:	4b8c      	ldr	r3, [pc, #560]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002616:	f023 020c 	bic.w	r2, r3, #12
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	4989      	ldr	r1, [pc, #548]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002632:	4b84      	ldr	r3, [pc, #528]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002638:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002640:	4980      	ldr	r1, [pc, #512]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00a      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002654:	4b7b      	ldr	r3, [pc, #492]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002662:	4978      	ldr	r1, [pc, #480]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002676:	4b73      	ldr	r3, [pc, #460]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002684:	496f      	ldr	r1, [pc, #444]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002698:	4b6a      	ldr	r3, [pc, #424]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	4967      	ldr	r1, [pc, #412]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ba:	4b62      	ldr	r3, [pc, #392]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c8:	495e      	ldr	r1, [pc, #376]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026dc:	4b59      	ldr	r3, [pc, #356]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ea:	4956      	ldr	r1, [pc, #344]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026fe:	4b51      	ldr	r3, [pc, #324]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002704:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270c:	494d      	ldr	r1, [pc, #308]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d028      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002720:	4b48      	ldr	r3, [pc, #288]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002726:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800272e:	4945      	ldr	r1, [pc, #276]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800273e:	d106      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002740:	4b40      	ldr	r3, [pc, #256]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a3f      	ldr	r2, [pc, #252]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800274a:	60d3      	str	r3, [r2, #12]
 800274c:	e011      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002752:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002756:	d10c      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	2101      	movs	r1, #1
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f872 	bl	8002848 <RCCEx_PLLSAI1_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d028      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800277e:	4b31      	ldr	r3, [pc, #196]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002784:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278c:	492d      	ldr	r1, [pc, #180]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002798:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800279c:	d106      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800279e:	4b29      	ldr	r3, [pc, #164]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4a28      	ldr	r2, [pc, #160]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80027a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027a8:	60d3      	str	r3, [r2, #12]
 80027aa:	e011      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2101      	movs	r1, #1
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f843 	bl	8002848 <RCCEx_PLLSAI1_Config>
 80027c2:	4603      	mov	r3, r0
 80027c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01c      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027dc:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ea:	4916      	ldr	r1, [pc, #88]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027fa:	d10c      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3304      	adds	r3, #4
 8002800:	2102      	movs	r1, #2
 8002802:	4618      	mov	r0, r3
 8002804:	f000 f820 	bl	8002848 <RCCEx_PLLSAI1_Config>
 8002808:	4603      	mov	r3, r0
 800280a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002822:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002828:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002830:	4904      	ldr	r1, [pc, #16]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002838:	7cbb      	ldrb	r3, [r7, #18]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000

08002848 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002856:	4b74      	ldr	r3, [pc, #464]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d018      	beq.n	8002894 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002862:	4b71      	ldr	r3, [pc, #452]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f003 0203 	and.w	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d10d      	bne.n	800288e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
       ||
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800287a:	4b6b      	ldr	r3, [pc, #428]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
       ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d047      	beq.n	800291e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
 8002892:	e044      	b.n	800291e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d018      	beq.n	80028ce <RCCEx_PLLSAI1_Config+0x86>
 800289c:	2b03      	cmp	r3, #3
 800289e:	d825      	bhi.n	80028ec <RCCEx_PLLSAI1_Config+0xa4>
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d002      	beq.n	80028aa <RCCEx_PLLSAI1_Config+0x62>
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d009      	beq.n	80028bc <RCCEx_PLLSAI1_Config+0x74>
 80028a8:	e020      	b.n	80028ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d11d      	bne.n	80028f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ba:	e01a      	b.n	80028f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028bc:	4b5a      	ldr	r3, [pc, #360]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d116      	bne.n	80028f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028cc:	e013      	b.n	80028f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028ce:	4b56      	ldr	r3, [pc, #344]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10f      	bne.n	80028fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028da:	4b53      	ldr	r3, [pc, #332]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028ea:	e006      	b.n	80028fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
      break;
 80028f0:	e004      	b.n	80028fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028f2:	bf00      	nop
 80028f4:	e002      	b.n	80028fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028f6:	bf00      	nop
 80028f8:	e000      	b.n	80028fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10d      	bne.n	800291e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002902:	4b49      	ldr	r3, [pc, #292]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6819      	ldr	r1, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	430b      	orrs	r3, r1
 8002918:	4943      	ldr	r1, [pc, #268]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800291a:	4313      	orrs	r3, r2
 800291c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d17c      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002924:	4b40      	ldr	r3, [pc, #256]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a3f      	ldr	r2, [pc, #252]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800292a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800292e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002930:	f7fe fa12 	bl	8000d58 <HAL_GetTick>
 8002934:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002936:	e009      	b.n	800294c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002938:	f7fe fa0e 	bl	8000d58 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d902      	bls.n	800294c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	73fb      	strb	r3, [r7, #15]
        break;
 800294a:	e005      	b.n	8002958 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800294c:	4b36      	ldr	r3, [pc, #216]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1ef      	bne.n	8002938 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d15f      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d110      	bne.n	8002986 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002964:	4b30      	ldr	r3, [pc, #192]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800296c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6892      	ldr	r2, [r2, #8]
 8002974:	0211      	lsls	r1, r2, #8
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68d2      	ldr	r2, [r2, #12]
 800297a:	06d2      	lsls	r2, r2, #27
 800297c:	430a      	orrs	r2, r1
 800297e:	492a      	ldr	r1, [pc, #168]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002980:	4313      	orrs	r3, r2
 8002982:	610b      	str	r3, [r1, #16]
 8002984:	e027      	b.n	80029d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d112      	bne.n	80029b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800298c:	4b26      	ldr	r3, [pc, #152]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002994:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6892      	ldr	r2, [r2, #8]
 800299c:	0211      	lsls	r1, r2, #8
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6912      	ldr	r2, [r2, #16]
 80029a2:	0852      	lsrs	r2, r2, #1
 80029a4:	3a01      	subs	r2, #1
 80029a6:	0552      	lsls	r2, r2, #21
 80029a8:	430a      	orrs	r2, r1
 80029aa:	491f      	ldr	r1, [pc, #124]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	610b      	str	r3, [r1, #16]
 80029b0:	e011      	b.n	80029d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6892      	ldr	r2, [r2, #8]
 80029c2:	0211      	lsls	r1, r2, #8
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6952      	ldr	r2, [r2, #20]
 80029c8:	0852      	lsrs	r2, r2, #1
 80029ca:	3a01      	subs	r2, #1
 80029cc:	0652      	lsls	r2, r2, #25
 80029ce:	430a      	orrs	r2, r1
 80029d0:	4915      	ldr	r1, [pc, #84]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029d6:	4b14      	ldr	r3, [pc, #80]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a13      	ldr	r2, [pc, #76]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e2:	f7fe f9b9 	bl	8000d58 <HAL_GetTick>
 80029e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029e8:	e009      	b.n	80029fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029ea:	f7fe f9b5 	bl	8000d58 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d902      	bls.n	80029fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	73fb      	strb	r3, [r7, #15]
          break;
 80029fc:	e005      	b.n	8002a0a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0ef      	beq.n	80029ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d106      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a10:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	4903      	ldr	r1, [pc, #12]	@ (8002a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000

08002a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e049      	b.n	8002ad2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f841 	bl	8002ada <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3304      	adds	r3, #4
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f000 f9c4 	bl	8002df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d001      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e03b      	b.n	8002b80 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a19      	ldr	r2, [pc, #100]	@ (8002b8c <HAL_TIM_Base_Start_IT+0x9c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d009      	beq.n	8002b3e <HAL_TIM_Base_Start_IT+0x4e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b32:	d004      	beq.n	8002b3e <HAL_TIM_Base_Start_IT+0x4e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a15      	ldr	r2, [pc, #84]	@ (8002b90 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d115      	bne.n	8002b6a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	4b13      	ldr	r3, [pc, #76]	@ (8002b94 <HAL_TIM_Base_Start_IT+0xa4>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b06      	cmp	r3, #6
 8002b4e:	d015      	beq.n	8002b7c <HAL_TIM_Base_Start_IT+0x8c>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b56:	d011      	beq.n	8002b7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b68:	e008      	b.n	8002b7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e000      	b.n	8002b7e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	40012c00 	.word	0x40012c00
 8002b90:	40014000 	.word	0x40014000
 8002b94:	00010007 	.word	0x00010007

08002b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d020      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01b      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0202 	mvn.w	r2, #2
 8002bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8e9 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8db 	bl	8002da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f8ec 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d020      	beq.n	8002c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01b      	beq.n	8002c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0204 	mvn.w	r2, #4
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f8c3 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f8b5 	bl	8002da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f8c6 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d020      	beq.n	8002c94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01b      	beq.n	8002c94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0208 	mvn.w	r2, #8
 8002c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2204      	movs	r2, #4
 8002c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f89d 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002c80:	e005      	b.n	8002c8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f88f 	bl	8002da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f8a0 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d020      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01b      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0210 	mvn.w	r2, #16
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f877 	bl	8002dba <HAL_TIM_IC_CaptureCallback>
 8002ccc:	e005      	b.n	8002cda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f869 	bl	8002da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f87a 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0201 	mvn.w	r2, #1
 8002cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fd fe36 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00c      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f8dd 	bl	8002eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00c      	beq.n	8002d56 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f8d5 	bl	8002f00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00c      	beq.n	8002d7a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f834 	bl	8002de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00c      	beq.n	8002d9e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d007      	beq.n	8002d9e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f06f 0220 	mvn.w	r2, #32
 8002d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f89d 	bl	8002ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a30      	ldr	r2, [pc, #192]	@ (8002ecc <TIM_Base_SetConfig+0xd4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_Base_SetConfig+0x20>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e16:	d108      	bne.n	8002e2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a27      	ldr	r2, [pc, #156]	@ (8002ecc <TIM_Base_SetConfig+0xd4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00b      	beq.n	8002e4a <TIM_Base_SetConfig+0x52>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e38:	d007      	beq.n	8002e4a <TIM_Base_SetConfig+0x52>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a24      	ldr	r2, [pc, #144]	@ (8002ed0 <TIM_Base_SetConfig+0xd8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d003      	beq.n	8002e4a <TIM_Base_SetConfig+0x52>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a23      	ldr	r2, [pc, #140]	@ (8002ed4 <TIM_Base_SetConfig+0xdc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d108      	bne.n	8002e5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a12      	ldr	r2, [pc, #72]	@ (8002ecc <TIM_Base_SetConfig+0xd4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d007      	beq.n	8002e98 <TIM_Base_SetConfig+0xa0>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a11      	ldr	r2, [pc, #68]	@ (8002ed0 <TIM_Base_SetConfig+0xd8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d003      	beq.n	8002e98 <TIM_Base_SetConfig+0xa0>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a10      	ldr	r2, [pc, #64]	@ (8002ed4 <TIM_Base_SetConfig+0xdc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d103      	bne.n	8002ea0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d105      	bne.n	8002ebe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f023 0201 	bic.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	611a      	str	r2, [r3, #16]
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40014000 	.word	0x40014000
 8002ed4:	40014400 	.word	0x40014400

08002ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b08b      	sub	sp, #44	@ 0x2c
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	e003      	b.n	8002f46 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	2103      	movs	r1, #3
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	401a      	ands	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	61fb      	str	r3, [r7, #28]
  return result;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002f68:	2320      	movs	r3, #32
 8002f6a:	e003      	b.n	8002f74 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	601a      	str	r2, [r3, #0]
}
 8002f82:	bf00      	nop
 8002f84:	372c      	adds	r7, #44	@ 0x2c
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b085      	sub	sp, #20
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	431a      	orrs	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	605a      	str	r2, [r3, #4]
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b08b      	sub	sp, #44	@ 0x2c
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	613b      	str	r3, [r7, #16]
  return result;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002fe4:	2320      	movs	r3, #32
 8002fe6:	e003      	b.n	8002ff0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2103      	movs	r1, #3
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	61fb      	str	r3, [r7, #28]
  return result;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003012:	2320      	movs	r3, #32
 8003014:	e003      	b.n	800301e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	431a      	orrs	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800302c:	bf00      	nop
 800302e:	372c      	adds	r7, #44	@ 0x2c
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003038:	b480      	push	{r7}
 800303a:	b08b      	sub	sp, #44	@ 0x2c
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	613b      	str	r3, [r7, #16]
  return result;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800305e:	2320      	movs	r3, #32
 8003060:	e003      	b.n	800306a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	2103      	movs	r1, #3
 800306e:	fa01 f303 	lsl.w	r3, r1, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	401a      	ands	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	61fb      	str	r3, [r7, #28]
  return result;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800308c:	2320      	movs	r3, #32
 800308e:	e003      	b.n	8003098 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	fa01 f303 	lsl.w	r3, r1, r3
 80030a0:	431a      	orrs	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	60da      	str	r2, [r3, #12]
}
 80030a6:	bf00      	nop
 80030a8:	372c      	adds	r7, #44	@ 0x2c
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b08b      	sub	sp, #44	@ 0x2c
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a1a      	ldr	r2, [r3, #32]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	613b      	str	r3, [r7, #16]
  return result;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80030d8:	2320      	movs	r3, #32
 80030da:	e003      	b.n	80030e4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	210f      	movs	r1, #15
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	401a      	ands	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	61fb      	str	r3, [r7, #28]
  return result;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003106:	2320      	movs	r3, #32
 8003108:	e003      	b.n	8003112 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	431a      	orrs	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003120:	bf00      	nop
 8003122:	372c      	adds	r7, #44	@ 0x2c
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800312c:	b480      	push	{r7}
 800312e:	b08b      	sub	sp, #44	@ 0x2c
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	613b      	str	r3, [r7, #16]
  return result;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	e003      	b.n	8003160 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	210f      	movs	r1, #15
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	401a      	ands	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	fa93 f3a3 	rbit	r3, r3
 8003178:	61fb      	str	r3, [r7, #28]
  return result;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003184:	2320      	movs	r3, #32
 8003186:	e003      	b.n	8003190 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	fa01 f303 	lsl.w	r3, r1, r3
 8003198:	431a      	orrs	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800319e:	bf00      	nop
 80031a0:	372c      	adds	r7, #44	@ 0x2c
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b088      	sub	sp, #32
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	60fb      	str	r3, [r7, #12]
  return result;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <LL_GPIO_Init+0x26>
    return 32U;
 80031cc:	2320      	movs	r3, #32
 80031ce:	e003      	b.n	80031d8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80031da:	e048      	b.n	800326e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	2101      	movs	r1, #1
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	fa01 f303 	lsl.w	r3, r1, r3
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d03a      	beq.n	8003268 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d003      	beq.n	8003202 <LL_GPIO_Init+0x58>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d10e      	bne.n	8003220 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	461a      	mov	r2, r3
 8003208:	69b9      	ldr	r1, [r7, #24]
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fed7 	bl	8002fbe <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	6819      	ldr	r1, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	461a      	mov	r2, r3
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff feb7 	bl	8002f8e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	461a      	mov	r2, r3
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff ff05 	bl	8003038 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d111      	bne.n	800325a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2bff      	cmp	r3, #255	@ 0xff
 800323a:	d807      	bhi.n	800324c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	461a      	mov	r2, r3
 8003242:	69b9      	ldr	r1, [r7, #24]
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff ff34 	bl	80030b2 <LL_GPIO_SetAFPin_0_7>
 800324a:	e006      	b.n	800325a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	461a      	mov	r2, r3
 8003252:	69b9      	ldr	r1, [r7, #24]
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff69 	bl	800312c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	461a      	mov	r2, r3
 8003260:	69b9      	ldr	r1, [r7, #24]
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff fe56 	bl	8002f14 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	3301      	adds	r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1af      	bne.n	80031dc <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800328c:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <LL_RCC_HSI_IsReady+0x24>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003298:	d101      	bne.n	800329e <LL_RCC_HSI_IsReady+0x16>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <LL_RCC_HSI_IsReady+0x18>
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000

080032b0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80032b4:	4b07      	ldr	r3, [pc, #28]	@ (80032d4 <LL_RCC_LSE_IsReady+0x24>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d101      	bne.n	80032c6 <LL_RCC_LSE_IsReady+0x16>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <LL_RCC_LSE_IsReady+0x18>
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000

080032d8 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80032dc:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d101      	bne.n	80032ec <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40021000 	.word	0x40021000

080032fc <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003300:	4b04      	ldr	r3, [pc, #16]	@ (8003314 <LL_RCC_MSI_GetRange+0x18>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000

08003318 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800331c:	4b04      	ldr	r3, [pc, #16]	@ (8003330 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800331e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003322:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8003326:	4618      	mov	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40021000 	.word	0x40021000

08003334 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003338:	4b04      	ldr	r3, [pc, #16]	@ (800334c <LL_RCC_GetSysClkSource+0x18>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 030c 	and.w	r3, r3, #12
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000

08003350 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003354:	4b04      	ldr	r3, [pc, #16]	@ (8003368 <LL_RCC_GetAHBPrescaler+0x18>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000

0800336c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003370:	4b04      	ldr	r3, [pc, #16]	@ (8003384 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000

08003388 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800338c:	4b04      	ldr	r3, [pc, #16]	@ (80033a0 <LL_RCC_GetAPB2Prescaler+0x18>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000

080033a4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80033ac:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <LL_RCC_GetUSARTClockSource+0x24>)
 80033ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	401a      	ands	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	041b      	lsls	r3, r3, #16
 80033ba:	4313      	orrs	r3, r2
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40021000 	.word	0x40021000

080033cc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80033d0:	4b04      	ldr	r3, [pc, #16]	@ (80033e4 <LL_RCC_PLL_GetMainSource+0x18>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0303 	and.w	r3, r3, #3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000

080033e8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80033ec:	4b04      	ldr	r3, [pc, #16]	@ (8003400 <LL_RCC_PLL_GetN+0x18>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	40021000 	.word	0x40021000

08003404 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <LL_RCC_PLL_GetR+0x18>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000

08003420 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003424:	4b04      	ldr	r3, [pc, #16]	@ (8003438 <LL_RCC_PLL_GetDivider+0x18>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000

0800343c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b03      	cmp	r3, #3
 800344c:	d137      	bne.n	80034be <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff ffa8 	bl	80033a4 <LL_RCC_GetUSARTClockSource>
 8003454:	4603      	mov	r3, r0
 8003456:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800345a:	2b03      	cmp	r3, #3
 800345c:	f200 80b3 	bhi.w	80035c6 <LL_RCC_GetUSARTClockFreq+0x18a>
 8003460:	a201      	add	r2, pc, #4	@ (adr r2, 8003468 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	080034a7 	.word	0x080034a7
 800346c:	08003479 	.word	0x08003479
 8003470:	08003481 	.word	0x08003481
 8003474:	08003493 	.word	0x08003493
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003478:	f000 f8c2 	bl	8003600 <RCC_GetSystemClockFreq>
 800347c:	60f8      	str	r0, [r7, #12]
        break;
 800347e:	e0b3      	b.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003480:	f7ff ff02 	bl	8003288 <LL_RCC_HSI_IsReady>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 809f 	beq.w	80035ca <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 800348c:	4b59      	ldr	r3, [pc, #356]	@ (80035f4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800348e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003490:	e09b      	b.n	80035ca <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003492:	f7ff ff0d 	bl	80032b0 <LL_RCC_LSE_IsReady>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8098 	beq.w	80035ce <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800349e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80034a4:	e093      	b.n	80035ce <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80034a6:	f000 f8ab 	bl	8003600 <RCC_GetSystemClockFreq>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 f937 	bl	8003720 <RCC_GetHCLKClockFreq>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 f95d 	bl	8003774 <RCC_GetPCLK2ClockFreq>
 80034ba:	60f8      	str	r0, [r7, #12]
        break;
 80034bc:	e094      	b.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b0c      	cmp	r3, #12
 80034c2:	d146      	bne.n	8003552 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ff6d 	bl	80033a4 <LL_RCC_GetUSARTClockSource>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80034d0:	2b0c      	cmp	r3, #12
 80034d2:	d87e      	bhi.n	80035d2 <LL_RCC_GetUSARTClockFreq+0x196>
 80034d4:	a201      	add	r2, pc, #4	@ (adr r2, 80034dc <LL_RCC_GetUSARTClockFreq+0xa0>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	0800353b 	.word	0x0800353b
 80034e0:	080035d3 	.word	0x080035d3
 80034e4:	080035d3 	.word	0x080035d3
 80034e8:	080035d3 	.word	0x080035d3
 80034ec:	08003511 	.word	0x08003511
 80034f0:	080035d3 	.word	0x080035d3
 80034f4:	080035d3 	.word	0x080035d3
 80034f8:	080035d3 	.word	0x080035d3
 80034fc:	08003519 	.word	0x08003519
 8003500:	080035d3 	.word	0x080035d3
 8003504:	080035d3 	.word	0x080035d3
 8003508:	080035d3 	.word	0x080035d3
 800350c:	08003529 	.word	0x08003529
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003510:	f000 f876 	bl	8003600 <RCC_GetSystemClockFreq>
 8003514:	60f8      	str	r0, [r7, #12]
        break;
 8003516:	e067      	b.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003518:	f7ff feb6 	bl	8003288 <LL_RCC_HSI_IsReady>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d059      	beq.n	80035d6 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8003522:	4b34      	ldr	r3, [pc, #208]	@ (80035f4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8003524:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003526:	e056      	b.n	80035d6 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003528:	f7ff fec2 	bl	80032b0 <LL_RCC_LSE_IsReady>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d053      	beq.n	80035da <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8003532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003536:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003538:	e04f      	b.n	80035da <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800353a:	f000 f861 	bl	8003600 <RCC_GetSystemClockFreq>
 800353e:	4603      	mov	r3, r0
 8003540:	4618      	mov	r0, r3
 8003542:	f000 f8ed 	bl	8003720 <RCC_GetHCLKClockFreq>
 8003546:	4603      	mov	r3, r0
 8003548:	4618      	mov	r0, r3
 800354a:	f000 f8ff 	bl	800374c <RCC_GetPCLK1ClockFreq>
 800354e:	60f8      	str	r0, [r7, #12]
        break;
 8003550:	e04a      	b.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b30      	cmp	r3, #48	@ 0x30
 8003556:	d147      	bne.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ff23 	bl	80033a4 <LL_RCC_GetUSARTClockSource>
 800355e:	4603      	mov	r3, r0
 8003560:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8003564:	d01a      	beq.n	800359c <LL_RCC_GetUSARTClockFreq+0x160>
 8003566:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800356a:	d838      	bhi.n	80035de <LL_RCC_GetUSARTClockFreq+0x1a2>
 800356c:	4a22      	ldr	r2, [pc, #136]	@ (80035f8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00c      	beq.n	800358c <LL_RCC_GetUSARTClockFreq+0x150>
 8003572:	4a21      	ldr	r2, [pc, #132]	@ (80035f8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d832      	bhi.n	80035de <LL_RCC_GetUSARTClockFreq+0x1a2>
 8003578:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800357c:	d017      	beq.n	80035ae <LL_RCC_GetUSARTClockFreq+0x172>
 800357e:	4a1f      	ldr	r2, [pc, #124]	@ (80035fc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d12c      	bne.n	80035de <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8003584:	f000 f83c 	bl	8003600 <RCC_GetSystemClockFreq>
 8003588:	60f8      	str	r0, [r7, #12]
          break;
 800358a:	e02d      	b.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 800358c:	f7ff fe7c 	bl	8003288 <LL_RCC_HSI_IsReady>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d025      	beq.n	80035e2 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 8003596:	4b17      	ldr	r3, [pc, #92]	@ (80035f4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8003598:	60fb      	str	r3, [r7, #12]
          }
          break;
 800359a:	e022      	b.n	80035e2 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800359c:	f7ff fe88 	bl	80032b0 <LL_RCC_LSE_IsReady>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d01f      	beq.n	80035e6 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 80035a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035aa:	60fb      	str	r3, [r7, #12]
          }
          break;
 80035ac:	e01b      	b.n	80035e6 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80035ae:	f000 f827 	bl	8003600 <RCC_GetSystemClockFreq>
 80035b2:	4603      	mov	r3, r0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 f8b3 	bl	8003720 <RCC_GetHCLKClockFreq>
 80035ba:	4603      	mov	r3, r0
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 f8c5 	bl	800374c <RCC_GetPCLK1ClockFreq>
 80035c2:	60f8      	str	r0, [r7, #12]
          break;
 80035c4:	e010      	b.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80035c6:	bf00      	nop
 80035c8:	e00e      	b.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80035ca:	bf00      	nop
 80035cc:	e00c      	b.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80035ce:	bf00      	nop
 80035d0:	e00a      	b.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80035d2:	bf00      	nop
 80035d4:	e008      	b.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80035d6:	bf00      	nop
 80035d8:	e006      	b.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80035da:	bf00      	nop
 80035dc:	e004      	b.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 80035de:	bf00      	nop
 80035e0:	e002      	b.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 80035e2:	bf00      	nop
 80035e4:	e000      	b.n	80035e8 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 80035e6:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80035e8:	68fb      	ldr	r3, [r7, #12]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	00f42400 	.word	0x00f42400
 80035f8:	00300020 	.word	0x00300020
 80035fc:	00300010 	.word	0x00300010

08003600 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003606:	f7ff fe95 	bl	8003334 <LL_RCC_GetSysClkSource>
 800360a:	4603      	mov	r3, r0
 800360c:	2b0c      	cmp	r3, #12
 800360e:	d851      	bhi.n	80036b4 <RCC_GetSystemClockFreq+0xb4>
 8003610:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <RCC_GetSystemClockFreq+0x18>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	0800364d 	.word	0x0800364d
 800361c:	080036b5 	.word	0x080036b5
 8003620:	080036b5 	.word	0x080036b5
 8003624:	080036b5 	.word	0x080036b5
 8003628:	080036a1 	.word	0x080036a1
 800362c:	080036b5 	.word	0x080036b5
 8003630:	080036b5 	.word	0x080036b5
 8003634:	080036b5 	.word	0x080036b5
 8003638:	080036a7 	.word	0x080036a7
 800363c:	080036b5 	.word	0x080036b5
 8003640:	080036b5 	.word	0x080036b5
 8003644:	080036b5 	.word	0x080036b5
 8003648:	080036ad 	.word	0x080036ad
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800364c:	f7ff fe44 	bl	80032d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d111      	bne.n	800367a <RCC_GetSystemClockFreq+0x7a>
 8003656:	f7ff fe3f 	bl	80032d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <RCC_GetSystemClockFreq+0x6a>
 8003660:	f7ff fe4c 	bl	80032fc <LL_RCC_MSI_GetRange>
 8003664:	4603      	mov	r3, r0
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	e003      	b.n	8003672 <RCC_GetSystemClockFreq+0x72>
 800366a:	f7ff fe55 	bl	8003318 <LL_RCC_MSI_GetRangeAfterStandby>
 800366e:	4603      	mov	r3, r0
 8003670:	0a1b      	lsrs	r3, r3, #8
 8003672:	4a28      	ldr	r2, [pc, #160]	@ (8003714 <RCC_GetSystemClockFreq+0x114>)
 8003674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003678:	e010      	b.n	800369c <RCC_GetSystemClockFreq+0x9c>
 800367a:	f7ff fe2d 	bl	80032d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d004      	beq.n	800368e <RCC_GetSystemClockFreq+0x8e>
 8003684:	f7ff fe3a 	bl	80032fc <LL_RCC_MSI_GetRange>
 8003688:	4603      	mov	r3, r0
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	e003      	b.n	8003696 <RCC_GetSystemClockFreq+0x96>
 800368e:	f7ff fe43 	bl	8003318 <LL_RCC_MSI_GetRangeAfterStandby>
 8003692:	4603      	mov	r3, r0
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	4a1f      	ldr	r2, [pc, #124]	@ (8003714 <RCC_GetSystemClockFreq+0x114>)
 8003698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800369e:	e033      	b.n	8003708 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80036a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003718 <RCC_GetSystemClockFreq+0x118>)
 80036a2:	607b      	str	r3, [r7, #4]
      break;
 80036a4:	e030      	b.n	8003708 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80036a6:	4b1d      	ldr	r3, [pc, #116]	@ (800371c <RCC_GetSystemClockFreq+0x11c>)
 80036a8:	607b      	str	r3, [r7, #4]
      break;
 80036aa:	e02d      	b.n	8003708 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80036ac:	f000 f876 	bl	800379c <RCC_PLL_GetFreqDomain_SYS>
 80036b0:	6078      	str	r0, [r7, #4]
      break;
 80036b2:	e029      	b.n	8003708 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80036b4:	f7ff fe10 	bl	80032d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d111      	bne.n	80036e2 <RCC_GetSystemClockFreq+0xe2>
 80036be:	f7ff fe0b 	bl	80032d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <RCC_GetSystemClockFreq+0xd2>
 80036c8:	f7ff fe18 	bl	80032fc <LL_RCC_MSI_GetRange>
 80036cc:	4603      	mov	r3, r0
 80036ce:	0a1b      	lsrs	r3, r3, #8
 80036d0:	e003      	b.n	80036da <RCC_GetSystemClockFreq+0xda>
 80036d2:	f7ff fe21 	bl	8003318 <LL_RCC_MSI_GetRangeAfterStandby>
 80036d6:	4603      	mov	r3, r0
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	4a0e      	ldr	r2, [pc, #56]	@ (8003714 <RCC_GetSystemClockFreq+0x114>)
 80036dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e0:	e010      	b.n	8003704 <RCC_GetSystemClockFreq+0x104>
 80036e2:	f7ff fdf9 	bl	80032d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d004      	beq.n	80036f6 <RCC_GetSystemClockFreq+0xf6>
 80036ec:	f7ff fe06 	bl	80032fc <LL_RCC_MSI_GetRange>
 80036f0:	4603      	mov	r3, r0
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	e003      	b.n	80036fe <RCC_GetSystemClockFreq+0xfe>
 80036f6:	f7ff fe0f 	bl	8003318 <LL_RCC_MSI_GetRangeAfterStandby>
 80036fa:	4603      	mov	r3, r0
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	4a05      	ldr	r2, [pc, #20]	@ (8003714 <RCC_GetSystemClockFreq+0x114>)
 8003700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003704:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003706:	bf00      	nop
  }

  return frequency;
 8003708:	687b      	ldr	r3, [r7, #4]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	080088ac 	.word	0x080088ac
 8003718:	00f42400 	.word	0x00f42400
 800371c:	007a1200 	.word	0x007a1200

08003720 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003728:	f7ff fe12 	bl	8003350 <LL_RCC_GetAHBPrescaler>
 800372c:	4603      	mov	r3, r0
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	4a04      	ldr	r2, [pc, #16]	@ (8003748 <RCC_GetHCLKClockFreq+0x28>)
 8003736:	5cd3      	ldrb	r3, [r2, r3]
 8003738:	461a      	mov	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	40d3      	lsrs	r3, r2
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	08008894 	.word	0x08008894

0800374c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003754:	f7ff fe0a 	bl	800336c <LL_RCC_GetAPB1Prescaler>
 8003758:	4603      	mov	r3, r0
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	4a04      	ldr	r2, [pc, #16]	@ (8003770 <RCC_GetPCLK1ClockFreq+0x24>)
 800375e:	5cd3      	ldrb	r3, [r2, r3]
 8003760:	461a      	mov	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	40d3      	lsrs	r3, r2
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	080088a4 	.word	0x080088a4

08003774 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800377c:	f7ff fe04 	bl	8003388 <LL_RCC_GetAPB2Prescaler>
 8003780:	4603      	mov	r3, r0
 8003782:	0adb      	lsrs	r3, r3, #11
 8003784:	4a04      	ldr	r2, [pc, #16]	@ (8003798 <RCC_GetPCLK2ClockFreq+0x24>)
 8003786:	5cd3      	ldrb	r3, [r2, r3]
 8003788:	461a      	mov	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	40d3      	lsrs	r3, r2
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	080088a4 	.word	0x080088a4

0800379c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80037a2:	f7ff fe13 	bl	80033cc <LL_RCC_PLL_GetMainSource>
 80037a6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d036      	beq.n	800381c <RCC_PLL_GetFreqDomain_SYS+0x80>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d836      	bhi.n	8003822 <RCC_PLL_GetFreqDomain_SYS+0x86>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d003      	beq.n	80037c2 <RCC_PLL_GetFreqDomain_SYS+0x26>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d02a      	beq.n	8003816 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80037c0:	e02f      	b.n	8003822 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80037c2:	f7ff fd89 	bl	80032d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d111      	bne.n	80037f0 <RCC_PLL_GetFreqDomain_SYS+0x54>
 80037cc:	f7ff fd84 	bl	80032d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <RCC_PLL_GetFreqDomain_SYS+0x44>
 80037d6:	f7ff fd91 	bl	80032fc <LL_RCC_MSI_GetRange>
 80037da:	4603      	mov	r3, r0
 80037dc:	0a1b      	lsrs	r3, r3, #8
 80037de:	e003      	b.n	80037e8 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80037e0:	f7ff fd9a 	bl	8003318 <LL_RCC_MSI_GetRangeAfterStandby>
 80037e4:	4603      	mov	r3, r0
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	4a2f      	ldr	r2, [pc, #188]	@ (80038a8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80037ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ee:	e010      	b.n	8003812 <RCC_PLL_GetFreqDomain_SYS+0x76>
 80037f0:	f7ff fd72 	bl	80032d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d004      	beq.n	8003804 <RCC_PLL_GetFreqDomain_SYS+0x68>
 80037fa:	f7ff fd7f 	bl	80032fc <LL_RCC_MSI_GetRange>
 80037fe:	4603      	mov	r3, r0
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	e003      	b.n	800380c <RCC_PLL_GetFreqDomain_SYS+0x70>
 8003804:	f7ff fd88 	bl	8003318 <LL_RCC_MSI_GetRangeAfterStandby>
 8003808:	4603      	mov	r3, r0
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	4a26      	ldr	r2, [pc, #152]	@ (80038a8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800380e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003812:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003814:	e02f      	b.n	8003876 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003816:	4b25      	ldr	r3, [pc, #148]	@ (80038ac <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8003818:	607b      	str	r3, [r7, #4]
      break;
 800381a:	e02c      	b.n	8003876 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800381c:	4b24      	ldr	r3, [pc, #144]	@ (80038b0 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800381e:	607b      	str	r3, [r7, #4]
      break;
 8003820:	e029      	b.n	8003876 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003822:	f7ff fd59 	bl	80032d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d111      	bne.n	8003850 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 800382c:	f7ff fd54 	bl	80032d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8003836:	f7ff fd61 	bl	80032fc <LL_RCC_MSI_GetRange>
 800383a:	4603      	mov	r3, r0
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	e003      	b.n	8003848 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8003840:	f7ff fd6a 	bl	8003318 <LL_RCC_MSI_GetRangeAfterStandby>
 8003844:	4603      	mov	r3, r0
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	4a17      	ldr	r2, [pc, #92]	@ (80038a8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800384a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384e:	e010      	b.n	8003872 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8003850:	f7ff fd42 	bl	80032d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800385a:	f7ff fd4f 	bl	80032fc <LL_RCC_MSI_GetRange>
 800385e:	4603      	mov	r3, r0
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	e003      	b.n	800386c <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8003864:	f7ff fd58 	bl	8003318 <LL_RCC_MSI_GetRangeAfterStandby>
 8003868:	4603      	mov	r3, r0
 800386a:	091b      	lsrs	r3, r3, #4
 800386c:	4a0e      	ldr	r2, [pc, #56]	@ (80038a8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800386e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003872:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003874:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003876:	f7ff fdd3 	bl	8003420 <LL_RCC_PLL_GetDivider>
 800387a:	4603      	mov	r3, r0
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	3301      	adds	r3, #1
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	fbb2 f4f3 	udiv	r4, r2, r3
 8003886:	f7ff fdaf 	bl	80033e8 <LL_RCC_PLL_GetN>
 800388a:	4603      	mov	r3, r0
 800388c:	fb03 f404 	mul.w	r4, r3, r4
 8003890:	f7ff fdb8 	bl	8003404 <LL_RCC_PLL_GetR>
 8003894:	4603      	mov	r3, r0
 8003896:	0e5b      	lsrs	r3, r3, #25
 8003898:	3301      	adds	r3, #1
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd90      	pop	{r4, r7, pc}
 80038a8:	080088ac 	.word	0x080088ac
 80038ac:	00f42400 	.word	0x00f42400
 80038b0:	007a1200 	.word	0x007a1200

080038b4 <LL_USART_IsEnabled>:
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <LL_USART_IsEnabled+0x18>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <LL_USART_IsEnabled+0x1a>
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <LL_USART_SetStopBitsLength>:
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	605a      	str	r2, [r3, #4]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_USART_SetHWFlowCtrl>:
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	609a      	str	r2, [r3, #8]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <LL_USART_SetBaudRate>:
{
 8003926:	b480      	push	{r7}
 8003928:	b087      	sub	sp, #28
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800393a:	d11a      	bne.n	8003972 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	005a      	lsls	r2, r3, #1
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	085b      	lsrs	r3, r3, #1
 8003944:	441a      	add	r2, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	b29b      	uxth	r3, r3
 800394e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8003956:	4013      	ands	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	085b      	lsrs	r3, r3, #1
 800395e:	b29b      	uxth	r3, r3
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	60da      	str	r2, [r3, #12]
}
 8003970:	e00a      	b.n	8003988 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	085a      	lsrs	r2, r3, #1
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	441a      	add	r2, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	b29b      	uxth	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	60da      	str	r2, [r3, #12]
}
 8003988:	bf00      	nop
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff ff84 	bl	80038b4 <LL_USART_IsEnabled>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d148      	bne.n	8003a44 <LL_USART_Init+0xb0>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4b26      	ldr	r3, [pc, #152]	@ (8003a50 <LL_USART_Init+0xbc>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	6851      	ldr	r1, [r2, #4]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	68d2      	ldr	r2, [r2, #12]
 80039c2:	4311      	orrs	r1, r2
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	6912      	ldr	r2, [r2, #16]
 80039c8:	4311      	orrs	r1, r2
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	6992      	ldr	r2, [r2, #24]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff7c 	bl	80038da <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ff89 	bl	8003900 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a18      	ldr	r2, [pc, #96]	@ (8003a54 <LL_USART_Init+0xc0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d104      	bne.n	8003a00 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80039f6:	2003      	movs	r0, #3
 80039f8:	f7ff fd20 	bl	800343c <LL_RCC_GetUSARTClockFreq>
 80039fc:	60b8      	str	r0, [r7, #8]
 80039fe:	e010      	b.n	8003a22 <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a15      	ldr	r2, [pc, #84]	@ (8003a58 <LL_USART_Init+0xc4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d104      	bne.n	8003a12 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8003a08:	200c      	movs	r0, #12
 8003a0a:	f7ff fd17 	bl	800343c <LL_RCC_GetUSARTClockFreq>
 8003a0e:	60b8      	str	r0, [r7, #8]
 8003a10:	e007      	b.n	8003a22 <LL_USART_Init+0x8e>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a11      	ldr	r2, [pc, #68]	@ (8003a5c <LL_USART_Init+0xc8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d103      	bne.n	8003a22 <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8003a1a:	2030      	movs	r0, #48	@ 0x30
 8003a1c:	f7ff fd0e 	bl	800343c <LL_RCC_GetUSARTClockFreq>
 8003a20:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <LL_USART_Init+0xb0>
        && (USART_InitStruct->BaudRate != 0U))
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d009      	beq.n	8003a44 <LL_USART_Init+0xb0>
    {
      status = SUCCESS;
 8003a30:	2300      	movs	r3, #0
 8003a32:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff ff71 	bl	8003926 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	efff69f3 	.word	0xefff69f3
 8003a54:	40013800 	.word	0x40013800
 8003a58:	40004400 	.word	0x40004400
 8003a5c:	40004800 	.word	0x40004800

08003a60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a64:	f001 f98c 	bl	8004d80 <vTaskStartScheduler>
  
  return osOK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <osDelay+0x16>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	e000      	b.n	8003a86 <osDelay+0x18>
 8003a84:	2301      	movs	r3, #1
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 f944 	bl	8004d14 <vTaskDelay>
  
  return osOK;
 8003a8c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f103 0208 	add.w	r2, r3, #8
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003aae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f103 0208 	add.w	r2, r3, #8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f103 0208 	add.w	r2, r3, #8
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	601a      	str	r2, [r3, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b4e:	d103      	bne.n	8003b58 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	e00c      	b.n	8003b72 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e002      	b.n	8003b66 <vListInsert+0x2e>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d2f6      	bcs.n	8003b60 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	601a      	str	r2, [r3, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6892      	ldr	r2, [r2, #8]
 8003bc0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6852      	ldr	r2, [r2, #4]
 8003bca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d103      	bne.n	8003bde <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	1e5a      	subs	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10b      	bne.n	8003c2c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	e7fd      	b.n	8003c28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c2c:	f002 fb9c 	bl	8006368 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c38:	68f9      	ldr	r1, [r7, #12]
 8003c3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	441a      	add	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c62:	fb01 f303 	mul.w	r3, r1, r3
 8003c66:	441a      	add	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	22ff      	movs	r2, #255	@ 0xff
 8003c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	22ff      	movs	r2, #255	@ 0xff
 8003c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d114      	bne.n	8003cac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d01a      	beq.n	8003cc0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3310      	adds	r3, #16
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 fb12 	bl	80052b8 <xTaskRemoveFromEventList>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d012      	beq.n	8003cc0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <xQueueGenericReset+0xd0>)
 8003c9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	e009      	b.n	8003cc0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3310      	adds	r3, #16
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fef0 	bl	8003a96 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3324      	adds	r3, #36	@ 0x24
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff feeb 	bl	8003a96 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cc0:	f002 fb84 	bl	80063cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cc4:	2301      	movs	r3, #1
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08e      	sub	sp, #56	@ 0x38
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	e7fd      	b.n	8003cfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10b      	bne.n	8003d1e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0a:	f383 8811 	msr	BASEPRI, r3
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d18:	bf00      	nop
 8003d1a:	bf00      	nop
 8003d1c:	e7fd      	b.n	8003d1a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <xQueueGenericCreateStatic+0x56>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <xQueueGenericCreateStatic+0x5a>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <xQueueGenericCreateStatic+0x5c>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10b      	bne.n	8003d4c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	623b      	str	r3, [r7, #32]
}
 8003d46:	bf00      	nop
 8003d48:	bf00      	nop
 8003d4a:	e7fd      	b.n	8003d48 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <xQueueGenericCreateStatic+0x84>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <xQueueGenericCreateStatic+0x88>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <xQueueGenericCreateStatic+0x8a>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10b      	bne.n	8003d7a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	61fb      	str	r3, [r7, #28]
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
 8003d78:	e7fd      	b.n	8003d76 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d7a:	2348      	movs	r3, #72	@ 0x48
 8003d7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b48      	cmp	r3, #72	@ 0x48
 8003d82:	d00b      	beq.n	8003d9c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	61bb      	str	r3, [r7, #24]
}
 8003d96:	bf00      	nop
 8003d98:	bf00      	nop
 8003d9a:	e7fd      	b.n	8003d98 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003db0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f840 	bl	8003e44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3730      	adds	r7, #48	@ 0x30
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b08a      	sub	sp, #40	@ 0x28
 8003dd2:	af02      	add	r7, sp, #8
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10b      	bne.n	8003dfa <xQueueGenericCreate+0x2c>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	613b      	str	r3, [r7, #16]
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	e7fd      	b.n	8003df6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	3348      	adds	r3, #72	@ 0x48
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f002 fbcf 	bl	80065ac <pvPortMalloc>
 8003e0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d011      	beq.n	8003e3a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	3348      	adds	r3, #72	@ 0x48
 8003e1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e28:	79fa      	ldrb	r2, [r7, #7]
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f805 	bl	8003e44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
	}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d103      	bne.n	8003e60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	e002      	b.n	8003e66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e72:	2101      	movs	r1, #1
 8003e74:	69b8      	ldr	r0, [r7, #24]
 8003e76:	f7ff fec3 	bl	8003c00 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00e      	beq.n	8003eae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f81d 	bl	8003ee8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b086      	sub	sp, #24
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6939      	ldr	r1, [r7, #16]
 8003ece:	6978      	ldr	r0, [r7, #20]
 8003ed0:	f7ff ff7d 	bl	8003dce <xQueueGenericCreate>
 8003ed4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff ffd3 	bl	8003e82 <prvInitialiseMutex>

		return xNewQueue;
 8003edc:	68fb      	ldr	r3, [r7, #12]
	}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08e      	sub	sp, #56	@ 0x38
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10b      	bne.n	8003f1c <xQueueGenericSend+0x34>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f16:	bf00      	nop
 8003f18:	bf00      	nop
 8003f1a:	e7fd      	b.n	8003f18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d103      	bne.n	8003f2a <xQueueGenericSend+0x42>
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <xQueueGenericSend+0x46>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <xQueueGenericSend+0x48>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10b      	bne.n	8003f4c <xQueueGenericSend+0x64>
	__asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f46:	bf00      	nop
 8003f48:	bf00      	nop
 8003f4a:	e7fd      	b.n	8003f48 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d103      	bne.n	8003f5a <xQueueGenericSend+0x72>
 8003f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <xQueueGenericSend+0x76>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <xQueueGenericSend+0x78>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <xQueueGenericSend+0x94>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	623b      	str	r3, [r7, #32]
}
 8003f76:	bf00      	nop
 8003f78:	bf00      	nop
 8003f7a:	e7fd      	b.n	8003f78 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f7c:	f001 fb62 	bl	8005644 <xTaskGetSchedulerState>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d102      	bne.n	8003f8c <xQueueGenericSend+0xa4>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <xQueueGenericSend+0xa8>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <xQueueGenericSend+0xaa>
 8003f90:	2300      	movs	r3, #0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10b      	bne.n	8003fae <xQueueGenericSend+0xc6>
	__asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	61fb      	str	r3, [r7, #28]
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	e7fd      	b.n	8003faa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fae:	f002 f9db 	bl	8006368 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d302      	bcc.n	8003fc4 <xQueueGenericSend+0xdc>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d129      	bne.n	8004018 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fca:	f000 fb5b 	bl	8004684 <prvCopyDataToQueue>
 8003fce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d010      	beq.n	8003ffa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fda:	3324      	adds	r3, #36	@ 0x24
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f001 f96b 	bl	80052b8 <xTaskRemoveFromEventList>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d013      	beq.n	8004010 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fe8:	4b3f      	ldr	r3, [pc, #252]	@ (80040e8 <xQueueGenericSend+0x200>)
 8003fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	e00a      	b.n	8004010 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004000:	4b39      	ldr	r3, [pc, #228]	@ (80040e8 <xQueueGenericSend+0x200>)
 8004002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004010:	f002 f9dc 	bl	80063cc <vPortExitCritical>
				return pdPASS;
 8004014:	2301      	movs	r3, #1
 8004016:	e063      	b.n	80040e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d103      	bne.n	8004026 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800401e:	f002 f9d5 	bl	80063cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004022:	2300      	movs	r3, #0
 8004024:	e05c      	b.n	80040e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	4618      	mov	r0, r3
 8004032:	f001 f9a5 	bl	8005380 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004036:	2301      	movs	r3, #1
 8004038:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800403a:	f002 f9c7 	bl	80063cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800403e:	f000 ff0f 	bl	8004e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004042:	f002 f991 	bl	8006368 <vPortEnterCritical>
 8004046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004048:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800404c:	b25b      	sxtb	r3, r3
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004052:	d103      	bne.n	800405c <xQueueGenericSend+0x174>
 8004054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004062:	b25b      	sxtb	r3, r3
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004068:	d103      	bne.n	8004072 <xQueueGenericSend+0x18a>
 800406a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004072:	f002 f9ab 	bl	80063cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004076:	1d3a      	adds	r2, r7, #4
 8004078:	f107 0314 	add.w	r3, r7, #20
 800407c:	4611      	mov	r1, r2
 800407e:	4618      	mov	r0, r3
 8004080:	f001 f994 	bl	80053ac <xTaskCheckForTimeOut>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d124      	bne.n	80040d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800408a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800408c:	f000 fbf2 	bl	8004874 <prvIsQueueFull>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d018      	beq.n	80040c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004098:	3310      	adds	r3, #16
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	4611      	mov	r1, r2
 800409e:	4618      	mov	r0, r3
 80040a0:	f001 f8b8 	bl	8005214 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040a6:	f000 fb7d 	bl	80047a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040aa:	f000 fee7 	bl	8004e7c <xTaskResumeAll>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f47f af7c 	bne.w	8003fae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80040b6:	4b0c      	ldr	r3, [pc, #48]	@ (80040e8 <xQueueGenericSend+0x200>)
 80040b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	e772      	b.n	8003fae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040ca:	f000 fb6b 	bl	80047a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040ce:	f000 fed5 	bl	8004e7c <xTaskResumeAll>
 80040d2:	e76c      	b.n	8003fae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040d6:	f000 fb65 	bl	80047a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040da:	f000 fecf 	bl	8004e7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3738      	adds	r7, #56	@ 0x38
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	e000ed04 	.word	0xe000ed04

080040ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b090      	sub	sp, #64	@ 0x40
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80040fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10b      	bne.n	800411c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d103      	bne.n	800412a <xQueueGenericSendFromISR+0x3e>
 8004122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <xQueueGenericSendFromISR+0x42>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <xQueueGenericSendFromISR+0x44>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004146:	bf00      	nop
 8004148:	bf00      	nop
 800414a:	e7fd      	b.n	8004148 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d103      	bne.n	800415a <xQueueGenericSendFromISR+0x6e>
 8004152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <xQueueGenericSendFromISR+0x72>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <xQueueGenericSendFromISR+0x74>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10b      	bne.n	800417c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	623b      	str	r3, [r7, #32]
}
 8004176:	bf00      	nop
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800417c:	f002 f9d4 	bl	8006528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004180:	f3ef 8211 	mrs	r2, BASEPRI
 8004184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	61fa      	str	r2, [r7, #28]
 8004196:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004198:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800419a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800419c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d302      	bcc.n	80041ae <xQueueGenericSendFromISR+0xc2>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d12f      	bne.n	800420e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80041c4:	f000 fa5e 	bl	8004684 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041d0:	d112      	bne.n	80041f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041dc:	3324      	adds	r3, #36	@ 0x24
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 f86a 	bl	80052b8 <xTaskRemoveFromEventList>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00e      	beq.n	8004208 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00b      	beq.n	8004208 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	e007      	b.n	8004208 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80041fc:	3301      	adds	r3, #1
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	b25a      	sxtb	r2, r3
 8004202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004208:	2301      	movs	r3, #1
 800420a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800420c:	e001      	b.n	8004212 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800420e:	2300      	movs	r3, #0
 8004210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004214:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800421c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800421e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004220:	4618      	mov	r0, r3
 8004222:	3740      	adds	r7, #64	@ 0x40
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08c      	sub	sp, #48	@ 0x30
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004234:	2300      	movs	r3, #0
 8004236:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800423c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10b      	bne.n	800425a <xQueueReceive+0x32>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	623b      	str	r3, [r7, #32]
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	e7fd      	b.n	8004256 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d103      	bne.n	8004268 <xQueueReceive+0x40>
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <xQueueReceive+0x44>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <xQueueReceive+0x46>
 800426c:	2300      	movs	r3, #0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <xQueueReceive+0x62>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	61fb      	str	r3, [r7, #28]
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	e7fd      	b.n	8004286 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800428a:	f001 f9db 	bl	8005644 <xTaskGetSchedulerState>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d102      	bne.n	800429a <xQueueReceive+0x72>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <xQueueReceive+0x76>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <xQueueReceive+0x78>
 800429e:	2300      	movs	r3, #0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <xQueueReceive+0x94>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	61bb      	str	r3, [r7, #24]
}
 80042b6:	bf00      	nop
 80042b8:	bf00      	nop
 80042ba:	e7fd      	b.n	80042b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042bc:	f002 f854 	bl	8006368 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01f      	beq.n	800430c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042d0:	f000 fa42 	bl	8004758 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d6:	1e5a      	subs	r2, r3, #1
 80042d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00f      	beq.n	8004304 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e6:	3310      	adds	r3, #16
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 ffe5 	bl	80052b8 <xTaskRemoveFromEventList>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042f4:	4b3c      	ldr	r3, [pc, #240]	@ (80043e8 <xQueueReceive+0x1c0>)
 80042f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004304:	f002 f862 	bl	80063cc <vPortExitCritical>
				return pdPASS;
 8004308:	2301      	movs	r3, #1
 800430a:	e069      	b.n	80043e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004312:	f002 f85b 	bl	80063cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004316:	2300      	movs	r3, #0
 8004318:	e062      	b.n	80043e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800431a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004320:	f107 0310 	add.w	r3, r7, #16
 8004324:	4618      	mov	r0, r3
 8004326:	f001 f82b 	bl	8005380 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800432a:	2301      	movs	r3, #1
 800432c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800432e:	f002 f84d 	bl	80063cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004332:	f000 fd95 	bl	8004e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004336:	f002 f817 	bl	8006368 <vPortEnterCritical>
 800433a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004340:	b25b      	sxtb	r3, r3
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004346:	d103      	bne.n	8004350 <xQueueReceive+0x128>
 8004348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004352:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004356:	b25b      	sxtb	r3, r3
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800435c:	d103      	bne.n	8004366 <xQueueReceive+0x13e>
 800435e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004366:	f002 f831 	bl	80063cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800436a:	1d3a      	adds	r2, r7, #4
 800436c:	f107 0310 	add.w	r3, r7, #16
 8004370:	4611      	mov	r1, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f001 f81a 	bl	80053ac <xTaskCheckForTimeOut>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d123      	bne.n	80043c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800437e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004380:	f000 fa62 	bl	8004848 <prvIsQueueEmpty>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d017      	beq.n	80043ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800438a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438c:	3324      	adds	r3, #36	@ 0x24
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4611      	mov	r1, r2
 8004392:	4618      	mov	r0, r3
 8004394:	f000 ff3e 	bl	8005214 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004398:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800439a:	f000 fa03 	bl	80047a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800439e:	f000 fd6d 	bl	8004e7c <xTaskResumeAll>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d189      	bne.n	80042bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80043a8:	4b0f      	ldr	r3, [pc, #60]	@ (80043e8 <xQueueReceive+0x1c0>)
 80043aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	e780      	b.n	80042bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043bc:	f000 f9f2 	bl	80047a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043c0:	f000 fd5c 	bl	8004e7c <xTaskResumeAll>
 80043c4:	e77a      	b.n	80042bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043c8:	f000 f9ec 	bl	80047a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043cc:	f000 fd56 	bl	8004e7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043d2:	f000 fa39 	bl	8004848 <prvIsQueueEmpty>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f43f af6f 	beq.w	80042bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3730      	adds	r7, #48	@ 0x30
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08e      	sub	sp, #56	@ 0x38
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80043fe:	2300      	movs	r3, #0
 8004400:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	623b      	str	r3, [r7, #32]
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	e7fd      	b.n	800441c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00b      	beq.n	8004440 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	61fb      	str	r3, [r7, #28]
}
 800443a:	bf00      	nop
 800443c:	bf00      	nop
 800443e:	e7fd      	b.n	800443c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004440:	f001 f900 	bl	8005644 <xTaskGetSchedulerState>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d102      	bne.n	8004450 <xQueueSemaphoreTake+0x64>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <xQueueSemaphoreTake+0x68>
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <xQueueSemaphoreTake+0x6a>
 8004454:	2300      	movs	r3, #0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10b      	bne.n	8004472 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	61bb      	str	r3, [r7, #24]
}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	e7fd      	b.n	800446e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004472:	f001 ff79 	bl	8006368 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800447c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447e:	2b00      	cmp	r3, #0
 8004480:	d024      	beq.n	80044cc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004484:	1e5a      	subs	r2, r3, #1
 8004486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004488:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800448a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004492:	f001 fa83 	bl	800599c <pvTaskIncrementMutexHeldCount>
 8004496:	4602      	mov	r2, r0
 8004498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800449c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00f      	beq.n	80044c4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a6:	3310      	adds	r3, #16
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 ff05 	bl	80052b8 <xTaskRemoveFromEventList>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80044b4:	4b54      	ldr	r3, [pc, #336]	@ (8004608 <xQueueSemaphoreTake+0x21c>)
 80044b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80044c4:	f001 ff82 	bl	80063cc <vPortExitCritical>
				return pdPASS;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e098      	b.n	80045fe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d112      	bne.n	80044f8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80044d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00b      	beq.n	80044f0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	617b      	str	r3, [r7, #20]
}
 80044ea:	bf00      	nop
 80044ec:	bf00      	nop
 80044ee:	e7fd      	b.n	80044ec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80044f0:	f001 ff6c 	bl	80063cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e082      	b.n	80045fe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044fe:	f107 030c 	add.w	r3, r7, #12
 8004502:	4618      	mov	r0, r3
 8004504:	f000 ff3c 	bl	8005380 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004508:	2301      	movs	r3, #1
 800450a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800450c:	f001 ff5e 	bl	80063cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004510:	f000 fca6 	bl	8004e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004514:	f001 ff28 	bl	8006368 <vPortEnterCritical>
 8004518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800451e:	b25b      	sxtb	r3, r3
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004524:	d103      	bne.n	800452e <xQueueSemaphoreTake+0x142>
 8004526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800452e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004530:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004534:	b25b      	sxtb	r3, r3
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800453a:	d103      	bne.n	8004544 <xQueueSemaphoreTake+0x158>
 800453c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004544:	f001 ff42 	bl	80063cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004548:	463a      	mov	r2, r7
 800454a:	f107 030c 	add.w	r3, r7, #12
 800454e:	4611      	mov	r1, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f000 ff2b 	bl	80053ac <xTaskCheckForTimeOut>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d132      	bne.n	80045c2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800455c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800455e:	f000 f973 	bl	8004848 <prvIsQueueEmpty>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d026      	beq.n	80045b6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004570:	f001 fefa 	bl	8006368 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4618      	mov	r0, r3
 800457a:	f001 f881 	bl	8005680 <xTaskPriorityInherit>
 800457e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004580:	f001 ff24 	bl	80063cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004586:	3324      	adds	r3, #36	@ 0x24
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	4611      	mov	r1, r2
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fe41 	bl	8005214 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004592:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004594:	f000 f906 	bl	80047a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004598:	f000 fc70 	bl	8004e7c <xTaskResumeAll>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f47f af67 	bne.w	8004472 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80045a4:	4b18      	ldr	r3, [pc, #96]	@ (8004608 <xQueueSemaphoreTake+0x21c>)
 80045a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	e75d      	b.n	8004472 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80045b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045b8:	f000 f8f4 	bl	80047a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045bc:	f000 fc5e 	bl	8004e7c <xTaskResumeAll>
 80045c0:	e757      	b.n	8004472 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80045c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045c4:	f000 f8ee 	bl	80047a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045c8:	f000 fc58 	bl	8004e7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045ce:	f000 f93b 	bl	8004848 <prvIsQueueEmpty>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f43f af4c 	beq.w	8004472 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80045da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80045e0:	f001 fec2 	bl	8006368 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80045e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045e6:	f000 f835 	bl	8004654 <prvGetDisinheritPriorityAfterTimeout>
 80045ea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80045ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 f942 	bl	800587c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80045f8:	f001 fee8 	bl	80063cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3738      	adds	r7, #56	@ 0x38
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	e000ed04 	.word	0xe000ed04

0800460c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10b      	bne.n	8004636 <vQueueDelete+0x2a>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	60bb      	str	r3, [r7, #8]
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	e7fd      	b.n	8004632 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f95e 	bl	80048f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004642:	2b00      	cmp	r3, #0
 8004644:	d102      	bne.n	800464c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f002 f87e 	bl	8006748 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	2b00      	cmp	r3, #0
 8004662:	d006      	beq.n	8004672 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f1c3 0307 	rsb	r3, r3, #7
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e001      	b.n	8004676 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004676:	68fb      	ldr	r3, [r7, #12]
	}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004698:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10d      	bne.n	80046be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d14d      	bne.n	8004746 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f001 f85c 	bl	800576c <xTaskPriorityDisinherit>
 80046b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	609a      	str	r2, [r3, #8]
 80046bc:	e043      	b.n	8004746 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d119      	bne.n	80046f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6858      	ldr	r0, [r3, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	461a      	mov	r2, r3
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	f003 f9e8 	bl	8007aa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046dc:	441a      	add	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d32b      	bcc.n	8004746 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	e026      	b.n	8004746 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68d8      	ldr	r0, [r3, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004700:	461a      	mov	r2, r3
 8004702:	68b9      	ldr	r1, [r7, #8]
 8004704:	f003 f9ce 	bl	8007aa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004710:	425b      	negs	r3, r3
 8004712:	441a      	add	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d207      	bcs.n	8004734 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472c:	425b      	negs	r3, r3
 800472e:	441a      	add	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d105      	bne.n	8004746 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	3b01      	subs	r3, #1
 8004744:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800474e:	697b      	ldr	r3, [r7, #20]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d018      	beq.n	800479c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	441a      	add	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	429a      	cmp	r2, r3
 8004782:	d303      	bcc.n	800478c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68d9      	ldr	r1, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004794:	461a      	mov	r2, r3
 8004796:	6838      	ldr	r0, [r7, #0]
 8004798:	f003 f984 	bl	8007aa4 <memcpy>
	}
}
 800479c:	bf00      	nop
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047ac:	f001 fddc 	bl	8006368 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047b8:	e011      	b.n	80047de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d012      	beq.n	80047e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3324      	adds	r3, #36	@ 0x24
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fd76 	bl	80052b8 <xTaskRemoveFromEventList>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047d2:	f000 fe4f 	bl	8005474 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	3b01      	subs	r3, #1
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	dce9      	bgt.n	80047ba <prvUnlockQueue+0x16>
 80047e6:	e000      	b.n	80047ea <prvUnlockQueue+0x46>
					break;
 80047e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	22ff      	movs	r2, #255	@ 0xff
 80047ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80047f2:	f001 fdeb 	bl	80063cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047f6:	f001 fdb7 	bl	8006368 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004800:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004802:	e011      	b.n	8004828 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d012      	beq.n	8004832 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3310      	adds	r3, #16
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fd51 	bl	80052b8 <xTaskRemoveFromEventList>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800481c:	f000 fe2a 	bl	8005474 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004820:	7bbb      	ldrb	r3, [r7, #14]
 8004822:	3b01      	subs	r3, #1
 8004824:	b2db      	uxtb	r3, r3
 8004826:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004828:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800482c:	2b00      	cmp	r3, #0
 800482e:	dce9      	bgt.n	8004804 <prvUnlockQueue+0x60>
 8004830:	e000      	b.n	8004834 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004832:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	22ff      	movs	r2, #255	@ 0xff
 8004838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800483c:	f001 fdc6 	bl	80063cc <vPortExitCritical>
}
 8004840:	bf00      	nop
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004850:	f001 fd8a 	bl	8006368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004858:	2b00      	cmp	r3, #0
 800485a:	d102      	bne.n	8004862 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800485c:	2301      	movs	r3, #1
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	e001      	b.n	8004866 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004866:	f001 fdb1 	bl	80063cc <vPortExitCritical>

	return xReturn;
 800486a:	68fb      	ldr	r3, [r7, #12]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800487c:	f001 fd74 	bl	8006368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004888:	429a      	cmp	r2, r3
 800488a:	d102      	bne.n	8004892 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800488c:	2301      	movs	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	e001      	b.n	8004896 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004896:	f001 fd99 	bl	80063cc <vPortExitCritical>

	return xReturn;
 800489a:	68fb      	ldr	r3, [r7, #12]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	e014      	b.n	80048de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80048b4:	4a0f      	ldr	r2, [pc, #60]	@ (80048f4 <vQueueAddToRegistry+0x50>)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80048c0:	490c      	ldr	r1, [pc, #48]	@ (80048f4 <vQueueAddToRegistry+0x50>)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80048ca:	4a0a      	ldr	r2, [pc, #40]	@ (80048f4 <vQueueAddToRegistry+0x50>)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4413      	add	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80048d6:	e006      	b.n	80048e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3301      	adds	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b07      	cmp	r3, #7
 80048e2:	d9e7      	bls.n	80048b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000bd0 	.word	0x20000bd0

080048f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	e016      	b.n	8004934 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004906:	4a10      	ldr	r2, [pc, #64]	@ (8004948 <vQueueUnregisterQueue+0x50>)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	4413      	add	r3, r2
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	429a      	cmp	r2, r3
 8004914:	d10b      	bne.n	800492e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004916:	4a0c      	ldr	r2, [pc, #48]	@ (8004948 <vQueueUnregisterQueue+0x50>)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2100      	movs	r1, #0
 800491c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004920:	4a09      	ldr	r2, [pc, #36]	@ (8004948 <vQueueUnregisterQueue+0x50>)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	4413      	add	r3, r2
 8004928:	2200      	movs	r2, #0
 800492a:	605a      	str	r2, [r3, #4]
				break;
 800492c:	e006      	b.n	800493c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3301      	adds	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b07      	cmp	r3, #7
 8004938:	d9e5      	bls.n	8004906 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	20000bd0 	.word	0x20000bd0

0800494c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800495c:	f001 fd04 	bl	8006368 <vPortEnterCritical>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004966:	b25b      	sxtb	r3, r3
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800496c:	d103      	bne.n	8004976 <vQueueWaitForMessageRestricted+0x2a>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800497c:	b25b      	sxtb	r3, r3
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004982:	d103      	bne.n	800498c <vQueueWaitForMessageRestricted+0x40>
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800498c:	f001 fd1e 	bl	80063cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	3324      	adds	r3, #36	@ 0x24
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fc5d 	bl	8005260 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049a6:	6978      	ldr	r0, [r7, #20]
 80049a8:	f7ff fefc 	bl	80047a4 <prvUnlockQueue>
	}
 80049ac:	bf00      	nop
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08e      	sub	sp, #56	@ 0x38
 80049b8:	af04      	add	r7, sp, #16
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10b      	bne.n	80049e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	623b      	str	r3, [r7, #32]
}
 80049da:	bf00      	nop
 80049dc:	bf00      	nop
 80049de:	e7fd      	b.n	80049dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10b      	bne.n	80049fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	61fb      	str	r3, [r7, #28]
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	e7fd      	b.n	80049fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049fe:	23a0      	movs	r3, #160	@ 0xa0
 8004a00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2ba0      	cmp	r3, #160	@ 0xa0
 8004a06:	d00b      	beq.n	8004a20 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	61bb      	str	r3, [r7, #24]
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01e      	beq.n	8004a66 <xTaskCreateStatic+0xb2>
 8004a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01b      	beq.n	8004a66 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a30:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a36:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a40:	2300      	movs	r3, #0
 8004a42:	9303      	str	r3, [sp, #12]
 8004a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a46:	9302      	str	r3, [sp, #8]
 8004a48:	f107 0314 	add.w	r3, r7, #20
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f851 	bl	8004b00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a60:	f000 f8ee 	bl	8004c40 <prvAddNewTaskToReadyList>
 8004a64:	e001      	b.n	8004a6a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a6a:	697b      	ldr	r3, [r7, #20]
	}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3728      	adds	r7, #40	@ 0x28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08c      	sub	sp, #48	@ 0x30
 8004a78:	af04      	add	r7, sp, #16
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	4613      	mov	r3, r2
 8004a82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a84:	88fb      	ldrh	r3, [r7, #6]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 fd8f 	bl	80065ac <pvPortMalloc>
 8004a8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00e      	beq.n	8004ab4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a96:	20a0      	movs	r0, #160	@ 0xa0
 8004a98:	f001 fd88 	bl	80065ac <pvPortMalloc>
 8004a9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004aaa:	e005      	b.n	8004ab8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004aac:	6978      	ldr	r0, [r7, #20]
 8004aae:	f001 fe4b 	bl	8006748 <vPortFree>
 8004ab2:	e001      	b.n	8004ab8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d017      	beq.n	8004aee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9303      	str	r3, [sp, #12]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	9302      	str	r3, [sp, #8]
 8004ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f80f 	bl	8004b00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ae2:	69f8      	ldr	r0, [r7, #28]
 8004ae4:	f000 f8ac 	bl	8004c40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	e002      	b.n	8004af4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004aee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004af2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004af4:	69bb      	ldr	r3, [r7, #24]
	}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f023 0307 	bic.w	r3, r3, #7
 8004b26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	617b      	str	r3, [r7, #20]
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	e7fd      	b.n	8004b46 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01f      	beq.n	8004b90 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b50:	2300      	movs	r3, #0
 8004b52:	61fb      	str	r3, [r7, #28]
 8004b54:	e012      	b.n	8004b7c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	7819      	ldrb	r1, [r3, #0]
 8004b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	4413      	add	r3, r2
 8004b64:	3334      	adds	r3, #52	@ 0x34
 8004b66:	460a      	mov	r2, r1
 8004b68:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	4413      	add	r3, r2
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d006      	beq.n	8004b84 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	d9e9      	bls.n	8004b56 <prvInitialiseNewTask+0x56>
 8004b82:	e000      	b.n	8004b86 <prvInitialiseNewTask+0x86>
			{
				break;
 8004b84:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b8e:	e003      	b.n	8004b98 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9a:	2b06      	cmp	r3, #6
 8004b9c:	d901      	bls.n	8004ba2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b9e:	2306      	movs	r3, #6
 8004ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004baa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bac:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fe ff8c 	bl	8003ad6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc0:	3318      	adds	r3, #24
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe ff87 	bl	8003ad6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bcc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd0:	f1c3 0207 	rsb	r2, r3, #7
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bdc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be0:	2200      	movs	r2, #0
 8004be2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf0:	334c      	adds	r3, #76	@ 0x4c
 8004bf2:	224c      	movs	r2, #76	@ 0x4c
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f002 fec2 	bl	8007980 <memset>
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8004c34 <prvInitialiseNewTask+0x134>)
 8004c00:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c04:	4a0c      	ldr	r2, [pc, #48]	@ (8004c38 <prvInitialiseNewTask+0x138>)
 8004c06:	655a      	str	r2, [r3, #84]	@ 0x54
 8004c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c3c <prvInitialiseNewTask+0x13c>)
 8004c0c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	68f9      	ldr	r1, [r7, #12]
 8004c12:	69b8      	ldr	r0, [r7, #24]
 8004c14:	f001 fa7a 	bl	800610c <pxPortInitialiseStack>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c2a:	bf00      	nop
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	2000aaa8 	.word	0x2000aaa8
 8004c38:	2000ab10 	.word	0x2000ab10
 8004c3c:	2000ab78 	.word	0x2000ab78

08004c40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c48:	f001 fb8e 	bl	8006368 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf8 <prvAddNewTaskToReadyList+0xb8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3301      	adds	r3, #1
 8004c52:	4a29      	ldr	r2, [pc, #164]	@ (8004cf8 <prvAddNewTaskToReadyList+0xb8>)
 8004c54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c56:	4b29      	ldr	r3, [pc, #164]	@ (8004cfc <prvAddNewTaskToReadyList+0xbc>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c5e:	4a27      	ldr	r2, [pc, #156]	@ (8004cfc <prvAddNewTaskToReadyList+0xbc>)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c64:	4b24      	ldr	r3, [pc, #144]	@ (8004cf8 <prvAddNewTaskToReadyList+0xb8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d110      	bne.n	8004c8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c6c:	f000 fc26 	bl	80054bc <prvInitialiseTaskLists>
 8004c70:	e00d      	b.n	8004c8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c72:	4b23      	ldr	r3, [pc, #140]	@ (8004d00 <prvAddNewTaskToReadyList+0xc0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c7a:	4b20      	ldr	r3, [pc, #128]	@ (8004cfc <prvAddNewTaskToReadyList+0xbc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d802      	bhi.n	8004c8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c88:	4a1c      	ldr	r2, [pc, #112]	@ (8004cfc <prvAddNewTaskToReadyList+0xbc>)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004d04 <prvAddNewTaskToReadyList+0xc4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3301      	adds	r3, #1
 8004c94:	4a1b      	ldr	r2, [pc, #108]	@ (8004d04 <prvAddNewTaskToReadyList+0xc4>)
 8004c96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	4b19      	ldr	r3, [pc, #100]	@ (8004d08 <prvAddNewTaskToReadyList+0xc8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	4a18      	ldr	r2, [pc, #96]	@ (8004d08 <prvAddNewTaskToReadyList+0xc8>)
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4a15      	ldr	r2, [pc, #84]	@ (8004d0c <prvAddNewTaskToReadyList+0xcc>)
 8004cb8:	441a      	add	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f7fe ff15 	bl	8003af0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004cc6:	f001 fb81 	bl	80063cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cca:	4b0d      	ldr	r3, [pc, #52]	@ (8004d00 <prvAddNewTaskToReadyList+0xc0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00e      	beq.n	8004cf0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <prvAddNewTaskToReadyList+0xbc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d207      	bcs.n	8004cf0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d10 <prvAddNewTaskToReadyList+0xd0>)
 8004ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20000d10 	.word	0x20000d10
 8004cfc:	20000c10 	.word	0x20000c10
 8004d00:	20000d1c 	.word	0x20000d1c
 8004d04:	20000d2c 	.word	0x20000d2c
 8004d08:	20000d18 	.word	0x20000d18
 8004d0c:	20000c14 	.word	0x20000c14
 8004d10:	e000ed04 	.word	0xe000ed04

08004d14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d018      	beq.n	8004d58 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d26:	4b14      	ldr	r3, [pc, #80]	@ (8004d78 <vTaskDelay+0x64>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <vTaskDelay+0x32>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	60bb      	str	r3, [r7, #8]
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	e7fd      	b.n	8004d42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d46:	f000 f88b 	bl	8004e60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fe39 	bl	80059c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d52:	f000 f893 	bl	8004e7c <xTaskResumeAll>
 8004d56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d107      	bne.n	8004d6e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004d5e:	4b07      	ldr	r3, [pc, #28]	@ (8004d7c <vTaskDelay+0x68>)
 8004d60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000d38 	.word	0x20000d38
 8004d7c:	e000ed04 	.word	0xe000ed04

08004d80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	@ 0x28
 8004d84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d8e:	463a      	mov	r2, r7
 8004d90:	1d39      	adds	r1, r7, #4
 8004d92:	f107 0308 	add.w	r3, r7, #8
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fb fb7c 	bl	8000494 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d9c:	6839      	ldr	r1, [r7, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	9202      	str	r2, [sp, #8]
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	2300      	movs	r3, #0
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	2300      	movs	r3, #0
 8004dac:	460a      	mov	r2, r1
 8004dae:	4924      	ldr	r1, [pc, #144]	@ (8004e40 <vTaskStartScheduler+0xc0>)
 8004db0:	4824      	ldr	r0, [pc, #144]	@ (8004e44 <vTaskStartScheduler+0xc4>)
 8004db2:	f7ff fdff 	bl	80049b4 <xTaskCreateStatic>
 8004db6:	4603      	mov	r3, r0
 8004db8:	4a23      	ldr	r2, [pc, #140]	@ (8004e48 <vTaskStartScheduler+0xc8>)
 8004dba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004dbc:	4b22      	ldr	r3, [pc, #136]	@ (8004e48 <vTaskStartScheduler+0xc8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	e001      	b.n	8004dce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d102      	bne.n	8004dda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004dd4:	f000 fe5c 	bl	8005a90 <xTimerCreateTimerTask>
 8004dd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d11b      	bne.n	8004e18 <vTaskStartScheduler+0x98>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	613b      	str	r3, [r7, #16]
}
 8004df2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004df4:	4b15      	ldr	r3, [pc, #84]	@ (8004e4c <vTaskStartScheduler+0xcc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	334c      	adds	r3, #76	@ 0x4c
 8004dfa:	4a15      	ldr	r2, [pc, #84]	@ (8004e50 <vTaskStartScheduler+0xd0>)
 8004dfc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004dfe:	4b15      	ldr	r3, [pc, #84]	@ (8004e54 <vTaskStartScheduler+0xd4>)
 8004e00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e06:	4b14      	ldr	r3, [pc, #80]	@ (8004e58 <vTaskStartScheduler+0xd8>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e0c:	4b13      	ldr	r3, [pc, #76]	@ (8004e5c <vTaskStartScheduler+0xdc>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e12:	f001 fa05 	bl	8006220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e16:	e00f      	b.n	8004e38 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e1e:	d10b      	bne.n	8004e38 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	60fb      	str	r3, [r7, #12]
}
 8004e32:	bf00      	nop
 8004e34:	bf00      	nop
 8004e36:	e7fd      	b.n	8004e34 <vTaskStartScheduler+0xb4>
}
 8004e38:	bf00      	nop
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	08008404 	.word	0x08008404
 8004e44:	0800548d 	.word	0x0800548d
 8004e48:	20000d34 	.word	0x20000d34
 8004e4c:	20000c10 	.word	0x20000c10
 8004e50:	20000010 	.word	0x20000010
 8004e54:	20000d30 	.word	0x20000d30
 8004e58:	20000d1c 	.word	0x20000d1c
 8004e5c:	20000d14 	.word	0x20000d14

08004e60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e64:	4b04      	ldr	r3, [pc, #16]	@ (8004e78 <vTaskSuspendAll+0x18>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	4a03      	ldr	r2, [pc, #12]	@ (8004e78 <vTaskSuspendAll+0x18>)
 8004e6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e6e:	bf00      	nop
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	20000d38 	.word	0x20000d38

08004e7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e8a:	4b42      	ldr	r3, [pc, #264]	@ (8004f94 <xTaskResumeAll+0x118>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10b      	bne.n	8004eaa <xTaskResumeAll+0x2e>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	603b      	str	r3, [r7, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	e7fd      	b.n	8004ea6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004eaa:	f001 fa5d 	bl	8006368 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004eae:	4b39      	ldr	r3, [pc, #228]	@ (8004f94 <xTaskResumeAll+0x118>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	4a37      	ldr	r2, [pc, #220]	@ (8004f94 <xTaskResumeAll+0x118>)
 8004eb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb8:	4b36      	ldr	r3, [pc, #216]	@ (8004f94 <xTaskResumeAll+0x118>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d161      	bne.n	8004f84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ec0:	4b35      	ldr	r3, [pc, #212]	@ (8004f98 <xTaskResumeAll+0x11c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d05d      	beq.n	8004f84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ec8:	e02e      	b.n	8004f28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eca:	4b34      	ldr	r3, [pc, #208]	@ (8004f9c <xTaskResumeAll+0x120>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3318      	adds	r3, #24
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe fe67 	bl	8003baa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fe fe62 	bl	8003baa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eea:	2201      	movs	r2, #1
 8004eec:	409a      	lsls	r2, r3
 8004eee:	4b2c      	ldr	r3, [pc, #176]	@ (8004fa0 <xTaskResumeAll+0x124>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8004fa0 <xTaskResumeAll+0x124>)
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4a27      	ldr	r2, [pc, #156]	@ (8004fa4 <xTaskResumeAll+0x128>)
 8004f06:	441a      	add	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f7fe fdee 	bl	8003af0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f18:	4b23      	ldr	r3, [pc, #140]	@ (8004fa8 <xTaskResumeAll+0x12c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d302      	bcc.n	8004f28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f22:	4b22      	ldr	r3, [pc, #136]	@ (8004fac <xTaskResumeAll+0x130>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f28:	4b1c      	ldr	r3, [pc, #112]	@ (8004f9c <xTaskResumeAll+0x120>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1cc      	bne.n	8004eca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f36:	f000 fb65 	bl	8005604 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb0 <xTaskResumeAll+0x134>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d010      	beq.n	8004f68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f46:	f000 f847 	bl	8004fd8 <xTaskIncrementTick>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f50:	4b16      	ldr	r3, [pc, #88]	@ (8004fac <xTaskResumeAll+0x130>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f1      	bne.n	8004f46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f62:	4b13      	ldr	r3, [pc, #76]	@ (8004fb0 <xTaskResumeAll+0x134>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f68:	4b10      	ldr	r3, [pc, #64]	@ (8004fac <xTaskResumeAll+0x130>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d009      	beq.n	8004f84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f74:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb4 <xTaskResumeAll+0x138>)
 8004f76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f84:	f001 fa22 	bl	80063cc <vPortExitCritical>

	return xAlreadyYielded;
 8004f88:	68bb      	ldr	r3, [r7, #8]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000d38 	.word	0x20000d38
 8004f98:	20000d10 	.word	0x20000d10
 8004f9c:	20000cd0 	.word	0x20000cd0
 8004fa0:	20000d18 	.word	0x20000d18
 8004fa4:	20000c14 	.word	0x20000c14
 8004fa8:	20000c10 	.word	0x20000c10
 8004fac:	20000d24 	.word	0x20000d24
 8004fb0:	20000d20 	.word	0x20000d20
 8004fb4:	e000ed04 	.word	0xe000ed04

08004fb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fbe:	4b05      	ldr	r3, [pc, #20]	@ (8004fd4 <xTaskGetTickCount+0x1c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fc4:	687b      	ldr	r3, [r7, #4]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20000d14 	.word	0x20000d14

08004fd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8005120 <xTaskIncrementTick+0x148>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f040 808f 	bne.w	800510a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fec:	4b4d      	ldr	r3, [pc, #308]	@ (8005124 <xTaskIncrementTick+0x14c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8005124 <xTaskIncrementTick+0x14c>)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d121      	bne.n	8005044 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005000:	4b49      	ldr	r3, [pc, #292]	@ (8005128 <xTaskIncrementTick+0x150>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00b      	beq.n	8005022 <xTaskIncrementTick+0x4a>
	__asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	603b      	str	r3, [r7, #0]
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	e7fd      	b.n	800501e <xTaskIncrementTick+0x46>
 8005022:	4b41      	ldr	r3, [pc, #260]	@ (8005128 <xTaskIncrementTick+0x150>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	4b40      	ldr	r3, [pc, #256]	@ (800512c <xTaskIncrementTick+0x154>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a3e      	ldr	r2, [pc, #248]	@ (8005128 <xTaskIncrementTick+0x150>)
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4a3e      	ldr	r2, [pc, #248]	@ (800512c <xTaskIncrementTick+0x154>)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b3e      	ldr	r3, [pc, #248]	@ (8005130 <xTaskIncrementTick+0x158>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3301      	adds	r3, #1
 800503c:	4a3c      	ldr	r2, [pc, #240]	@ (8005130 <xTaskIncrementTick+0x158>)
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	f000 fae0 	bl	8005604 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005044:	4b3b      	ldr	r3, [pc, #236]	@ (8005134 <xTaskIncrementTick+0x15c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	429a      	cmp	r2, r3
 800504c:	d348      	bcc.n	80050e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800504e:	4b36      	ldr	r3, [pc, #216]	@ (8005128 <xTaskIncrementTick+0x150>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d104      	bne.n	8005062 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005058:	4b36      	ldr	r3, [pc, #216]	@ (8005134 <xTaskIncrementTick+0x15c>)
 800505a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800505e:	601a      	str	r2, [r3, #0]
					break;
 8005060:	e03e      	b.n	80050e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005062:	4b31      	ldr	r3, [pc, #196]	@ (8005128 <xTaskIncrementTick+0x150>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d203      	bcs.n	8005082 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800507a:	4a2e      	ldr	r2, [pc, #184]	@ (8005134 <xTaskIncrementTick+0x15c>)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005080:	e02e      	b.n	80050e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	3304      	adds	r3, #4
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe fd8f 	bl	8003baa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	2b00      	cmp	r3, #0
 8005092:	d004      	beq.n	800509e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	3318      	adds	r3, #24
 8005098:	4618      	mov	r0, r3
 800509a:	f7fe fd86 	bl	8003baa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a2:	2201      	movs	r2, #1
 80050a4:	409a      	lsls	r2, r3
 80050a6:	4b24      	ldr	r3, [pc, #144]	@ (8005138 <xTaskIncrementTick+0x160>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	4a22      	ldr	r2, [pc, #136]	@ (8005138 <xTaskIncrementTick+0x160>)
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4a1f      	ldr	r2, [pc, #124]	@ (800513c <xTaskIncrementTick+0x164>)
 80050be:	441a      	add	r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	3304      	adds	r3, #4
 80050c4:	4619      	mov	r1, r3
 80050c6:	4610      	mov	r0, r2
 80050c8:	f7fe fd12 	bl	8003af0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005140 <xTaskIncrementTick+0x168>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d3b9      	bcc.n	800504e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80050da:	2301      	movs	r3, #1
 80050dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050de:	e7b6      	b.n	800504e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050e0:	4b17      	ldr	r3, [pc, #92]	@ (8005140 <xTaskIncrementTick+0x168>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e6:	4915      	ldr	r1, [pc, #84]	@ (800513c <xTaskIncrementTick+0x164>)
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d901      	bls.n	80050fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80050f8:	2301      	movs	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80050fc:	4b11      	ldr	r3, [pc, #68]	@ (8005144 <xTaskIncrementTick+0x16c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005104:	2301      	movs	r3, #1
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e004      	b.n	8005114 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800510a:	4b0f      	ldr	r3, [pc, #60]	@ (8005148 <xTaskIncrementTick+0x170>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3301      	adds	r3, #1
 8005110:	4a0d      	ldr	r2, [pc, #52]	@ (8005148 <xTaskIncrementTick+0x170>)
 8005112:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005114:	697b      	ldr	r3, [r7, #20]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	20000d38 	.word	0x20000d38
 8005124:	20000d14 	.word	0x20000d14
 8005128:	20000cc8 	.word	0x20000cc8
 800512c:	20000ccc 	.word	0x20000ccc
 8005130:	20000d28 	.word	0x20000d28
 8005134:	20000d30 	.word	0x20000d30
 8005138:	20000d18 	.word	0x20000d18
 800513c:	20000c14 	.word	0x20000c14
 8005140:	20000c10 	.word	0x20000c10
 8005144:	20000d24 	.word	0x20000d24
 8005148:	20000d20 	.word	0x20000d20

0800514c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005152:	4b2a      	ldr	r3, [pc, #168]	@ (80051fc <vTaskSwitchContext+0xb0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800515a:	4b29      	ldr	r3, [pc, #164]	@ (8005200 <vTaskSwitchContext+0xb4>)
 800515c:	2201      	movs	r2, #1
 800515e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005160:	e045      	b.n	80051ee <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005162:	4b27      	ldr	r3, [pc, #156]	@ (8005200 <vTaskSwitchContext+0xb4>)
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005168:	4b26      	ldr	r3, [pc, #152]	@ (8005204 <vTaskSwitchContext+0xb8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	fab3 f383 	clz	r3, r3
 8005174:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005176:	7afb      	ldrb	r3, [r7, #11]
 8005178:	f1c3 031f 	rsb	r3, r3, #31
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	4922      	ldr	r1, [pc, #136]	@ (8005208 <vTaskSwitchContext+0xbc>)
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10b      	bne.n	80051aa <vTaskSwitchContext+0x5e>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	607b      	str	r3, [r7, #4]
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	e7fd      	b.n	80051a6 <vTaskSwitchContext+0x5a>
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4a14      	ldr	r2, [pc, #80]	@ (8005208 <vTaskSwitchContext+0xbc>)
 80051b6:	4413      	add	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	605a      	str	r2, [r3, #4]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	3308      	adds	r3, #8
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d104      	bne.n	80051da <vTaskSwitchContext+0x8e>
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	605a      	str	r2, [r3, #4]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4a0a      	ldr	r2, [pc, #40]	@ (800520c <vTaskSwitchContext+0xc0>)
 80051e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051e4:	4b09      	ldr	r3, [pc, #36]	@ (800520c <vTaskSwitchContext+0xc0>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	334c      	adds	r3, #76	@ 0x4c
 80051ea:	4a09      	ldr	r2, [pc, #36]	@ (8005210 <vTaskSwitchContext+0xc4>)
 80051ec:	6013      	str	r3, [r2, #0]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000d38 	.word	0x20000d38
 8005200:	20000d24 	.word	0x20000d24
 8005204:	20000d18 	.word	0x20000d18
 8005208:	20000c14 	.word	0x20000c14
 800520c:	20000c10 	.word	0x20000c10
 8005210:	20000010 	.word	0x20000010

08005214 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	60fb      	str	r3, [r7, #12]
}
 8005236:	bf00      	nop
 8005238:	bf00      	nop
 800523a:	e7fd      	b.n	8005238 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800523c:	4b07      	ldr	r3, [pc, #28]	@ (800525c <vTaskPlaceOnEventList+0x48>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3318      	adds	r3, #24
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fe fc77 	bl	8003b38 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800524a:	2101      	movs	r1, #1
 800524c:	6838      	ldr	r0, [r7, #0]
 800524e:	f000 fbb9 	bl	80059c4 <prvAddCurrentTaskToDelayedList>
}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000c10 	.word	0x20000c10

08005260 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10b      	bne.n	800528a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	617b      	str	r3, [r7, #20]
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	e7fd      	b.n	8005286 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800528a:	4b0a      	ldr	r3, [pc, #40]	@ (80052b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3318      	adds	r3, #24
 8005290:	4619      	mov	r1, r3
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f7fe fc2c 	bl	8003af0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800529e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	68b8      	ldr	r0, [r7, #8]
 80052a8:	f000 fb8c 	bl	80059c4 <prvAddCurrentTaskToDelayedList>
	}
 80052ac:	bf00      	nop
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	20000c10 	.word	0x20000c10

080052b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	60fb      	str	r3, [r7, #12]
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	e7fd      	b.n	80052e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	3318      	adds	r3, #24
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fe fc5d 	bl	8003baa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005368 <xTaskRemoveFromEventList+0xb0>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d11c      	bne.n	8005332 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fe fc54 	bl	8003baa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	2201      	movs	r2, #1
 8005308:	409a      	lsls	r2, r3
 800530a:	4b18      	ldr	r3, [pc, #96]	@ (800536c <xTaskRemoveFromEventList+0xb4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4313      	orrs	r3, r2
 8005310:	4a16      	ldr	r2, [pc, #88]	@ (800536c <xTaskRemoveFromEventList+0xb4>)
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4a13      	ldr	r2, [pc, #76]	@ (8005370 <xTaskRemoveFromEventList+0xb8>)
 8005322:	441a      	add	r2, r3
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f7fe fbe0 	bl	8003af0 <vListInsertEnd>
 8005330:	e005      	b.n	800533e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	3318      	adds	r3, #24
 8005336:	4619      	mov	r1, r3
 8005338:	480e      	ldr	r0, [pc, #56]	@ (8005374 <xTaskRemoveFromEventList+0xbc>)
 800533a:	f7fe fbd9 	bl	8003af0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005342:	4b0d      	ldr	r3, [pc, #52]	@ (8005378 <xTaskRemoveFromEventList+0xc0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005348:	429a      	cmp	r2, r3
 800534a:	d905      	bls.n	8005358 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800534c:	2301      	movs	r3, #1
 800534e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005350:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <xTaskRemoveFromEventList+0xc4>)
 8005352:	2201      	movs	r2, #1
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e001      	b.n	800535c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800535c:	697b      	ldr	r3, [r7, #20]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000d38 	.word	0x20000d38
 800536c:	20000d18 	.word	0x20000d18
 8005370:	20000c14 	.word	0x20000c14
 8005374:	20000cd0 	.word	0x20000cd0
 8005378:	20000c10 	.word	0x20000c10
 800537c:	20000d24 	.word	0x20000d24

08005380 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005388:	4b06      	ldr	r3, [pc, #24]	@ (80053a4 <vTaskInternalSetTimeOutState+0x24>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005390:	4b05      	ldr	r3, [pc, #20]	@ (80053a8 <vTaskInternalSetTimeOutState+0x28>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	605a      	str	r2, [r3, #4]
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	20000d28 	.word	0x20000d28
 80053a8:	20000d14 	.word	0x20000d14

080053ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10b      	bne.n	80053d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	613b      	str	r3, [r7, #16]
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	e7fd      	b.n	80053d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10b      	bne.n	80053f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	60fb      	str	r3, [r7, #12]
}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	e7fd      	b.n	80053ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80053f2:	f000 ffb9 	bl	8006368 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053f6:	4b1d      	ldr	r3, [pc, #116]	@ (800546c <xTaskCheckForTimeOut+0xc0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800540e:	d102      	bne.n	8005416 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005410:	2300      	movs	r3, #0
 8005412:	61fb      	str	r3, [r7, #28]
 8005414:	e023      	b.n	800545e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4b15      	ldr	r3, [pc, #84]	@ (8005470 <xTaskCheckForTimeOut+0xc4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d007      	beq.n	8005432 <xTaskCheckForTimeOut+0x86>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	429a      	cmp	r2, r3
 800542a:	d302      	bcc.n	8005432 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800542c:	2301      	movs	r3, #1
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	e015      	b.n	800545e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	429a      	cmp	r2, r3
 800543a:	d20b      	bcs.n	8005454 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	1ad2      	subs	r2, r2, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff ff99 	bl	8005380 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800544e:	2300      	movs	r3, #0
 8005450:	61fb      	str	r3, [r7, #28]
 8005452:	e004      	b.n	800545e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800545a:	2301      	movs	r3, #1
 800545c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800545e:	f000 ffb5 	bl	80063cc <vPortExitCritical>

	return xReturn;
 8005462:	69fb      	ldr	r3, [r7, #28]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	20000d14 	.word	0x20000d14
 8005470:	20000d28 	.word	0x20000d28

08005474 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005478:	4b03      	ldr	r3, [pc, #12]	@ (8005488 <vTaskMissedYield+0x14>)
 800547a:	2201      	movs	r2, #1
 800547c:	601a      	str	r2, [r3, #0]
}
 800547e:	bf00      	nop
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	20000d24 	.word	0x20000d24

0800548c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005494:	f000 f852 	bl	800553c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005498:	4b06      	ldr	r3, [pc, #24]	@ (80054b4 <prvIdleTask+0x28>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d9f9      	bls.n	8005494 <prvIdleTask+0x8>
			{
				taskYIELD();
 80054a0:	4b05      	ldr	r3, [pc, #20]	@ (80054b8 <prvIdleTask+0x2c>)
 80054a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054b0:	e7f0      	b.n	8005494 <prvIdleTask+0x8>
 80054b2:	bf00      	nop
 80054b4:	20000c14 	.word	0x20000c14
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054c2:	2300      	movs	r3, #0
 80054c4:	607b      	str	r3, [r7, #4]
 80054c6:	e00c      	b.n	80054e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4a12      	ldr	r2, [pc, #72]	@ (800551c <prvInitialiseTaskLists+0x60>)
 80054d4:	4413      	add	r3, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fe fadd 	bl	8003a96 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3301      	adds	r3, #1
 80054e0:	607b      	str	r3, [r7, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b06      	cmp	r3, #6
 80054e6:	d9ef      	bls.n	80054c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054e8:	480d      	ldr	r0, [pc, #52]	@ (8005520 <prvInitialiseTaskLists+0x64>)
 80054ea:	f7fe fad4 	bl	8003a96 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054ee:	480d      	ldr	r0, [pc, #52]	@ (8005524 <prvInitialiseTaskLists+0x68>)
 80054f0:	f7fe fad1 	bl	8003a96 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054f4:	480c      	ldr	r0, [pc, #48]	@ (8005528 <prvInitialiseTaskLists+0x6c>)
 80054f6:	f7fe face 	bl	8003a96 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054fa:	480c      	ldr	r0, [pc, #48]	@ (800552c <prvInitialiseTaskLists+0x70>)
 80054fc:	f7fe facb 	bl	8003a96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005500:	480b      	ldr	r0, [pc, #44]	@ (8005530 <prvInitialiseTaskLists+0x74>)
 8005502:	f7fe fac8 	bl	8003a96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005506:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <prvInitialiseTaskLists+0x78>)
 8005508:	4a05      	ldr	r2, [pc, #20]	@ (8005520 <prvInitialiseTaskLists+0x64>)
 800550a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800550c:	4b0a      	ldr	r3, [pc, #40]	@ (8005538 <prvInitialiseTaskLists+0x7c>)
 800550e:	4a05      	ldr	r2, [pc, #20]	@ (8005524 <prvInitialiseTaskLists+0x68>)
 8005510:	601a      	str	r2, [r3, #0]
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000c14 	.word	0x20000c14
 8005520:	20000ca0 	.word	0x20000ca0
 8005524:	20000cb4 	.word	0x20000cb4
 8005528:	20000cd0 	.word	0x20000cd0
 800552c:	20000ce4 	.word	0x20000ce4
 8005530:	20000cfc 	.word	0x20000cfc
 8005534:	20000cc8 	.word	0x20000cc8
 8005538:	20000ccc 	.word	0x20000ccc

0800553c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005542:	e019      	b.n	8005578 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005544:	f000 ff10 	bl	8006368 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005548:	4b10      	ldr	r3, [pc, #64]	@ (800558c <prvCheckTasksWaitingTermination+0x50>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3304      	adds	r3, #4
 8005554:	4618      	mov	r0, r3
 8005556:	f7fe fb28 	bl	8003baa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800555a:	4b0d      	ldr	r3, [pc, #52]	@ (8005590 <prvCheckTasksWaitingTermination+0x54>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3b01      	subs	r3, #1
 8005560:	4a0b      	ldr	r2, [pc, #44]	@ (8005590 <prvCheckTasksWaitingTermination+0x54>)
 8005562:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005564:	4b0b      	ldr	r3, [pc, #44]	@ (8005594 <prvCheckTasksWaitingTermination+0x58>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3b01      	subs	r3, #1
 800556a:	4a0a      	ldr	r2, [pc, #40]	@ (8005594 <prvCheckTasksWaitingTermination+0x58>)
 800556c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800556e:	f000 ff2d 	bl	80063cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f810 	bl	8005598 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005578:	4b06      	ldr	r3, [pc, #24]	@ (8005594 <prvCheckTasksWaitingTermination+0x58>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e1      	bne.n	8005544 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20000ce4 	.word	0x20000ce4
 8005590:	20000d10 	.word	0x20000d10
 8005594:	20000cf8 	.word	0x20000cf8

08005598 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	334c      	adds	r3, #76	@ 0x4c
 80055a4:	4618      	mov	r0, r3
 80055a6:	f002 fa1f 	bl	80079e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d108      	bne.n	80055c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b8:	4618      	mov	r0, r3
 80055ba:	f001 f8c5 	bl	8006748 <vPortFree>
				vPortFree( pxTCB );
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f001 f8c2 	bl	8006748 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055c4:	e019      	b.n	80055fa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d103      	bne.n	80055d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f001 f8b9 	bl	8006748 <vPortFree>
	}
 80055d6:	e010      	b.n	80055fa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d00b      	beq.n	80055fa <prvDeleteTCB+0x62>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	60fb      	str	r3, [r7, #12]
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop
 80055f8:	e7fd      	b.n	80055f6 <prvDeleteTCB+0x5e>
	}
 80055fa:	bf00      	nop
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800560a:	4b0c      	ldr	r3, [pc, #48]	@ (800563c <prvResetNextTaskUnblockTime+0x38>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d104      	bne.n	800561e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005614:	4b0a      	ldr	r3, [pc, #40]	@ (8005640 <prvResetNextTaskUnblockTime+0x3c>)
 8005616:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800561a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800561c:	e008      	b.n	8005630 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800561e:	4b07      	ldr	r3, [pc, #28]	@ (800563c <prvResetNextTaskUnblockTime+0x38>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	4a04      	ldr	r2, [pc, #16]	@ (8005640 <prvResetNextTaskUnblockTime+0x3c>)
 800562e:	6013      	str	r3, [r2, #0]
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	20000cc8 	.word	0x20000cc8
 8005640:	20000d30 	.word	0x20000d30

08005644 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800564a:	4b0b      	ldr	r3, [pc, #44]	@ (8005678 <xTaskGetSchedulerState+0x34>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005652:	2301      	movs	r3, #1
 8005654:	607b      	str	r3, [r7, #4]
 8005656:	e008      	b.n	800566a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005658:	4b08      	ldr	r3, [pc, #32]	@ (800567c <xTaskGetSchedulerState+0x38>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005660:	2302      	movs	r3, #2
 8005662:	607b      	str	r3, [r7, #4]
 8005664:	e001      	b.n	800566a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005666:	2300      	movs	r3, #0
 8005668:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800566a:	687b      	ldr	r3, [r7, #4]
	}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	20000d1c 	.word	0x20000d1c
 800567c:	20000d38 	.word	0x20000d38

08005680 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d05e      	beq.n	8005754 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800569a:	4b31      	ldr	r3, [pc, #196]	@ (8005760 <xTaskPriorityInherit+0xe0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d24e      	bcs.n	8005742 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	db06      	blt.n	80056ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ac:	4b2c      	ldr	r3, [pc, #176]	@ (8005760 <xTaskPriorityInherit+0xe0>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b2:	f1c3 0207 	rsb	r2, r3, #7
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6959      	ldr	r1, [r3, #20]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4a26      	ldr	r2, [pc, #152]	@ (8005764 <xTaskPriorityInherit+0xe4>)
 80056cc:	4413      	add	r3, r2
 80056ce:	4299      	cmp	r1, r3
 80056d0:	d12f      	bne.n	8005732 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	3304      	adds	r3, #4
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe fa67 	bl	8003baa <uxListRemove>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10a      	bne.n	80056f8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	2201      	movs	r2, #1
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	43da      	mvns	r2, r3
 80056ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005768 <xTaskPriorityInherit+0xe8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4013      	ands	r3, r2
 80056f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005768 <xTaskPriorityInherit+0xe8>)
 80056f6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056f8:	4b19      	ldr	r3, [pc, #100]	@ (8005760 <xTaskPriorityInherit+0xe0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005706:	2201      	movs	r2, #1
 8005708:	409a      	lsls	r2, r3
 800570a:	4b17      	ldr	r3, [pc, #92]	@ (8005768 <xTaskPriorityInherit+0xe8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4313      	orrs	r3, r2
 8005710:	4a15      	ldr	r2, [pc, #84]	@ (8005768 <xTaskPriorityInherit+0xe8>)
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4a10      	ldr	r2, [pc, #64]	@ (8005764 <xTaskPriorityInherit+0xe4>)
 8005722:	441a      	add	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	3304      	adds	r3, #4
 8005728:	4619      	mov	r1, r3
 800572a:	4610      	mov	r0, r2
 800572c:	f7fe f9e0 	bl	8003af0 <vListInsertEnd>
 8005730:	e004      	b.n	800573c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005732:	4b0b      	ldr	r3, [pc, #44]	@ (8005760 <xTaskPriorityInherit+0xe0>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800573c:	2301      	movs	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	e008      	b.n	8005754 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005746:	4b06      	ldr	r3, [pc, #24]	@ (8005760 <xTaskPriorityInherit+0xe0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574c:	429a      	cmp	r2, r3
 800574e:	d201      	bcs.n	8005754 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005750:	2301      	movs	r3, #1
 8005752:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005754:	68fb      	ldr	r3, [r7, #12]
	}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000c10 	.word	0x20000c10
 8005764:	20000c14 	.word	0x20000c14
 8005768:	20000d18 	.word	0x20000d18

0800576c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d070      	beq.n	8005864 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005782:	4b3b      	ldr	r3, [pc, #236]	@ (8005870 <xTaskPriorityDisinherit+0x104>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	429a      	cmp	r2, r3
 800578a:	d00b      	beq.n	80057a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60fb      	str	r3, [r7, #12]
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10b      	bne.n	80057c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	60bb      	str	r3, [r7, #8]
}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	e7fd      	b.n	80057c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057c8:	1e5a      	subs	r2, r3, #1
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d044      	beq.n	8005864 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d140      	bne.n	8005864 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	3304      	adds	r3, #4
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe f9df 	bl	8003baa <uxListRemove>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d115      	bne.n	800581e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f6:	491f      	ldr	r1, [pc, #124]	@ (8005874 <xTaskPriorityDisinherit+0x108>)
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <xTaskPriorityDisinherit+0xb2>
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580c:	2201      	movs	r2, #1
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	43da      	mvns	r2, r3
 8005814:	4b18      	ldr	r3, [pc, #96]	@ (8005878 <xTaskPriorityDisinherit+0x10c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4013      	ands	r3, r2
 800581a:	4a17      	ldr	r2, [pc, #92]	@ (8005878 <xTaskPriorityDisinherit+0x10c>)
 800581c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582a:	f1c3 0207 	rsb	r2, r3, #7
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005836:	2201      	movs	r2, #1
 8005838:	409a      	lsls	r2, r3
 800583a:	4b0f      	ldr	r3, [pc, #60]	@ (8005878 <xTaskPriorityDisinherit+0x10c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4313      	orrs	r3, r2
 8005840:	4a0d      	ldr	r2, [pc, #52]	@ (8005878 <xTaskPriorityDisinherit+0x10c>)
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4a08      	ldr	r2, [pc, #32]	@ (8005874 <xTaskPriorityDisinherit+0x108>)
 8005852:	441a      	add	r2, r3
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	3304      	adds	r3, #4
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f7fe f948 	bl	8003af0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005860:	2301      	movs	r3, #1
 8005862:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005864:	697b      	ldr	r3, [r7, #20]
	}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000c10 	.word	0x20000c10
 8005874:	20000c14 	.word	0x20000c14
 8005878:	20000d18 	.word	0x20000d18

0800587c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800588a:	2301      	movs	r3, #1
 800588c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d079      	beq.n	8005988 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10b      	bne.n	80058b4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	60fb      	str	r3, [r7, #12]
}
 80058ae:	bf00      	nop
 80058b0:	bf00      	nop
 80058b2:	e7fd      	b.n	80058b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d902      	bls.n	80058c4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	61fb      	str	r3, [r7, #28]
 80058c2:	e002      	b.n	80058ca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d059      	beq.n	8005988 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d154      	bne.n	8005988 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80058de:	4b2c      	ldr	r3, [pc, #176]	@ (8005990 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d10b      	bne.n	8005900 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	60bb      	str	r3, [r7, #8]
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	e7fd      	b.n	80058fc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	db04      	blt.n	800591e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f1c3 0207 	rsb	r2, r3, #7
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	6959      	ldr	r1, [r3, #20]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4a19      	ldr	r2, [pc, #100]	@ (8005994 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800592e:	4413      	add	r3, r2
 8005930:	4299      	cmp	r1, r3
 8005932:	d129      	bne.n	8005988 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	3304      	adds	r3, #4
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe f936 	bl	8003baa <uxListRemove>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	2201      	movs	r2, #1
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	43da      	mvns	r2, r3
 8005950:	4b11      	ldr	r3, [pc, #68]	@ (8005998 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4013      	ands	r3, r2
 8005956:	4a10      	ldr	r2, [pc, #64]	@ (8005998 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005958:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595e:	2201      	movs	r2, #1
 8005960:	409a      	lsls	r2, r3
 8005962:	4b0d      	ldr	r3, [pc, #52]	@ (8005998 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4313      	orrs	r3, r2
 8005968:	4a0b      	ldr	r2, [pc, #44]	@ (8005998 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4a06      	ldr	r2, [pc, #24]	@ (8005994 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800597a:	441a      	add	r2, r3
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	3304      	adds	r3, #4
 8005980:	4619      	mov	r1, r3
 8005982:	4610      	mov	r0, r2
 8005984:	f7fe f8b4 	bl	8003af0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005988:	bf00      	nop
 800598a:	3720      	adds	r7, #32
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000c10 	.word	0x20000c10
 8005994:	20000c14 	.word	0x20000c14
 8005998:	20000d18 	.word	0x20000d18

0800599c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80059a0:	4b07      	ldr	r3, [pc, #28]	@ (80059c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d004      	beq.n	80059b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80059a8:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059ae:	3201      	adds	r2, #1
 80059b0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80059b2:	4b03      	ldr	r3, [pc, #12]	@ (80059c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80059b4:	681b      	ldr	r3, [r3, #0]
	}
 80059b6:	4618      	mov	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	20000c10 	.word	0x20000c10

080059c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059ce:	4b29      	ldr	r3, [pc, #164]	@ (8005a74 <prvAddCurrentTaskToDelayedList+0xb0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059d4:	4b28      	ldr	r3, [pc, #160]	@ (8005a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3304      	adds	r3, #4
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe f8e5 	bl	8003baa <uxListRemove>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10b      	bne.n	80059fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80059e6:	4b24      	ldr	r3, [pc, #144]	@ (8005a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ec:	2201      	movs	r2, #1
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	43da      	mvns	r2, r3
 80059f4:	4b21      	ldr	r3, [pc, #132]	@ (8005a7c <prvAddCurrentTaskToDelayedList+0xb8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4013      	ands	r3, r2
 80059fa:	4a20      	ldr	r2, [pc, #128]	@ (8005a7c <prvAddCurrentTaskToDelayedList+0xb8>)
 80059fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a04:	d10a      	bne.n	8005a1c <prvAddCurrentTaskToDelayedList+0x58>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3304      	adds	r3, #4
 8005a12:	4619      	mov	r1, r3
 8005a14:	481a      	ldr	r0, [pc, #104]	@ (8005a80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a16:	f7fe f86b 	bl	8003af0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a1a:	e026      	b.n	8005a6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4413      	add	r3, r2
 8005a22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a24:	4b14      	ldr	r3, [pc, #80]	@ (8005a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d209      	bcs.n	8005a48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a34:	4b13      	ldr	r3, [pc, #76]	@ (8005a84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	4b0f      	ldr	r3, [pc, #60]	@ (8005a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f7fe f879 	bl	8003b38 <vListInsert>
}
 8005a46:	e010      	b.n	8005a6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a48:	4b0f      	ldr	r3, [pc, #60]	@ (8005a88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3304      	adds	r3, #4
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f7fe f86f 	bl	8003b38 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d202      	bcs.n	8005a6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005a64:	4a09      	ldr	r2, [pc, #36]	@ (8005a8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6013      	str	r3, [r2, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000d14 	.word	0x20000d14
 8005a78:	20000c10 	.word	0x20000c10
 8005a7c:	20000d18 	.word	0x20000d18
 8005a80:	20000cfc 	.word	0x20000cfc
 8005a84:	20000ccc 	.word	0x20000ccc
 8005a88:	20000cc8 	.word	0x20000cc8
 8005a8c:	20000d30 	.word	0x20000d30

08005a90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08a      	sub	sp, #40	@ 0x28
 8005a94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a9a:	f000 faf7 	bl	800608c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b14 <xTimerCreateTimerTask+0x84>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d021      	beq.n	8005aea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005aae:	1d3a      	adds	r2, r7, #4
 8005ab0:	f107 0108 	add.w	r1, r7, #8
 8005ab4:	f107 030c 	add.w	r3, r7, #12
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fa fd05 	bl	80004c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	9202      	str	r2, [sp, #8]
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	2302      	movs	r3, #2
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	2300      	movs	r3, #0
 8005ace:	460a      	mov	r2, r1
 8005ad0:	4911      	ldr	r1, [pc, #68]	@ (8005b18 <xTimerCreateTimerTask+0x88>)
 8005ad2:	4812      	ldr	r0, [pc, #72]	@ (8005b1c <xTimerCreateTimerTask+0x8c>)
 8005ad4:	f7fe ff6e 	bl	80049b4 <xTaskCreateStatic>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	4a11      	ldr	r2, [pc, #68]	@ (8005b20 <xTimerCreateTimerTask+0x90>)
 8005adc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ade:	4b10      	ldr	r3, [pc, #64]	@ (8005b20 <xTimerCreateTimerTask+0x90>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10b      	bne.n	8005b08 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	613b      	str	r3, [r7, #16]
}
 8005b02:	bf00      	nop
 8005b04:	bf00      	nop
 8005b06:	e7fd      	b.n	8005b04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b08:	697b      	ldr	r3, [r7, #20]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000d6c 	.word	0x20000d6c
 8005b18:	0800840c 	.word	0x0800840c
 8005b1c:	08005c5d 	.word	0x08005c5d
 8005b20:	20000d70 	.word	0x20000d70

08005b24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	@ 0x28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10b      	bne.n	8005b54 <xTimerGenericCommand+0x30>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	623b      	str	r3, [r7, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	bf00      	nop
 8005b52:	e7fd      	b.n	8005b50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b54:	4b19      	ldr	r3, [pc, #100]	@ (8005bbc <xTimerGenericCommand+0x98>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d02a      	beq.n	8005bb2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b05      	cmp	r3, #5
 8005b6c:	dc18      	bgt.n	8005ba0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b6e:	f7ff fd69 	bl	8005644 <xTaskGetSchedulerState>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d109      	bne.n	8005b8c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b78:	4b10      	ldr	r3, [pc, #64]	@ (8005bbc <xTimerGenericCommand+0x98>)
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	f107 0114 	add.w	r1, r7, #20
 8005b80:	2300      	movs	r3, #0
 8005b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b84:	f7fe f9b0 	bl	8003ee8 <xQueueGenericSend>
 8005b88:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b8a:	e012      	b.n	8005bb2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bbc <xTimerGenericCommand+0x98>)
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	f107 0114 	add.w	r1, r7, #20
 8005b94:	2300      	movs	r3, #0
 8005b96:	2200      	movs	r2, #0
 8005b98:	f7fe f9a6 	bl	8003ee8 <xQueueGenericSend>
 8005b9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b9e:	e008      	b.n	8005bb2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ba0:	4b06      	ldr	r3, [pc, #24]	@ (8005bbc <xTimerGenericCommand+0x98>)
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	f107 0114 	add.w	r1, r7, #20
 8005ba8:	2300      	movs	r3, #0
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	f7fe fa9e 	bl	80040ec <xQueueGenericSendFromISR>
 8005bb0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3728      	adds	r7, #40	@ 0x28
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20000d6c 	.word	0x20000d6c

08005bc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bca:	4b23      	ldr	r3, [pc, #140]	@ (8005c58 <prvProcessExpiredTimer+0x98>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fd ffe6 	bl	8003baa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d023      	beq.n	8005c34 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	699a      	ldr	r2, [r3, #24]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	18d1      	adds	r1, r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	6978      	ldr	r0, [r7, #20]
 8005bfa:	f000 f8d5 	bl	8005da8 <prvInsertTimerInActiveList>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d020      	beq.n	8005c46 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c04:	2300      	movs	r3, #0
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	6978      	ldr	r0, [r7, #20]
 8005c10:	f7ff ff88 	bl	8005b24 <xTimerGenericCommand>
 8005c14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d114      	bne.n	8005c46 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	60fb      	str	r3, [r7, #12]
}
 8005c2e:	bf00      	nop
 8005c30:	bf00      	nop
 8005c32:	e7fd      	b.n	8005c30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	6978      	ldr	r0, [r7, #20]
 8005c4c:	4798      	blx	r3
}
 8005c4e:	bf00      	nop
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000d64 	.word	0x20000d64

08005c5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c64:	f107 0308 	add.w	r3, r7, #8
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 f859 	bl	8005d20 <prvGetNextExpireTime>
 8005c6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4619      	mov	r1, r3
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f805 	bl	8005c84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c7a:	f000 f8d7 	bl	8005e2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c7e:	bf00      	nop
 8005c80:	e7f0      	b.n	8005c64 <prvTimerTask+0x8>
	...

08005c84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c8e:	f7ff f8e7 	bl	8004e60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c92:	f107 0308 	add.w	r3, r7, #8
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 f866 	bl	8005d68 <prvSampleTimeNow>
 8005c9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d130      	bne.n	8005d06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10a      	bne.n	8005cc0 <prvProcessTimerOrBlockTask+0x3c>
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d806      	bhi.n	8005cc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005cb2:	f7ff f8e3 	bl	8004e7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005cb6:	68f9      	ldr	r1, [r7, #12]
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff ff81 	bl	8005bc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005cbe:	e024      	b.n	8005d0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005cc6:	4b13      	ldr	r3, [pc, #76]	@ (8005d14 <prvProcessTimerOrBlockTask+0x90>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <prvProcessTimerOrBlockTask+0x50>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <prvProcessTimerOrBlockTask+0x52>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d18 <prvProcessTimerOrBlockTask+0x94>)
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	f7fe fe31 	bl	800494c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cea:	f7ff f8c7 	bl	8004e7c <xTaskResumeAll>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005cf4:	4b09      	ldr	r3, [pc, #36]	@ (8005d1c <prvProcessTimerOrBlockTask+0x98>)
 8005cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	f3bf 8f6f 	isb	sy
}
 8005d04:	e001      	b.n	8005d0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d06:	f7ff f8b9 	bl	8004e7c <xTaskResumeAll>
}
 8005d0a:	bf00      	nop
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000d68 	.word	0x20000d68
 8005d18:	20000d6c 	.word	0x20000d6c
 8005d1c:	e000ed04 	.word	0xe000ed04

08005d20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d28:	4b0e      	ldr	r3, [pc, #56]	@ (8005d64 <prvGetNextExpireTime+0x44>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <prvGetNextExpireTime+0x16>
 8005d32:	2201      	movs	r2, #1
 8005d34:	e000      	b.n	8005d38 <prvGetNextExpireTime+0x18>
 8005d36:	2200      	movs	r2, #0
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d44:	4b07      	ldr	r3, [pc, #28]	@ (8005d64 <prvGetNextExpireTime+0x44>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	e001      	b.n	8005d54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d54:	68fb      	ldr	r3, [r7, #12]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20000d64 	.word	0x20000d64

08005d68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d70:	f7ff f922 	bl	8004fb8 <xTaskGetTickCount>
 8005d74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d76:	4b0b      	ldr	r3, [pc, #44]	@ (8005da4 <prvSampleTimeNow+0x3c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d205      	bcs.n	8005d8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d80:	f000 f91e 	bl	8005fc0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e002      	b.n	8005d92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d92:	4a04      	ldr	r2, [pc, #16]	@ (8005da4 <prvSampleTimeNow+0x3c>)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d98:	68fb      	ldr	r3, [r7, #12]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000d74 	.word	0x20000d74

08005da8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d812      	bhi.n	8005df4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	1ad2      	subs	r2, r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d302      	bcc.n	8005de2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	e01b      	b.n	8005e1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005de2:	4b10      	ldr	r3, [pc, #64]	@ (8005e24 <prvInsertTimerInActiveList+0x7c>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3304      	adds	r3, #4
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f7fd fea3 	bl	8003b38 <vListInsert>
 8005df2:	e012      	b.n	8005e1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d206      	bcs.n	8005e0a <prvInsertTimerInActiveList+0x62>
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d302      	bcc.n	8005e0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e04:	2301      	movs	r3, #1
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	e007      	b.n	8005e1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e0a:	4b07      	ldr	r3, [pc, #28]	@ (8005e28 <prvInsertTimerInActiveList+0x80>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3304      	adds	r3, #4
 8005e12:	4619      	mov	r1, r3
 8005e14:	4610      	mov	r0, r2
 8005e16:	f7fd fe8f 	bl	8003b38 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e1a:	697b      	ldr	r3, [r7, #20]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000d68 	.word	0x20000d68
 8005e28:	20000d64 	.word	0x20000d64

08005e2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08c      	sub	sp, #48	@ 0x30
 8005e30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e32:	e0b2      	b.n	8005f9a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f2c0 80af 	blt.w	8005f9a <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fd feac 	bl	8003baa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e52:	1d3b      	adds	r3, r7, #4
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff ff87 	bl	8005d68 <prvSampleTimeNow>
 8005e5a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b09      	cmp	r3, #9
 8005e60:	f200 8098 	bhi.w	8005f94 <prvProcessReceivedCommands+0x168>
 8005e64:	a201      	add	r2, pc, #4	@ (adr r2, 8005e6c <prvProcessReceivedCommands+0x40>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005e95 	.word	0x08005e95
 8005e70:	08005e95 	.word	0x08005e95
 8005e74:	08005e95 	.word	0x08005e95
 8005e78:	08005f0b 	.word	0x08005f0b
 8005e7c:	08005f1f 	.word	0x08005f1f
 8005e80:	08005f6b 	.word	0x08005f6b
 8005e84:	08005e95 	.word	0x08005e95
 8005e88:	08005e95 	.word	0x08005e95
 8005e8c:	08005f0b 	.word	0x08005f0b
 8005e90:	08005f1f 	.word	0x08005f1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	18d1      	adds	r1, r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a3a      	ldr	r2, [r7, #32]
 8005eb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005eb4:	f7ff ff78 	bl	8005da8 <prvInsertTimerInActiveList>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d06c      	beq.n	8005f98 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ec4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d061      	beq.n	8005f98 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	441a      	add	r2, r3
 8005edc:	2300      	movs	r3, #0
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ee6:	f7ff fe1d 	bl	8005b24 <xTimerGenericCommand>
 8005eea:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d152      	bne.n	8005f98 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	61bb      	str	r3, [r7, #24]
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop
 8005f08:	e7fd      	b.n	8005f06 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f10:	f023 0301 	bic.w	r3, r3, #1
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8005f1c:	e03d      	b.n	8005f9a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10b      	bne.n	8005f56 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	617b      	str	r3, [r7, #20]
}
 8005f50:	bf00      	nop
 8005f52:	bf00      	nop
 8005f54:	e7fd      	b.n	8005f52 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	18d1      	adds	r1, r2, r3
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	6a3a      	ldr	r2, [r7, #32]
 8005f62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f64:	f7ff ff20 	bl	8005da8 <prvInsertTimerInActiveList>
					break;
 8005f68:	e017      	b.n	8005f9a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d103      	bne.n	8005f80 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8005f78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f7a:	f000 fbe5 	bl	8006748 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f7e:	e00c      	b.n	8005f9a <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f86:	f023 0301 	bic.w	r3, r3, #1
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8005f92:	e002      	b.n	8005f9a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8005f94:	bf00      	nop
 8005f96:	e000      	b.n	8005f9a <prvProcessReceivedCommands+0x16e>
					break;
 8005f98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f9a:	4b08      	ldr	r3, [pc, #32]	@ (8005fbc <prvProcessReceivedCommands+0x190>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f107 0108 	add.w	r1, r7, #8
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fe f93f 	bl	8004228 <xQueueReceive>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f47f af41 	bne.w	8005e34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005fb2:	bf00      	nop
 8005fb4:	bf00      	nop
 8005fb6:	3728      	adds	r7, #40	@ 0x28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	20000d6c 	.word	0x20000d6c

08005fc0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fc6:	e049      	b.n	800605c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8006084 <prvSwitchTimerLists+0xc4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8006084 <prvSwitchTimerLists+0xc4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fd fde2 	bl	8003baa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d02f      	beq.n	800605c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4413      	add	r3, r2
 8006004:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	429a      	cmp	r2, r3
 800600c:	d90e      	bls.n	800602c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800601a:	4b1a      	ldr	r3, [pc, #104]	@ (8006084 <prvSwitchTimerLists+0xc4>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3304      	adds	r3, #4
 8006022:	4619      	mov	r1, r3
 8006024:	4610      	mov	r0, r2
 8006026:	f7fd fd87 	bl	8003b38 <vListInsert>
 800602a:	e017      	b.n	800605c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800602c:	2300      	movs	r3, #0
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	2300      	movs	r3, #0
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	2100      	movs	r1, #0
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7ff fd74 	bl	8005b24 <xTimerGenericCommand>
 800603c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10b      	bne.n	800605c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	603b      	str	r3, [r7, #0]
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	e7fd      	b.n	8006058 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800605c:	4b09      	ldr	r3, [pc, #36]	@ (8006084 <prvSwitchTimerLists+0xc4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1b0      	bne.n	8005fc8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006066:	4b07      	ldr	r3, [pc, #28]	@ (8006084 <prvSwitchTimerLists+0xc4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800606c:	4b06      	ldr	r3, [pc, #24]	@ (8006088 <prvSwitchTimerLists+0xc8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a04      	ldr	r2, [pc, #16]	@ (8006084 <prvSwitchTimerLists+0xc4>)
 8006072:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006074:	4a04      	ldr	r2, [pc, #16]	@ (8006088 <prvSwitchTimerLists+0xc8>)
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	6013      	str	r3, [r2, #0]
}
 800607a:	bf00      	nop
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000d64 	.word	0x20000d64
 8006088:	20000d68 	.word	0x20000d68

0800608c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006092:	f000 f969 	bl	8006368 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006096:	4b15      	ldr	r3, [pc, #84]	@ (80060ec <prvCheckForValidListAndQueue+0x60>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d120      	bne.n	80060e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800609e:	4814      	ldr	r0, [pc, #80]	@ (80060f0 <prvCheckForValidListAndQueue+0x64>)
 80060a0:	f7fd fcf9 	bl	8003a96 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80060a4:	4813      	ldr	r0, [pc, #76]	@ (80060f4 <prvCheckForValidListAndQueue+0x68>)
 80060a6:	f7fd fcf6 	bl	8003a96 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80060aa:	4b13      	ldr	r3, [pc, #76]	@ (80060f8 <prvCheckForValidListAndQueue+0x6c>)
 80060ac:	4a10      	ldr	r2, [pc, #64]	@ (80060f0 <prvCheckForValidListAndQueue+0x64>)
 80060ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060b0:	4b12      	ldr	r3, [pc, #72]	@ (80060fc <prvCheckForValidListAndQueue+0x70>)
 80060b2:	4a10      	ldr	r2, [pc, #64]	@ (80060f4 <prvCheckForValidListAndQueue+0x68>)
 80060b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060b6:	2300      	movs	r3, #0
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	4b11      	ldr	r3, [pc, #68]	@ (8006100 <prvCheckForValidListAndQueue+0x74>)
 80060bc:	4a11      	ldr	r2, [pc, #68]	@ (8006104 <prvCheckForValidListAndQueue+0x78>)
 80060be:	210c      	movs	r1, #12
 80060c0:	200a      	movs	r0, #10
 80060c2:	f7fd fe07 	bl	8003cd4 <xQueueGenericCreateStatic>
 80060c6:	4603      	mov	r3, r0
 80060c8:	4a08      	ldr	r2, [pc, #32]	@ (80060ec <prvCheckForValidListAndQueue+0x60>)
 80060ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060cc:	4b07      	ldr	r3, [pc, #28]	@ (80060ec <prvCheckForValidListAndQueue+0x60>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060d4:	4b05      	ldr	r3, [pc, #20]	@ (80060ec <prvCheckForValidListAndQueue+0x60>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	490b      	ldr	r1, [pc, #44]	@ (8006108 <prvCheckForValidListAndQueue+0x7c>)
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe fbe2 	bl	80048a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060e0:	f000 f974 	bl	80063cc <vPortExitCritical>
}
 80060e4:	bf00      	nop
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000d6c 	.word	0x20000d6c
 80060f0:	20000d3c 	.word	0x20000d3c
 80060f4:	20000d50 	.word	0x20000d50
 80060f8:	20000d64 	.word	0x20000d64
 80060fc:	20000d68 	.word	0x20000d68
 8006100:	20000df0 	.word	0x20000df0
 8006104:	20000d78 	.word	0x20000d78
 8006108:	08008414 	.word	0x08008414

0800610c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3b04      	subs	r3, #4
 800611c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3b04      	subs	r3, #4
 800612a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f023 0201 	bic.w	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3b04      	subs	r3, #4
 800613a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800613c:	4a0c      	ldr	r2, [pc, #48]	@ (8006170 <pxPortInitialiseStack+0x64>)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3b14      	subs	r3, #20
 8006146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3b04      	subs	r3, #4
 8006152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f06f 0202 	mvn.w	r2, #2
 800615a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3b20      	subs	r3, #32
 8006160:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006162:	68fb      	ldr	r3, [r7, #12]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	08006175 	.word	0x08006175

08006174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800617e:	4b13      	ldr	r3, [pc, #76]	@ (80061cc <prvTaskExitError+0x58>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006186:	d00b      	beq.n	80061a0 <prvTaskExitError+0x2c>
	__asm volatile
 8006188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	60fb      	str	r3, [r7, #12]
}
 800619a:	bf00      	nop
 800619c:	bf00      	nop
 800619e:	e7fd      	b.n	800619c <prvTaskExitError+0x28>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	60bb      	str	r3, [r7, #8]
}
 80061b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061b4:	bf00      	nop
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d0fc      	beq.n	80061b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	2000000c 	.word	0x2000000c

080061d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061d0:	4b07      	ldr	r3, [pc, #28]	@ (80061f0 <pxCurrentTCBConst2>)
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	6808      	ldr	r0, [r1, #0]
 80061d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061da:	f380 8809 	msr	PSP, r0
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f04f 0000 	mov.w	r0, #0
 80061e6:	f380 8811 	msr	BASEPRI, r0
 80061ea:	4770      	bx	lr
 80061ec:	f3af 8000 	nop.w

080061f0 <pxCurrentTCBConst2>:
 80061f0:	20000c10 	.word	0x20000c10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop

080061f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061f8:	4808      	ldr	r0, [pc, #32]	@ (800621c <prvPortStartFirstTask+0x24>)
 80061fa:	6800      	ldr	r0, [r0, #0]
 80061fc:	6800      	ldr	r0, [r0, #0]
 80061fe:	f380 8808 	msr	MSP, r0
 8006202:	f04f 0000 	mov.w	r0, #0
 8006206:	f380 8814 	msr	CONTROL, r0
 800620a:	b662      	cpsie	i
 800620c:	b661      	cpsie	f
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	df00      	svc	0
 8006218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800621a:	bf00      	nop
 800621c:	e000ed08 	.word	0xe000ed08

08006220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006226:	4b47      	ldr	r3, [pc, #284]	@ (8006344 <xPortStartScheduler+0x124>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a47      	ldr	r2, [pc, #284]	@ (8006348 <xPortStartScheduler+0x128>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d10b      	bne.n	8006248 <xPortStartScheduler+0x28>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	60fb      	str	r3, [r7, #12]
}
 8006242:	bf00      	nop
 8006244:	bf00      	nop
 8006246:	e7fd      	b.n	8006244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006248:	4b3e      	ldr	r3, [pc, #248]	@ (8006344 <xPortStartScheduler+0x124>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a3f      	ldr	r2, [pc, #252]	@ (800634c <xPortStartScheduler+0x12c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d10b      	bne.n	800626a <xPortStartScheduler+0x4a>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	613b      	str	r3, [r7, #16]
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	e7fd      	b.n	8006266 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800626a:	4b39      	ldr	r3, [pc, #228]	@ (8006350 <xPortStartScheduler+0x130>)
 800626c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	22ff      	movs	r2, #255	@ 0xff
 800627a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800628c:	b2da      	uxtb	r2, r3
 800628e:	4b31      	ldr	r3, [pc, #196]	@ (8006354 <xPortStartScheduler+0x134>)
 8006290:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006292:	4b31      	ldr	r3, [pc, #196]	@ (8006358 <xPortStartScheduler+0x138>)
 8006294:	2207      	movs	r2, #7
 8006296:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006298:	e009      	b.n	80062ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800629a:	4b2f      	ldr	r3, [pc, #188]	@ (8006358 <xPortStartScheduler+0x138>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3b01      	subs	r3, #1
 80062a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006358 <xPortStartScheduler+0x138>)
 80062a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b6:	2b80      	cmp	r3, #128	@ 0x80
 80062b8:	d0ef      	beq.n	800629a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062ba:	4b27      	ldr	r3, [pc, #156]	@ (8006358 <xPortStartScheduler+0x138>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f1c3 0307 	rsb	r3, r3, #7
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d00b      	beq.n	80062de <xPortStartScheduler+0xbe>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60bb      	str	r3, [r7, #8]
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	e7fd      	b.n	80062da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062de:	4b1e      	ldr	r3, [pc, #120]	@ (8006358 <xPortStartScheduler+0x138>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006358 <xPortStartScheduler+0x138>)
 80062e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006358 <xPortStartScheduler+0x138>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062f0:	4a19      	ldr	r2, [pc, #100]	@ (8006358 <xPortStartScheduler+0x138>)
 80062f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062fc:	4b17      	ldr	r3, [pc, #92]	@ (800635c <xPortStartScheduler+0x13c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a16      	ldr	r2, [pc, #88]	@ (800635c <xPortStartScheduler+0x13c>)
 8006302:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006306:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006308:	4b14      	ldr	r3, [pc, #80]	@ (800635c <xPortStartScheduler+0x13c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a13      	ldr	r2, [pc, #76]	@ (800635c <xPortStartScheduler+0x13c>)
 800630e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006312:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006314:	f000 f8da 	bl	80064cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006318:	4b11      	ldr	r3, [pc, #68]	@ (8006360 <xPortStartScheduler+0x140>)
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800631e:	f000 f8f9 	bl	8006514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006322:	4b10      	ldr	r3, [pc, #64]	@ (8006364 <xPortStartScheduler+0x144>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a0f      	ldr	r2, [pc, #60]	@ (8006364 <xPortStartScheduler+0x144>)
 8006328:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800632c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800632e:	f7ff ff63 	bl	80061f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006332:	f7fe ff0b 	bl	800514c <vTaskSwitchContext>
	prvTaskExitError();
 8006336:	f7ff ff1d 	bl	8006174 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	e000ed00 	.word	0xe000ed00
 8006348:	410fc271 	.word	0x410fc271
 800634c:	410fc270 	.word	0x410fc270
 8006350:	e000e400 	.word	0xe000e400
 8006354:	20000e38 	.word	0x20000e38
 8006358:	20000e3c 	.word	0x20000e3c
 800635c:	e000ed20 	.word	0xe000ed20
 8006360:	2000000c 	.word	0x2000000c
 8006364:	e000ef34 	.word	0xe000ef34

08006368 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	607b      	str	r3, [r7, #4]
}
 8006380:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006382:	4b10      	ldr	r3, [pc, #64]	@ (80063c4 <vPortEnterCritical+0x5c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3301      	adds	r3, #1
 8006388:	4a0e      	ldr	r2, [pc, #56]	@ (80063c4 <vPortEnterCritical+0x5c>)
 800638a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800638c:	4b0d      	ldr	r3, [pc, #52]	@ (80063c4 <vPortEnterCritical+0x5c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d110      	bne.n	80063b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006394:	4b0c      	ldr	r3, [pc, #48]	@ (80063c8 <vPortEnterCritical+0x60>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	603b      	str	r3, [r7, #0]
}
 80063b0:	bf00      	nop
 80063b2:	bf00      	nop
 80063b4:	e7fd      	b.n	80063b2 <vPortEnterCritical+0x4a>
	}
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	2000000c 	.word	0x2000000c
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063d2:	4b12      	ldr	r3, [pc, #72]	@ (800641c <vPortExitCritical+0x50>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10b      	bne.n	80063f2 <vPortExitCritical+0x26>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	607b      	str	r3, [r7, #4]
}
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	e7fd      	b.n	80063ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063f2:	4b0a      	ldr	r3, [pc, #40]	@ (800641c <vPortExitCritical+0x50>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	4a08      	ldr	r2, [pc, #32]	@ (800641c <vPortExitCritical+0x50>)
 80063fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063fc:	4b07      	ldr	r3, [pc, #28]	@ (800641c <vPortExitCritical+0x50>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d105      	bne.n	8006410 <vPortExitCritical+0x44>
 8006404:	2300      	movs	r3, #0
 8006406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f383 8811 	msr	BASEPRI, r3
}
 800640e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	2000000c 	.word	0x2000000c

08006420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006420:	f3ef 8009 	mrs	r0, PSP
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	4b15      	ldr	r3, [pc, #84]	@ (8006480 <pxCurrentTCBConst>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	f01e 0f10 	tst.w	lr, #16
 8006430:	bf08      	it	eq
 8006432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643a:	6010      	str	r0, [r2, #0]
 800643c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006440:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006444:	f380 8811 	msr	BASEPRI, r0
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f7fe fe7c 	bl	800514c <vTaskSwitchContext>
 8006454:	f04f 0000 	mov.w	r0, #0
 8006458:	f380 8811 	msr	BASEPRI, r0
 800645c:	bc09      	pop	{r0, r3}
 800645e:	6819      	ldr	r1, [r3, #0]
 8006460:	6808      	ldr	r0, [r1, #0]
 8006462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006466:	f01e 0f10 	tst.w	lr, #16
 800646a:	bf08      	it	eq
 800646c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006470:	f380 8809 	msr	PSP, r0
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	f3af 8000 	nop.w

08006480 <pxCurrentTCBConst>:
 8006480:	20000c10 	.word	0x20000c10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop

08006488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	607b      	str	r3, [r7, #4]
}
 80064a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064a2:	f7fe fd99 	bl	8004fd8 <xTaskIncrementTick>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064ac:	4b06      	ldr	r3, [pc, #24]	@ (80064c8 <SysTick_Handler+0x40>)
 80064ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	2300      	movs	r3, #0
 80064b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	f383 8811 	msr	BASEPRI, r3
}
 80064be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064c0:	bf00      	nop
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	e000ed04 	.word	0xe000ed04

080064cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006500 <vPortSetupTimerInterrupt+0x34>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006504 <vPortSetupTimerInterrupt+0x38>)
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006508 <vPortSetupTimerInterrupt+0x3c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a0a      	ldr	r2, [pc, #40]	@ (800650c <vPortSetupTimerInterrupt+0x40>)
 80064e2:	fba2 2303 	umull	r2, r3, r2, r3
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	4a09      	ldr	r2, [pc, #36]	@ (8006510 <vPortSetupTimerInterrupt+0x44>)
 80064ea:	3b01      	subs	r3, #1
 80064ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064ee:	4b04      	ldr	r3, [pc, #16]	@ (8006500 <vPortSetupTimerInterrupt+0x34>)
 80064f0:	2207      	movs	r2, #7
 80064f2:	601a      	str	r2, [r3, #0]
}
 80064f4:	bf00      	nop
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	e000e010 	.word	0xe000e010
 8006504:	e000e018 	.word	0xe000e018
 8006508:	20000000 	.word	0x20000000
 800650c:	10624dd3 	.word	0x10624dd3
 8006510:	e000e014 	.word	0xe000e014

08006514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006514:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006524 <vPortEnableVFP+0x10>
 8006518:	6801      	ldr	r1, [r0, #0]
 800651a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800651e:	6001      	str	r1, [r0, #0]
 8006520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006522:	bf00      	nop
 8006524:	e000ed88 	.word	0xe000ed88

08006528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800652e:	f3ef 8305 	mrs	r3, IPSR
 8006532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b0f      	cmp	r3, #15
 8006538:	d915      	bls.n	8006566 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800653a:	4a18      	ldr	r2, [pc, #96]	@ (800659c <vPortValidateInterruptPriority+0x74>)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006544:	4b16      	ldr	r3, [pc, #88]	@ (80065a0 <vPortValidateInterruptPriority+0x78>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	7afa      	ldrb	r2, [r7, #11]
 800654a:	429a      	cmp	r2, r3
 800654c:	d20b      	bcs.n	8006566 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	607b      	str	r3, [r7, #4]
}
 8006560:	bf00      	nop
 8006562:	bf00      	nop
 8006564:	e7fd      	b.n	8006562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006566:	4b0f      	ldr	r3, [pc, #60]	@ (80065a4 <vPortValidateInterruptPriority+0x7c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800656e:	4b0e      	ldr	r3, [pc, #56]	@ (80065a8 <vPortValidateInterruptPriority+0x80>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d90b      	bls.n	800658e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	603b      	str	r3, [r7, #0]
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	e7fd      	b.n	800658a <vPortValidateInterruptPriority+0x62>
	}
 800658e:	bf00      	nop
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	e000e3f0 	.word	0xe000e3f0
 80065a0:	20000e38 	.word	0x20000e38
 80065a4:	e000ed0c 	.word	0xe000ed0c
 80065a8:	20000e3c 	.word	0x20000e3c

080065ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	@ 0x28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065b4:	2300      	movs	r3, #0
 80065b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065b8:	f7fe fc52 	bl	8004e60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065bc:	4b5c      	ldr	r3, [pc, #368]	@ (8006730 <pvPortMalloc+0x184>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065c4:	f000 f93c 	bl	8006840 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065c8:	4b5a      	ldr	r3, [pc, #360]	@ (8006734 <pvPortMalloc+0x188>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4013      	ands	r3, r2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f040 8095 	bne.w	8006700 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d01e      	beq.n	800661a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80065dc:	2208      	movs	r2, #8
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4413      	add	r3, r2
 80065e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d015      	beq.n	800661a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f023 0307 	bic.w	r3, r3, #7
 80065f4:	3308      	adds	r3, #8
 80065f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00b      	beq.n	800661a <pvPortMalloc+0x6e>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	617b      	str	r3, [r7, #20]
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	e7fd      	b.n	8006616 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d06f      	beq.n	8006700 <pvPortMalloc+0x154>
 8006620:	4b45      	ldr	r3, [pc, #276]	@ (8006738 <pvPortMalloc+0x18c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	429a      	cmp	r2, r3
 8006628:	d86a      	bhi.n	8006700 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800662a:	4b44      	ldr	r3, [pc, #272]	@ (800673c <pvPortMalloc+0x190>)
 800662c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800662e:	4b43      	ldr	r3, [pc, #268]	@ (800673c <pvPortMalloc+0x190>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006634:	e004      	b.n	8006640 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006638:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	429a      	cmp	r2, r3
 8006648:	d903      	bls.n	8006652 <pvPortMalloc+0xa6>
 800664a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f1      	bne.n	8006636 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006652:	4b37      	ldr	r3, [pc, #220]	@ (8006730 <pvPortMalloc+0x184>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006658:	429a      	cmp	r2, r3
 800665a:	d051      	beq.n	8006700 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2208      	movs	r2, #8
 8006662:	4413      	add	r3, r2
 8006664:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	1ad2      	subs	r2, r2, r3
 8006676:	2308      	movs	r3, #8
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	429a      	cmp	r2, r3
 800667c:	d920      	bls.n	80066c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800667e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4413      	add	r3, r2
 8006684:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <pvPortMalloc+0xfc>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	613b      	str	r3, [r7, #16]
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	e7fd      	b.n	80066a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066ba:	69b8      	ldr	r0, [r7, #24]
 80066bc:	f000 f922 	bl	8006904 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006738 <pvPortMalloc+0x18c>)
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006738 <pvPortMalloc+0x18c>)
 80066cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066ce:	4b1a      	ldr	r3, [pc, #104]	@ (8006738 <pvPortMalloc+0x18c>)
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006740 <pvPortMalloc+0x194>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d203      	bcs.n	80066e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066da:	4b17      	ldr	r3, [pc, #92]	@ (8006738 <pvPortMalloc+0x18c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a18      	ldr	r2, [pc, #96]	@ (8006740 <pvPortMalloc+0x194>)
 80066e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	4b13      	ldr	r3, [pc, #76]	@ (8006734 <pvPortMalloc+0x188>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	431a      	orrs	r2, r3
 80066ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80066f6:	4b13      	ldr	r3, [pc, #76]	@ (8006744 <pvPortMalloc+0x198>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3301      	adds	r3, #1
 80066fc:	4a11      	ldr	r2, [pc, #68]	@ (8006744 <pvPortMalloc+0x198>)
 80066fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006700:	f7fe fbbc 	bl	8004e7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00b      	beq.n	8006726 <pvPortMalloc+0x17a>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	60fb      	str	r3, [r7, #12]
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	e7fd      	b.n	8006722 <pvPortMalloc+0x176>
	return pvReturn;
 8006726:	69fb      	ldr	r3, [r7, #28]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3728      	adds	r7, #40	@ 0x28
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	2000aa88 	.word	0x2000aa88
 8006734:	2000aa9c 	.word	0x2000aa9c
 8006738:	2000aa8c 	.word	0x2000aa8c
 800673c:	2000aa80 	.word	0x2000aa80
 8006740:	2000aa90 	.word	0x2000aa90
 8006744:	2000aa94 	.word	0x2000aa94

08006748 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d04f      	beq.n	80067fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800675a:	2308      	movs	r3, #8
 800675c:	425b      	negs	r3, r3
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4413      	add	r3, r2
 8006762:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	4b25      	ldr	r3, [pc, #148]	@ (8006804 <vPortFree+0xbc>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4013      	ands	r3, r2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10b      	bne.n	800678e <vPortFree+0x46>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	60fb      	str	r3, [r7, #12]
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	e7fd      	b.n	800678a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00b      	beq.n	80067ae <vPortFree+0x66>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	60bb      	str	r3, [r7, #8]
}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	e7fd      	b.n	80067aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	4b14      	ldr	r3, [pc, #80]	@ (8006804 <vPortFree+0xbc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4013      	ands	r3, r2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01e      	beq.n	80067fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d11a      	bne.n	80067fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006804 <vPortFree+0xbc>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	43db      	mvns	r3, r3
 80067ce:	401a      	ands	r2, r3
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067d4:	f7fe fb44 	bl	8004e60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006808 <vPortFree+0xc0>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4413      	add	r3, r2
 80067e2:	4a09      	ldr	r2, [pc, #36]	@ (8006808 <vPortFree+0xc0>)
 80067e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067e6:	6938      	ldr	r0, [r7, #16]
 80067e8:	f000 f88c 	bl	8006904 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80067ec:	4b07      	ldr	r3, [pc, #28]	@ (800680c <vPortFree+0xc4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3301      	adds	r3, #1
 80067f2:	4a06      	ldr	r2, [pc, #24]	@ (800680c <vPortFree+0xc4>)
 80067f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80067f6:	f7fe fb41 	bl	8004e7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067fa:	bf00      	nop
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	2000aa9c 	.word	0x2000aa9c
 8006808:	2000aa8c 	.word	0x2000aa8c
 800680c:	2000aa98 	.word	0x2000aa98

08006810 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006810:	b480      	push	{r7}
 8006812:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8006814:	4b03      	ldr	r3, [pc, #12]	@ (8006824 <xPortGetFreeHeapSize+0x14>)
 8006816:	681b      	ldr	r3, [r3, #0]
}
 8006818:	4618      	mov	r0, r3
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	2000aa8c 	.word	0x2000aa8c

08006828 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8006828:	b480      	push	{r7}
 800682a:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 800682c:	4b03      	ldr	r3, [pc, #12]	@ (800683c <xPortGetMinimumEverFreeHeapSize+0x14>)
 800682e:	681b      	ldr	r3, [r3, #0]
}
 8006830:	4618      	mov	r0, r3
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	2000aa90 	.word	0x2000aa90

08006840 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006846:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800684a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800684c:	4b27      	ldr	r3, [pc, #156]	@ (80068ec <prvHeapInit+0xac>)
 800684e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00c      	beq.n	8006874 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3307      	adds	r3, #7
 800685e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0307 	bic.w	r3, r3, #7
 8006866:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	4a1f      	ldr	r2, [pc, #124]	@ (80068ec <prvHeapInit+0xac>)
 8006870:	4413      	add	r3, r2
 8006872:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006878:	4a1d      	ldr	r2, [pc, #116]	@ (80068f0 <prvHeapInit+0xb0>)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800687e:	4b1c      	ldr	r3, [pc, #112]	@ (80068f0 <prvHeapInit+0xb0>)
 8006880:	2200      	movs	r2, #0
 8006882:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	4413      	add	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800688c:	2208      	movs	r2, #8
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1a9b      	subs	r3, r3, r2
 8006892:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0307 	bic.w	r3, r3, #7
 800689a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4a15      	ldr	r2, [pc, #84]	@ (80068f4 <prvHeapInit+0xb4>)
 80068a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068a2:	4b14      	ldr	r3, [pc, #80]	@ (80068f4 <prvHeapInit+0xb4>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2200      	movs	r2, #0
 80068a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068aa:	4b12      	ldr	r3, [pc, #72]	@ (80068f4 <prvHeapInit+0xb4>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2200      	movs	r2, #0
 80068b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	1ad2      	subs	r2, r2, r3
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068c0:	4b0c      	ldr	r3, [pc, #48]	@ (80068f4 <prvHeapInit+0xb4>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	4a0a      	ldr	r2, [pc, #40]	@ (80068f8 <prvHeapInit+0xb8>)
 80068ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	4a09      	ldr	r2, [pc, #36]	@ (80068fc <prvHeapInit+0xbc>)
 80068d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068d8:	4b09      	ldr	r3, [pc, #36]	@ (8006900 <prvHeapInit+0xc0>)
 80068da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80068de:	601a      	str	r2, [r3, #0]
}
 80068e0:	bf00      	nop
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	20000e40 	.word	0x20000e40
 80068f0:	2000aa80 	.word	0x2000aa80
 80068f4:	2000aa88 	.word	0x2000aa88
 80068f8:	2000aa90 	.word	0x2000aa90
 80068fc:	2000aa8c 	.word	0x2000aa8c
 8006900:	2000aa9c 	.word	0x2000aa9c

08006904 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800690c:	4b28      	ldr	r3, [pc, #160]	@ (80069b0 <prvInsertBlockIntoFreeList+0xac>)
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e002      	b.n	8006918 <prvInsertBlockIntoFreeList+0x14>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	429a      	cmp	r2, r3
 8006920:	d8f7      	bhi.n	8006912 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	4413      	add	r3, r2
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	429a      	cmp	r2, r3
 8006932:	d108      	bne.n	8006946 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	441a      	add	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	441a      	add	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d118      	bne.n	800698c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	4b15      	ldr	r3, [pc, #84]	@ (80069b4 <prvInsertBlockIntoFreeList+0xb0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d00d      	beq.n	8006982 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	441a      	add	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	e008      	b.n	8006994 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006982:	4b0c      	ldr	r3, [pc, #48]	@ (80069b4 <prvInsertBlockIntoFreeList+0xb0>)
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	e003      	b.n	8006994 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	429a      	cmp	r2, r3
 800699a:	d002      	beq.n	80069a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	2000aa80 	.word	0x2000aa80
 80069b4:	2000aa88 	.word	0x2000aa88

080069b8 <_ZN9DebugTask7RunTaskEPv>:

  // Interrupt receive callback
  void InterruptRxData(uint8_t errors);

 protected:
  static void RunTask(void* pvParams) {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
    DebugTask::Inst().Run(pvParams);
 80069c0:	f7f9 fcc6 	bl	8000350 <_ZN9DebugTask4InstEv>
 80069c4:	4603      	mov	r3, r0
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 f869 	bl	8006aa0 <_ZN9DebugTask3RunEPv>
  }  // Static Task Interface, passes control to the instance Run();
 80069ce:	bf00      	nop
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <_ZN9DebugTaskC1Ev>:

/* Functions -----------------------------------------------------------------*/
/**
 * @brief Constructor, sets all member variables
 */
DebugTask::DebugTask()
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
    : Task(TASK_DEBUG_QUEUE_DEPTH_OBJS), kUart_(UART::Debug) {
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	210a      	movs	r1, #10
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fba9 	bl	800713c <_ZN4TaskC1Et>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	330c      	adds	r3, #12
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7f9 fd40 	bl	8000474 <_ZN16UARTReceiverBaseC1Ev>
 80069f4:	4a0e      	ldr	r2, [pc, #56]	@ (8006a30 <_ZN9DebugTaskC1Ev+0x58>)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006a34 <_ZN9DebugTaskC1Ev+0x5c>)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60da      	str	r2, [r3, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a0d      	ldr	r2, [pc, #52]	@ (8006a38 <_ZN9DebugTaskC1Ev+0x60>)
 8006a04:	625a      	str	r2, [r3, #36]	@ 0x24
  memset(debugBuffer, 0, sizeof(debugBuffer));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3310      	adds	r3, #16
 8006a0a:	2211      	movs	r2, #17
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 ffb6 	bl	8007980 <memset>
  debugMsgIdx = 0;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  isDebugMsgReady = false;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	080088e4 	.word	0x080088e4
 8006a34:	080088f4 	.word	0x080088f4
 8006a38:	200000b8 	.word	0x200000b8

08006a3c <_ZN9DebugTask8InitTaskEv>:

/**
 * @brief Init task for RTOS
 */
void DebugTask::InitTask() {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	6078      	str	r0, [r7, #4]
  // Make sure the task is not already initialized
  SOAR_ASSERT(rtTaskHandle == nullptr, "Cannot initialize Debug task twice");
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <_ZN9DebugTask8InitTaskEv+0x1c>
 8006a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8006a8c <_ZN9DebugTask8InitTaskEv+0x50>)
 8006a4e:	222e      	movs	r2, #46	@ 0x2e
 8006a50:	490f      	ldr	r1, [pc, #60]	@ (8006a90 <_ZN9DebugTask8InitTaskEv+0x54>)
 8006a52:	2000      	movs	r0, #0
 8006a54:	f000 fc02 	bl	800725c <_Z17cube_assert_debugbPKctS0_z>

  // Start the task
  BaseType_t rtValue = xTaskCreate(
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	9301      	str	r3, [sp, #4]
 8006a5e:	2302      	movs	r3, #2
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a68:	490a      	ldr	r1, [pc, #40]	@ (8006a94 <_ZN9DebugTask8InitTaskEv+0x58>)
 8006a6a:	480b      	ldr	r0, [pc, #44]	@ (8006a98 <_ZN9DebugTask8InitTaskEv+0x5c>)
 8006a6c:	f7fe f802 	bl	8004a74 <xTaskCreate>
 8006a70:	60f8      	str	r0, [r7, #12]
      (TaskFunction_t)DebugTask::RunTask, (const char*)"DebugTask",
      (uint16_t)TASK_DEBUG_STACK_DEPTH_WORDS, (void*)this,
      (UBaseType_t)TASK_DEBUG_PRIORITY, (TaskHandle_t*)&rtTaskHandle);

  // Ensure creation succeded
  SOAR_ASSERT(rtValue == pdPASS, "DebugTask::InitTask - xTaskCreate() failed");
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d005      	beq.n	8006a84 <_ZN9DebugTask8InitTaskEv+0x48>
 8006a78:	4b08      	ldr	r3, [pc, #32]	@ (8006a9c <_ZN9DebugTask8InitTaskEv+0x60>)
 8006a7a:	2237      	movs	r2, #55	@ 0x37
 8006a7c:	4904      	ldr	r1, [pc, #16]	@ (8006a90 <_ZN9DebugTask8InitTaskEv+0x54>)
 8006a7e:	2000      	movs	r0, #0
 8006a80:	f000 fbec 	bl	800725c <_Z17cube_assert_debugbPKctS0_z>
}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	0800841c 	.word	0x0800841c
 8006a90:	08008440 	.word	0x08008440
 8006a94:	0800845c 	.word	0x0800845c
 8006a98:	080069b9 	.word	0x080069b9
 8006a9c:	08008468 	.word	0x08008468

08006aa0 <_ZN9DebugTask3RunEPv>:

// TODO: Only run thread when appropriate GPIO pin pulled HIGH (or by define)
/**
 *    @brief Runcode for the DebugTask
 */
void DebugTask::Run(void* pvParams) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  // Arm the interrupt
  ReceiveData();
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f884 	bl	8006bb8 <_ZN9DebugTask11ReceiveDataEv>

  while (1) {
    Command cm;
 8006ab0:	f107 030c 	add.w	r3, r7, #12
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 f930 	bl	8006d1a <_ZN7CommandC1Ev>

    // Wait forever for a command
    qEvtQueue->ReceiveWait(cm);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f107 020c 	add.w	r2, r7, #12
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fb11 	bl	80070ec <_ZN5Queue11ReceiveWaitER7Command>

    // Process the command
    if (cm.GetCommand() == DATA_COMMAND &&
 8006aca:	f107 030c 	add.w	r3, r7, #12
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7f9 fcb7 	bl	8000442 <_ZNK7Command10GetCommandEv>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d109      	bne.n	8006aee <_ZN9DebugTask3RunEPv+0x4e>
        cm.GetTaskCommand() == EVENT_DEBUG_RX_COMPLETE) {
 8006ada:	f107 030c 	add.w	r3, r7, #12
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7f9 fcbb 	bl	800045a <_ZNK7Command14GetTaskCommandEv>
 8006ae4:	4603      	mov	r3, r0
    if (cm.GetCommand() == DATA_COMMAND &&
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d101      	bne.n	8006aee <_ZN9DebugTask3RunEPv+0x4e>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e000      	b.n	8006af0 <_ZN9DebugTask3RunEPv+0x50>
 8006aee:	2300      	movs	r3, #0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d005      	beq.n	8006b00 <_ZN9DebugTask3RunEPv+0x60>
      HandleDebugMessage((const char*)debugBuffer);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3310      	adds	r3, #16
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f806 	bl	8006b0c <_ZN9DebugTask18HandleDebugMessageEPKc>
    }

    cm.Reset();
 8006b00:	f107 030c 	add.w	r3, r7, #12
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 f9a1 	bl	8006e4c <_ZN7Command5ResetEv>
  }
 8006b0a:	e7d1      	b.n	8006ab0 <_ZN9DebugTask3RunEPv+0x10>

08006b0c <_ZN9DebugTask18HandleDebugMessageEPKc>:

/**
 * @brief Handles debug messages, assumes msg is null terminated
 * @param msg Message to read, must be null termianted
 */
void DebugTask::HandleDebugMessage(const char* msg) {
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  //-- SYSTEM / CHAR COMMANDS -- (Must be last)
  if (strcmp(msg, "sysreset") == 0) {
 8006b16:	491f      	ldr	r1, [pc, #124]	@ (8006b94 <_ZN9DebugTask18HandleDebugMessageEPKc+0x88>)
 8006b18:	6838      	ldr	r0, [r7, #0]
 8006b1a:	f7f9 fb59 	bl	80001d0 <strcmp>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d106      	bne.n	8006b32 <_ZN9DebugTask18HandleDebugMessageEPKc+0x26>
    // Reset the system
    SOAR_ASSERT(false, "System reset requested");
 8006b24:	4b1c      	ldr	r3, [pc, #112]	@ (8006b98 <_ZN9DebugTask18HandleDebugMessageEPKc+0x8c>)
 8006b26:	225a      	movs	r2, #90	@ 0x5a
 8006b28:	491c      	ldr	r1, [pc, #112]	@ (8006b9c <_ZN9DebugTask18HandleDebugMessageEPKc+0x90>)
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	f000 fb96 	bl	800725c <_Z17cube_assert_debugbPKctS0_z>
 8006b30:	e024      	b.n	8006b7c <_ZN9DebugTask18HandleDebugMessageEPKc+0x70>
  } else if (strcmp(msg, "sysinfo") == 0) {
 8006b32:	491b      	ldr	r1, [pc, #108]	@ (8006ba0 <_ZN9DebugTask18HandleDebugMessageEPKc+0x94>)
 8006b34:	6838      	ldr	r0, [r7, #0]
 8006b36:	f7f9 fb4b 	bl	80001d0 <strcmp>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d118      	bne.n	8006b72 <_ZN9DebugTask18HandleDebugMessageEPKc+0x66>
    // Print message
    SOAR_PRINT("\n\n-- CUBE SYSTEM --\n");
 8006b40:	4818      	ldr	r0, [pc, #96]	@ (8006ba4 <_ZN9DebugTask18HandleDebugMessageEPKc+0x98>)
 8006b42:	f000 fb2d 	bl	80071a0 <_Z10cube_printPKcz>
    SOAR_PRINT("Current System Free Heap: %d Bytes\n", xPortGetFreeHeapSize());
 8006b46:	f7ff fe63 	bl	8006810 <xPortGetFreeHeapSize>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4816      	ldr	r0, [pc, #88]	@ (8006ba8 <_ZN9DebugTask18HandleDebugMessageEPKc+0x9c>)
 8006b50:	f000 fb26 	bl	80071a0 <_Z10cube_printPKcz>
    SOAR_PRINT("Lowest Ever Free Heap: %d Bytes\n",
 8006b54:	f7ff fe68 	bl	8006828 <xPortGetMinimumEverFreeHeapSize>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4813      	ldr	r0, [pc, #76]	@ (8006bac <_ZN9DebugTask18HandleDebugMessageEPKc+0xa0>)
 8006b5e:	f000 fb1f 	bl	80071a0 <_Z10cube_printPKcz>
               xPortGetMinimumEverFreeHeapSize());
    SOAR_PRINT("Debug Task Runtime  \t: %d ms\n\n",
 8006b62:	f7fe fa29 	bl	8004fb8 <xTaskGetTickCount>
 8006b66:	4603      	mov	r3, r0
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4811      	ldr	r0, [pc, #68]	@ (8006bb0 <_ZN9DebugTask18HandleDebugMessageEPKc+0xa4>)
 8006b6c:	f000 fb18 	bl	80071a0 <_Z10cube_printPKcz>
 8006b70:	e004      	b.n	8006b7c <_ZN9DebugTask18HandleDebugMessageEPKc+0x70>
               TICKS_TO_MS(xTaskGetTickCount()));
  } else {
    // Single character command, or unknown command
    switch (msg[0]) {
      default:
        SOAR_PRINT("Debug, unknown command: %s\n", msg);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	480f      	ldr	r0, [pc, #60]	@ (8006bb4 <_ZN9DebugTask18HandleDebugMessageEPKc+0xa8>)
 8006b76:	f000 fb13 	bl	80071a0 <_Z10cube_printPKcz>
        break;
 8006b7a:	bf00      	nop
    }
  }

  // We've read the data, clear the buffer
  debugMsgIdx = 0;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  isDebugMsgReady = false;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	08008494 	.word	0x08008494
 8006b98:	080084a0 	.word	0x080084a0
 8006b9c:	08008440 	.word	0x08008440
 8006ba0:	080084b8 	.word	0x080084b8
 8006ba4:	080084c0 	.word	0x080084c0
 8006ba8:	080084d8 	.word	0x080084d8
 8006bac:	080084fc 	.word	0x080084fc
 8006bb0:	08008520 	.word	0x08008520
 8006bb4:	08008540 	.word	0x08008540

08006bb8 <_ZN9DebugTask11ReceiveDataEv>:

/**
 * @brief Receive data, currently receives by arming interrupt
 */
bool DebugTask::ReceiveData() { return kUart_->ReceiveIT(&debugRxChar, this); }
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f103 0123 	add.w	r1, r3, #35	@ 0x23
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f000 fdd7 	bl	8007782 <_ZN10UARTDriver9ReceiveITEPhP16UARTReceiverBase>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <_ZN9DebugTask15InterruptRxDataEh>:

/**
 * @brief Receive data to the buffer
 * @return Whether the debugBuffer is ready or not
 */
void DebugTask::InterruptRxData(uint8_t errors) {
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b086      	sub	sp, #24
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	460b      	mov	r3, r1
 8006be8:	70fb      	strb	r3, [r7, #3]
  // If we already have an unprocessed debug message, ignore this byte
  if (!isDebugMsgReady) {
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006bf0:	f083 0301 	eor.w	r3, r3, #1
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d049      	beq.n	8006c8e <_ZN9DebugTask15InterruptRxDataEh+0xb0>
    // Check byte for end of message - note if using termite you must turn on
    // append CR
    if (debugRxChar == '\r' || debugMsgIdx == DEBUG_RX_BUFFER_SZ_BYTES) {
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006c00:	2b0d      	cmp	r3, #13
 8006c02:	d004      	beq.n	8006c0e <_ZN9DebugTask15InterruptRxDataEh+0x30>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006c0a:	2b10      	cmp	r3, #16
 8006c0c:	d12d      	bne.n	8006c6a <_ZN9DebugTask15InterruptRxDataEh+0x8c>
      // Null terminate and process
      debugBuffer[debugMsgIdx++] = '\0';
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	b2d1      	uxtb	r1, r2
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	f882 1021 	strb.w	r1, [r2, #33]	@ 0x21
 8006c1e:	461a      	mov	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4413      	add	r3, r2
 8006c24:	2200      	movs	r2, #0
 8006c26:	741a      	strb	r2, [r3, #16]
      isDebugMsgReady = true;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

      // Notify the debug task
      Command cm(DATA_COMMAND, EVENT_DEBUG_RX_COMPLETE);
 8006c30:	f107 0308 	add.w	r3, r7, #8
 8006c34:	2201      	movs	r2, #1
 8006c36:	2102      	movs	r1, #2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 f888 	bl	8006d4e <_ZN7CommandC1E15GLOBAL_COMMANDSt>
      bool res = qEvtQueue->SendFromISR(cm);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f107 0208 	add.w	r2, r7, #8
 8006c46:	4611      	mov	r1, r2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fa08 	bl	800705e <_ZN5Queue11SendFromISRER7Command>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	75fb      	strb	r3, [r7, #23]

      // If we failed to send the event, we should reset the buffer, that way
      // DebugTask doesn't stall
      if (res == false) {
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d119      	bne.n	8006c8c <_ZN9DebugTask15InterruptRxDataEh+0xae>
        debugMsgIdx = 0;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        isDebugMsgReady = false;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      }
    } else {
 8006c68:	e010      	b.n	8006c8c <_ZN9DebugTask15InterruptRxDataEh+0xae>
      debugBuffer[debugMsgIdx++] = debugRxChar;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 1023 	ldrb.w	r1, [r3, #35]	@ 0x23
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	b2d0      	uxtb	r0, r2
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	f882 0021 	strb.w	r0, [r2, #33]	@ 0x21
 8006c80:	461a      	mov	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4413      	add	r3, r2
 8006c86:	460a      	mov	r2, r1
 8006c88:	741a      	strb	r2, [r3, #16]
 8006c8a:	e000      	b.n	8006c8e <_ZN9DebugTask15InterruptRxDataEh+0xb0>
    } else {
 8006c8c:	bf00      	nop
    }
  }

  // Re-arm the interrupt
  ReceiveData();
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff ff92 	bl	8006bb8 <_ZN9DebugTask11ReceiveDataEv>
}
 8006c94:	bf00      	nop
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <_ZThn12_N9DebugTask15InterruptRxDataEh>:
  void InterruptRxData(uint8_t errors);
 8006c9c:	f1a0 000c 	sub.w	r0, r0, #12
 8006ca0:	f7ff bf9d 	b.w	8006bde <_ZN9DebugTask15InterruptRxDataEh>

08006ca4 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8006ca8:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8006caa:	4618      	mov	r0, r3
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
    return memory_order(int(__m) & int(__mod));
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4013      	ands	r3, r2
  }
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <_Z11cube_mallocm>:
/**
 * @brief Malloc inline function, wraps malloc for multi-platform support, asserts successful allocation
 * @param size Size of data to malloc in bytes
 * @return Returns the pointer to the allocated data
*/
inline uint8_t* cube_malloc(uint32_t size) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
#ifdef COMPUTER_ENVIRONMENT
    uint8_t* ret = (uint8_t*)malloc(size);
#else
    uint8_t* ret = (uint8_t*)pvPortMalloc(size);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff fc67 	bl	80065ac <pvPortMalloc>
 8006cde:	60f8      	str	r0, [r7, #12]
#endif
    SOAR_ASSERT(ret, "cube_malloc failed");
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d105      	bne.n	8006cf2 <_Z11cube_mallocm+0x22>
 8006ce6:	4b05      	ldr	r3, [pc, #20]	@ (8006cfc <_Z11cube_mallocm+0x2c>)
 8006ce8:	2247      	movs	r2, #71	@ 0x47
 8006cea:	4905      	ldr	r1, [pc, #20]	@ (8006d00 <_Z11cube_mallocm+0x30>)
 8006cec:	2000      	movs	r0, #0
 8006cee:	f000 fab5 	bl	800725c <_Z17cube_assert_debugbPKctS0_z>
    return ret;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	080085b0 	.word	0x080085b0
 8006d00:	080085c4 	.word	0x080085c4

08006d04 <_Z9cube_freePv>:

/**
 * @brief Free inline function, wraps free for multi-platform support
 * @param ptr Pointer to the data to free
 */
inline void cube_free(void* ptr) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
#ifdef COMPUTER_ENVIRONMENT
    free(ptr);
#else
    vPortFree(ptr);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff fd1b 	bl	8006748 <vPortFree>
#endif
}
 8006d12:	bf00      	nop
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <_ZN7CommandC1Ev>:
/* Function Implementation ------------------------------------------------------------------*/

/**
 * @brief Default constructor for Command
*/
Command::Command(void)
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
{
    command = COMMAND_NONE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	701a      	strb	r2, [r3, #0]
    taskCommand = 0;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	805a      	strh	r2, [r3, #2]
    data = nullptr;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	605a      	str	r2, [r3, #4]
    dataSize = 0;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	811a      	strh	r2, [r3, #8]
    bShouldFreeData = false;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	729a      	strb	r2, [r3, #10]
}
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <_ZN7CommandC1E15GLOBAL_COMMANDSt>:
/**
 * @brief Constructor with GLOBAL_COMMANDS and taskCommand params
 * @param command GLOBAL_COMMANDS param to initiate command with
 * @param taskCommand taskCommand param to initiate command with
*/
Command::Command(GLOBAL_COMMANDS command, uint16_t taskCommand)
 8006d4e:	b480      	push	{r7}
 8006d50:	b083      	sub	sp, #12
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	460b      	mov	r3, r1
 8006d58:	70fb      	strb	r3, [r7, #3]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	803b      	strh	r3, [r7, #0]
{
    this->command = command;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	78fa      	ldrb	r2, [r7, #3]
 8006d62:	701a      	strb	r2, [r3, #0]
    this->taskCommand = taskCommand;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	883a      	ldrh	r2, [r7, #0]
 8006d68:	805a      	strh	r2, [r3, #2]
    data = nullptr;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	605a      	str	r2, [r3, #4]
    dataSize = 0;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	811a      	strh	r2, [r3, #8]
    bShouldFreeData = false;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	729a      	strb	r2, [r3, #10]
}
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <_ZN7Command12AllocateDataEt>:
 * @brief Dynamically allocates memory for the command with the given data size
 * @param dataSize Size of array to allocate
 * @return Pointer to data on success, nullptr on failure (mem already allocated)
*/
uint8_t* Command::AllocateData(uint16_t dataSize)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	807b      	strh	r3, [r7, #2]
    // If we don't have anything allocated, allocate and return success
    if (this->data == nullptr && !bShouldFreeData) {
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d126      	bne.n	8006dee <_ZN7Command12AllocateDataEt+0x62>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	7a9b      	ldrb	r3, [r3, #10]
 8006da4:	f083 0301 	eor.w	r3, r3, #1
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d01f      	beq.n	8006dee <_ZN7Command12AllocateDataEt+0x62>
        this->data = cube_malloc(dataSize);
 8006dae:	887b      	ldrh	r3, [r7, #2]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff ff8d 	bl	8006cd0 <_Z11cube_mallocm>
 8006db6:	4602      	mov	r2, r0
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	605a      	str	r2, [r3, #4]
        this->bShouldFreeData = true;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	729a      	strb	r2, [r3, #10]
        this->dataSize = dataSize;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	887a      	ldrh	r2, [r7, #2]
 8006dc6:	811a      	strh	r2, [r3, #8]
        statAllocationCounter += 1;
 8006dc8:	2101      	movs	r1, #1
 8006dca:	480b      	ldr	r0, [pc, #44]	@ (8006df8 <_ZN7Command12AllocateDataEt+0x6c>)
 8006dcc:	f000 f872 	bl	8006eb4 <_ZNSt13__atomic_baseItEpLEt>

        //TODO: May want to print out whenever we have an imbalance in statAllocationCounter by more than ~5 or so.
        SOAR_ASSERT(statAllocationCounter < MAX_NUMBER_OF_COMMAND_ALLOCATIONS);
 8006dd0:	4809      	ldr	r0, [pc, #36]	@ (8006df8 <_ZN7Command12AllocateDataEt+0x6c>)
 8006dd2:	f000 f889 	bl	8006ee8 <_ZNKSt13__atomic_baseItEcvtEv>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b63      	cmp	r3, #99	@ 0x63
 8006dda:	d905      	bls.n	8006de8 <_ZN7Command12AllocateDataEt+0x5c>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	2267      	movs	r2, #103	@ 0x67
 8006de0:	4906      	ldr	r1, [pc, #24]	@ (8006dfc <_ZN7Command12AllocateDataEt+0x70>)
 8006de2:	2000      	movs	r0, #0
 8006de4:	f000 fa3a 	bl	800725c <_Z17cube_assert_debugbPKctS0_z>
        return this->data;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	e000      	b.n	8006df0 <_ZN7Command12AllocateDataEt+0x64>
    }
    return nullptr;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	2000aaa0 	.word	0x2000aaa0
 8006dfc:	08008628 	.word	0x08008628

08006e00 <_ZN7Command17CopyDataToCommandEPht>:

/**
 * @brief Copies data from the source array into memory owned by Command and sets the internal data pointer to the new array
 */
bool Command::CopyDataToCommand(uint8_t* dataSrc, uint16_t size)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80fb      	strh	r3, [r7, #6]
    // If we successfully allocate, copy the data and return success
    if(this->AllocateData(size)
 8006e0e:	88fb      	ldrh	r3, [r7, #6]
 8006e10:	4619      	mov	r1, r3
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f7ff ffba 	bl	8006d8c <_ZN7Command12AllocateDataEt>
 8006e18:	4603      	mov	r3, r0
        && this->data != nullptr) {
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <_ZN7Command17CopyDataToCommandEPht+0x2a>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <_ZN7Command17CopyDataToCommandEPht+0x2a>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e000      	b.n	8006e2c <_ZN7Command17CopyDataToCommandEPht+0x2c>
 8006e2a:	2300      	movs	r3, #0
    if(this->AllocateData(size)
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <_ZN7Command17CopyDataToCommandEPht+0x42>
        memcpy(this->data, dataSrc, size);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	88fa      	ldrh	r2, [r7, #6]
 8006e36:	68b9      	ldr	r1, [r7, #8]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 fe33 	bl	8007aa4 <memcpy>
        return true;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e000      	b.n	8006e44 <_ZN7Command17CopyDataToCommandEPht+0x44>
    }

    return false;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <_ZN7Command5ResetEv>:

/**
 * @brief Resets command, equivalent of a destructor that must be called, counts allocations and deallocations, asserts an error if the allocation count is too high
*/
void Command::Reset()
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
    if(bShouldFreeData && data != nullptr) {
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	7a9b      	ldrb	r3, [r3, #10]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d012      	beq.n	8006e82 <_ZN7Command5ResetEv+0x36>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00e      	beq.n	8006e82 <_ZN7Command5ResetEv+0x36>
        cube_free(data);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff ff4b 	bl	8006d04 <_Z9cube_freePv>
        statAllocationCounter -= 1;
 8006e6e:	2101      	movs	r1, #1
 8006e70:	4806      	ldr	r0, [pc, #24]	@ (8006e8c <_ZN7Command5ResetEv+0x40>)
 8006e72:	f000 f86b 	bl	8006f4c <_ZNSt13__atomic_baseItEmIEt>
		data = nullptr;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	605a      	str	r2, [r3, #4]
        bShouldFreeData = false;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	729a      	strb	r2, [r3, #10]
    }
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	2000aaa0 	.word	0x2000aaa0

08006e90 <_ZNK7Command11GetDataSizeEv>:
/**
 * @brief Getter for Data size
 * @return data size if data is allocated, otherwise returns 0 
*/
uint16_t Command::GetDataSize() const
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
    if (data == nullptr)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <_ZNK7Command11GetDataSizeEv+0x14>
        return 0;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	e001      	b.n	8006ea8 <_ZNK7Command11GetDataSizeEv+0x18>
    return dataSize;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	891b      	ldrh	r3, [r3, #8]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <_ZNSt13__atomic_baseItEpLEt>:
      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator+=(__int_type __i) noexcept
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	807b      	strh	r3, [r7, #2]
      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	887a      	ldrh	r2, [r7, #2]
 8006ec4:	f3bf 8f5b 	dmb	ish
 8006ec8:	e8d3 1f5f 	ldrexh	r1, [r3]
 8006ecc:	4411      	add	r1, r2
 8006ece:	e8c3 1f50 	strexh	r0, r1, [r3]
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d1f8      	bne.n	8006ec8 <_ZNSt13__atomic_baseItEpLEt+0x14>
 8006ed6:	f3bf 8f5b 	dmb	ish
 8006eda:	b28b      	uxth	r3, r1
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <_ZNKSt13__atomic_baseItEcvtEv>:
      operator __int_type() const noexcept
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	2305      	movs	r3, #5
 8006ef6:	613b      	str	r3, [r7, #16]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 8006ef8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006efc:	6938      	ldr	r0, [r7, #16]
 8006efe:	f7ff fed9 	bl	8006cb4 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8006f02:	60f8      	str	r0, [r7, #12]
	__glibcxx_assert(__b != memory_order_release);
 8006f04:	f7ff fece 	bl	8006ca4 <_ZSt23__is_constant_evaluatedv>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d004      	beq.n	8006f18 <_ZNKSt13__atomic_baseItEcvtEv+0x30>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d101      	bne.n	8006f18 <_ZNKSt13__atomic_baseItEcvtEv+0x30>
 8006f14:	2301      	movs	r3, #1
 8006f16:	e000      	b.n	8006f1a <_ZNKSt13__atomic_baseItEcvtEv+0x32>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 8006f1c:	f7ff fec2 	bl	8006ca4 <_ZSt23__is_constant_evaluatedv>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d004      	beq.n	8006f30 <_ZNKSt13__atomic_baseItEcvtEv+0x48>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d101      	bne.n	8006f30 <_ZNKSt13__atomic_baseItEcvtEv+0x48>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <_ZNKSt13__atomic_baseItEcvtEv+0x4a>
 8006f30:	2300      	movs	r3, #0
 8006f32:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f3bf 8f5b 	dmb	ish
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	f3bf 8f5b 	dmb	ish
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	bf00      	nop
      { return load(); }
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <_ZNSt13__atomic_baseItEmIEt>:
      operator-=(__int_type __i) noexcept
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	807b      	strh	r3, [r7, #2]
      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	887a      	ldrh	r2, [r7, #2]
 8006f5c:	f3bf 8f5b 	dmb	ish
 8006f60:	e8d3 1f5f 	ldrexh	r1, [r3]
 8006f64:	eba1 0102 	sub.w	r1, r1, r2
 8006f68:	e8c3 1f50 	strexh	r0, r1, [r3]
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d1f7      	bne.n	8006f60 <_ZNSt13__atomic_baseItEmIEt+0x14>
 8006f70:	f3bf 8f5b 	dmb	ish
 8006f74:	b28b      	uxth	r3, r1
 8006f76:	4618      	mov	r0, r3
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
	...

08006f84 <_ZN5MutexC1Ev>:
#include "semphr.h"

/**
 * @brief Constructor for the Mutex class.
 */
Mutex::Mutex()
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
{
    rtSemaphoreHandle = xSemaphoreCreateMutex();
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	f7fc ff92 	bl	8003eb6 <xQueueCreateMutex>
 8006f92:	4602      	mov	r2, r0
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	601a      	str	r2, [r3, #0]

    SOAR_ASSERT(rtSemaphoreHandle != NULL, "Semaphore creation failed.");
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d105      	bne.n	8006fac <_ZN5MutexC1Ev+0x28>
 8006fa0:	4b05      	ldr	r3, [pc, #20]	@ (8006fb8 <_ZN5MutexC1Ev+0x34>)
 8006fa2:	2215      	movs	r2, #21
 8006fa4:	4905      	ldr	r1, [pc, #20]	@ (8006fbc <_ZN5MutexC1Ev+0x38>)
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	f000 f958 	bl	800725c <_Z17cube_assert_debugbPKctS0_z>
}
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	08008644 	.word	0x08008644
 8006fbc:	08008660 	.word	0x08008660

08006fc0 <_ZN5MutexD1Ev>:


/**
 * @brief Destructor for the Mutex class.
 */
Mutex::~Mutex()
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
{
    vSemaphoreDelete(rtSemaphoreHandle);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fd fb1d 	bl	800460c <vQueueDelete>
}
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <_ZN5Mutex4LockEm>:
 * @brief This function is used to lock the Mutex.
 * @param timeout_ms The time to wait for the Mutex before it fails. If timeout_ms is not provided, the function will wait indefinitely.
 * @return True on success, false on failure.
*/
bool Mutex::Lock(uint32_t timeout_ms)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
    return xSemaphoreTake(rtSemaphoreHandle, MS_TO_TICKS(timeout_ms)) == pdTRUE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fd f9fd 	bl	80043ec <xQueueSemaphoreTake>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	bf0c      	ite	eq
 8006ff8:	2301      	moveq	r3, #1
 8006ffa:	2300      	movne	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <_ZN5Mutex6UnlockEv>:
/**
 * @brief This function will attempt to unlock the mutex
 * @return True on success (mutex unlocked) false in failure (mutex was not unlocked)
*/
bool Mutex::Unlock()
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
    return xSemaphoreGive(rtSemaphoreHandle) == pdTRUE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	2300      	movs	r3, #0
 8007014:	2200      	movs	r2, #0
 8007016:	2100      	movs	r1, #0
 8007018:	f7fc ff66 	bl	8003ee8 <xQueueGenericSend>
 800701c:	4603      	mov	r3, r0
 800701e:	2b01      	cmp	r3, #1
 8007020:	bf0c      	ite	eq
 8007022:	2301      	moveq	r3, #1
 8007024:	2300      	movne	r3, #0
 8007026:	b2db      	uxtb	r3, r3
}
 8007028:	4618      	mov	r0, r3
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <_ZN5QueueC1Et>:

/**
 * @brief Constructor with depth for the Queue class
 * @param depth Queue depth
*/
Queue::Queue(uint16_t depth)
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	807b      	strh	r3, [r7, #2]
{
    //Initialize RTOS Queue handle with given depth
    rtQueueHandle = xQueueCreate(depth, sizeof(Command));
 800703c:	887b      	ldrh	r3, [r7, #2]
 800703e:	2200      	movs	r2, #0
 8007040:	210c      	movs	r1, #12
 8007042:	4618      	mov	r0, r3
 8007044:	f7fc fec3 	bl	8003dce <xQueueGenericCreate>
 8007048:	4602      	mov	r2, r0
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	601a      	str	r2, [r3, #0]
    queueDepth = depth;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	887a      	ldrh	r2, [r7, #2]
 8007052:	809a      	strh	r2, [r3, #4]
}
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <_ZN5Queue11SendFromISRER7Command>:
 * @brief Sends a command object to the queue, safe to call from ISR
 * @param command Command object reference to send
 * @return true on success, false on failure (queue full)
*/
bool Queue::SendFromISR(Command& command)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b082      	sub	sp, #8
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	6039      	str	r1, [r7, #0]
    //Note: There NULL param here could be used to wake a task right after after exiting the ISR
    if (xQueueSendFromISR(rtQueueHandle, &command, NULL) == pdPASS)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6818      	ldr	r0, [r3, #0]
 800706c:	2300      	movs	r3, #0
 800706e:	2200      	movs	r2, #0
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	f7fd f83b 	bl	80040ec <xQueueGenericSendFromISR>
 8007076:	4603      	mov	r3, r0
 8007078:	2b01      	cmp	r3, #1
 800707a:	bf0c      	ite	eq
 800707c:	2301      	moveq	r3, #1
 800707e:	2300      	movne	r3, #0
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <_ZN5Queue11SendFromISRER7Command+0x2c>
        return true;
 8007086:	2301      	movs	r3, #1
 8007088:	e003      	b.n	8007092 <_ZN5Queue11SendFromISRER7Command+0x34>

    command.Reset();
 800708a:	6838      	ldr	r0, [r7, #0]
 800708c:	f7ff fede 	bl	8006e4c <_ZN7Command5ResetEv>

    return false;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <_ZN5Queue4SendER7Commandb>:
 * 
 * //TODO: It may be possible to have this automatically set the command to not free data externally 
 * as we've "passed" control of the data over, which might let us use a destructor to free the data  
*/
bool Queue::Send(Command& command, bool reportFull)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	71fb      	strb	r3, [r7, #7]
    if (xQueueSend(rtQueueHandle, &command, DEFAULT_QUEUE_SEND_WAIT_TICKS) == pdPASS)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	2300      	movs	r3, #0
 80070b0:	220f      	movs	r2, #15
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	f7fc ff18 	bl	8003ee8 <xQueueGenericSend>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	bf0c      	ite	eq
 80070be:	2301      	moveq	r3, #1
 80070c0:	2300      	movne	r3, #0
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <_ZN5Queue4SendER7Commandb+0x30>
        return true;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e009      	b.n	80070e0 <_ZN5Queue4SendER7Commandb+0x44>

    if (reportFull) SOAR_PRINT("Could not send data to queue!\n");
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <_ZN5Queue4SendER7Commandb+0x3c>
 80070d2:	4805      	ldr	r0, [pc, #20]	@ (80070e8 <_ZN5Queue4SendER7Commandb+0x4c>)
 80070d4:	f000 f864 	bl	80071a0 <_Z10cube_printPKcz>

    command.Reset();
 80070d8:	68b8      	ldr	r0, [r7, #8]
 80070da:	f7ff feb7 	bl	8006e4c <_ZN7Command5ResetEv>

    return false;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	080086a4 	.word	0x080086a4

080070ec <_ZN5Queue11ReceiveWaitER7Command>:
 * @brief Polls queue with specific timeout, blocks forever
 * @param cm Command object to copy received data into
 * @return TRUE if we received a command, FALSE otherwise (should rarely return false)
*/
bool Queue::ReceiveWait(Command& cm)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
    if (xQueueReceive(rtQueueHandle, &cm, HAL_MAX_DELAY) == pdTRUE) {
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f7fd f891 	bl	8004228 <xQueueReceive>
 8007106:	4603      	mov	r3, r0
 8007108:	2b01      	cmp	r3, #1
 800710a:	bf0c      	ite	eq
 800710c:	2301      	moveq	r3, #1
 800710e:	2300      	movne	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <_ZN5Queue11ReceiveWaitER7Command+0x2e>
        return true;
 8007116:	2301      	movs	r3, #1
 8007118:	e000      	b.n	800711c <_ZN5Queue11ReceiveWaitER7Command+0x30>
    }
    return false;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <_Znwj>:

/* Other ------------------------------------------------------------------*/
// Override the new and delete operator to ensure heap4 is used for dynamic memory allocation
inline void* operator new(size_t size) { return cube_malloc(size); }
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff fdcf 	bl	8006cd0 <_Z11cube_mallocm>
 8007132:	4603      	mov	r3, r0
 8007134:	4618      	mov	r0, r3
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <_ZN4TaskC1Et>:

/**
 * @brief Constructor with queue depth
 * @param depth Optionally 0, uses the given depth for the event queue
*/
Task::Task(uint16_t depth)
 800713c:	b590      	push	{r4, r7, lr}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	807b      	strh	r3, [r7, #2]
 8007148:	4a0e      	ldr	r2, [pc, #56]	@ (8007184 <_ZN4TaskC1Et+0x48>)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	601a      	str	r2, [r3, #0]
{
    if (depth == 0)
 800714e:	887b      	ldrh	r3, [r7, #2]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d103      	bne.n	800715c <_ZN4TaskC1Et+0x20>
        qEvtQueue = nullptr;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	609a      	str	r2, [r3, #8]
 800715a:	e00b      	b.n	8007174 <_ZN4TaskC1Et+0x38>
    else
        qEvtQueue = new Queue(depth);
 800715c:	2008      	movs	r0, #8
 800715e:	f7ff ffe1 	bl	8007124 <_Znwj>
 8007162:	4603      	mov	r3, r0
 8007164:	461c      	mov	r4, r3
 8007166:	887b      	ldrh	r3, [r7, #2]
 8007168:	4619      	mov	r1, r3
 800716a:	4620      	mov	r0, r4
 800716c:	f7ff ff60 	bl	8007030 <_ZN5QueueC1Et>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	609c      	str	r4, [r3, #8]
    rtTaskHandle = nullptr;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	605a      	str	r2, [r3, #4]
}
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	bd90      	pop	{r4, r7, pc}
 8007184:	08008900 	.word	0x08008900

08007188 <_ZNK4Task13GetEventQueueEv>:
    Task(void);
    Task(uint16_t depth);

    virtual void InitTask() = 0;

    Queue* GetEventQueue() const { return qEvtQueue; }
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <_Z10cube_printPKcz>:
* @brief Variadic print function, sends a command packet to the queue
* @param str String to print with printf style formatting
* @param ... Additional arguments to print if assertion fails, in same format as printf
*/
void cube_print(const char* str, ...)
{
 80071a0:	b40f      	push	{r0, r1, r2, r3}
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b0b6      	sub	sp, #216	@ 0xd8
 80071a6:	af00      	add	r7, sp, #0
#ifndef DISABLE_DEBUG
    //Try to take the VA list mutex
    if (Global::vaListMutex.Lock(DEBUG_TAKE_MAX_TIME_MS)) {
 80071a8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80071ac:	4828      	ldr	r0, [pc, #160]	@ (8007250 <_Z10cube_printPKcz+0xb0>)
 80071ae:	f7ff ff15 	bl	8006fdc <_ZN5Mutex4LockEm>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d03e      	beq.n	8007236 <_Z10cube_printPKcz+0x96>
        // If we have a message, and can use VA list, extract the string into a new buffer, and null terminate it
        uint8_t str_buffer[DEBUG_PRINT_MAX_SIZE] = {};
 80071b8:	1d3b      	adds	r3, r7, #4
 80071ba:	22c0      	movs	r2, #192	@ 0xc0
 80071bc:	2100      	movs	r1, #0
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fbde 	bl	8007980 <memset>
        va_list argument_list;
        va_start(argument_list, str);
 80071c4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80071c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        int16_t buflen = vsnprintf(reinterpret_cast<char*>(str_buffer), sizeof(str_buffer) - 1, str, argument_list);
 80071cc:	1d38      	adds	r0, r7, #4
 80071ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80071d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80071d6:	21bf      	movs	r1, #191	@ 0xbf
 80071d8:	f000 fbc4 	bl	8007964 <vsniprintf>
 80071dc:	4603      	mov	r3, r0
 80071de:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
        va_end(argument_list);
        if (buflen > 0) {
 80071e2:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	@ 0xd6
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	dd06      	ble.n	80071f8 <_Z10cube_printPKcz+0x58>
            str_buffer[buflen] = '\0';
 80071ea:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	@ 0xd6
 80071ee:	33d8      	adds	r3, #216	@ 0xd8
 80071f0:	443b      	add	r3, r7
 80071f2:	2200      	movs	r2, #0
 80071f4:	f803 2cd4 	strb.w	r2, [r3, #-212]
        }

        // Release the VA List Mutex
        Global::vaListMutex.Unlock();
 80071f8:	4815      	ldr	r0, [pc, #84]	@ (8007250 <_Z10cube_printPKcz+0xb0>)
 80071fa:	f7ff ff04 	bl	8007006 <_ZN5Mutex6UnlockEv>

        //Generate a command
        Command cmd(DATA_COMMAND, (uint16_t)CUBE_TASK_COMMAND_SEND_DEBUG); // Set the UART channel to send data on
 80071fe:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8007202:	2201      	movs	r2, #1
 8007204:	2102      	movs	r1, #2
 8007206:	4618      	mov	r0, r3
 8007208:	f7ff fda1 	bl	8006d4e <_ZN7CommandC1E15GLOBAL_COMMANDSt>

        //Copy data into the command
        cmd.CopyDataToCommand(str_buffer, buflen);
 800720c:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8007210:	1d39      	adds	r1, r7, #4
 8007212:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8007216:	4618      	mov	r0, r3
 8007218:	f7ff fdf2 	bl	8006e00 <_ZN7Command17CopyDataToCommandEPht>

        //Send this packet off to the UART Task
        CubeTask::Inst().GetEventQueue()->Send(cmd, false);
 800721c:	f7f9 f85c 	bl	80002d8 <_ZN8CubeTask4InstEv>
 8007220:	4603      	mov	r3, r0
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff ffb0 	bl	8007188 <_ZNK4Task13GetEventQueueEv>
 8007228:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800722c:	2200      	movs	r2, #0
 800722e:	4619      	mov	r1, r3
 8007230:	f7ff ff34 	bl	800709c <_ZN5Queue4SendER7Commandb>
    {
        // Print out that we could not acquire the VA list mutex
        SOAR_ASSERT(false, "Could not acquire VA_LIST mutex");
    }
#endif
}
 8007234:	e005      	b.n	8007242 <_Z10cube_printPKcz+0xa2>
        SOAR_ASSERT(false, "Could not acquire VA_LIST mutex");
 8007236:	4b07      	ldr	r3, [pc, #28]	@ (8007254 <_Z10cube_printPKcz+0xb4>)
 8007238:	2238      	movs	r2, #56	@ 0x38
 800723a:	4907      	ldr	r1, [pc, #28]	@ (8007258 <_Z10cube_printPKcz+0xb8>)
 800723c:	2000      	movs	r0, #0
 800723e:	f000 f80d 	bl	800725c <_Z17cube_assert_debugbPKctS0_z>
}
 8007242:	bf00      	nop
 8007244:	37d8      	adds	r7, #216	@ 0xd8
 8007246:	46bd      	mov	sp, r7
 8007248:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800724c:	b004      	add	sp, #16
 800724e:	4770      	bx	lr
 8007250:	2000aaa4 	.word	0x2000aaa4
 8007254:	080086c4 	.word	0x080086c4
 8007258:	080086e4 	.word	0x080086e4

0800725c <_Z17cube_assert_debugbPKctS0_z>:
 * @param file File that the assertion is in (__FILE__)
 * @param line Line number that the assertion is on (__LINE__)
 * @param str Optional message to print if assertion fails. Must be less than 192 characters AFTER formatting
 * @param ... Additional arguments to print if assertion fails, in same format as printf
 */
void cube_assert_debug(bool condition, const char* file, const uint16_t line, const char* str, ...) {
 800725c:	b408      	push	{r3}
 800725e:	b580      	push	{r7, lr}
 8007260:	b0d9      	sub	sp, #356	@ 0x164
 8007262:	af02      	add	r7, sp, #8
 8007264:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8007268:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800726c:	6019      	str	r1, [r3, #0]
 800726e:	4611      	mov	r1, r2
 8007270:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8007274:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8007278:	4602      	mov	r2, r0
 800727a:	701a      	strb	r2, [r3, #0]
 800727c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8007280:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8007284:	460a      	mov	r2, r1
 8007286:	801a      	strh	r2, [r3, #0]
    // If assertion succeeds, do nothing
    if (condition) {
 8007288:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800728c:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f040 808c 	bne.w	80073b0 <_Z17cube_assert_debugbPKctS0_z+0x154>
        return;
    }

#ifndef DISABLE_DEBUG

    bool printMessage = false;
 8007298:	2300      	movs	r3, #0
 800729a:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157

    // NOTE: Be careful! If va_list funcs while RTOS is active ALL calls to any vsnprint functions MUST have a mutex lock/unlock
    // NOTE: https://nadler.com/embedded/newlibAndFreeRTOS.html

    // We have an assert fail, we try to take control of the Debug semaphore, and then suspend all other parts of the system
    if (Global::vaListMutex.Lock(ASSERT_TAKE_MAX_TIME_MS)) {
 800729e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80072a2:	4847      	ldr	r0, [pc, #284]	@ (80073c0 <_Z17cube_assert_debugbPKctS0_z+0x164>)
 80072a4:	f7ff fe9a 	bl	8006fdc <_ZN5Mutex4LockEm>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <_Z17cube_assert_debugbPKctS0_z+0x58>
        // We have the mutex, we can now safely print the message
        printMessage = true;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    }

    vTaskSuspendAll();
 80072b4:	f7fd fdd4 	bl	8004e60 <vTaskSuspendAll>

    //If we have the vaListMutex, we can safely use vsnprintf
    if (printMessage) {
 80072b8:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d06d      	beq.n	800739c <_Z17cube_assert_debugbPKctS0_z+0x140>
        // Print out the assertion header through the supported interface, we don't have a UART task running, so we directly use HAL
        uint8_t header_buf[ASSERT_BUFFER_MAX_SIZE] = {};
 80072c0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80072c4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80072c8:	4618      	mov	r0, r3
 80072ca:	23a0      	movs	r3, #160	@ 0xa0
 80072cc:	461a      	mov	r2, r3
 80072ce:	2100      	movs	r1, #0
 80072d0:	f000 fb56 	bl	8007980 <memset>
        int16_t res = snprintf(reinterpret_cast<char*>(header_buf), ASSERT_BUFFER_MAX_SIZE - 1, "\r\n\n-- ASSERTION FAILED --\r\nFile [%s] @ Line # [%d]\r\n", file, line);
 80072d4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80072d8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80072dc:	881a      	ldrh	r2, [r3, #0]
 80072de:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80072e2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80072e6:	f107 000c 	add.w	r0, r7, #12
 80072ea:	9200      	str	r2, [sp, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a35      	ldr	r2, [pc, #212]	@ (80073c4 <_Z17cube_assert_debugbPKctS0_z+0x168>)
 80072f0:	219f      	movs	r1, #159	@ 0x9f
 80072f2:	f000 fad3 	bl	800789c <sniprintf>
 80072f6:	4603      	mov	r3, r0
 80072f8:	f8a7 3154 	strh.w	r3, [r7, #340]	@ 0x154
        if (res < 0) {
 80072fc:	f9b7 3154 	ldrsh.w	r3, [r7, #340]	@ 0x154
 8007300:	2b00      	cmp	r3, #0
 8007302:	da0a      	bge.n	800731a <_Z17cube_assert_debugbPKctS0_z+0xbe>
            // If we failed to generate the header, just format the line number
            snprintf(reinterpret_cast<char*>(header_buf), ASSERT_BUFFER_MAX_SIZE - 1, "\r\n\n-- ASSERTION FAILED --\r\nFile [PATH_TOO_LONG] @ Line # [%d]\r\n", line);
 8007304:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8007308:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	f107 000c 	add.w	r0, r7, #12
 8007312:	4a2d      	ldr	r2, [pc, #180]	@ (80073c8 <_Z17cube_assert_debugbPKctS0_z+0x16c>)
 8007314:	219f      	movs	r1, #159	@ 0x9f
 8007316:	f000 fac1 	bl	800789c <sniprintf>
        }

        // Output the header to the debug port
        DEFAULT_DEBUG_UART_DRIVER->Transmit(header_buf, strlen(reinterpret_cast<char*>(header_buf)));
 800731a:	f107 030c 	add.w	r3, r7, #12
 800731e:	4618      	mov	r0, r3
 8007320:	f7f8 ff60 	bl	80001e4 <strlen>
 8007324:	4603      	mov	r3, r0
 8007326:	b29a      	uxth	r2, r3
 8007328:	f107 030c 	add.w	r3, r7, #12
 800732c:	4619      	mov	r1, r3
 800732e:	4827      	ldr	r0, [pc, #156]	@ (80073cc <_Z17cube_assert_debugbPKctS0_z+0x170>)
 8007330:	f000 f9ec 	bl	800770c <_ZN10UARTDriver8TransmitEPht>

        // If we have a message, and can use VA list, extract the string into a new buffer, and null terminate it
        if (printMessage && str != nullptr) {
 8007334:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8007338:	2b00      	cmp	r3, #0
 800733a:	d034      	beq.n	80073a6 <_Z17cube_assert_debugbPKctS0_z+0x14a>
 800733c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8007340:	2b00      	cmp	r3, #0
 8007342:	d030      	beq.n	80073a6 <_Z17cube_assert_debugbPKctS0_z+0x14a>
            uint8_t str_buffer[ASSERT_BUFFER_MAX_SIZE] = {};
 8007344:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007348:	22a0      	movs	r2, #160	@ 0xa0
 800734a:	2100      	movs	r1, #0
 800734c:	4618      	mov	r0, r3
 800734e:	f000 fb17 	bl	8007980 <memset>
            va_list argument_list;
            va_start(argument_list, str);
 8007352:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8007356:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
            int16_t buflen = vsnprintf(reinterpret_cast<char*>(str_buffer), sizeof(str_buffer) - 1, str, argument_list);
 800735a:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 800735e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007362:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8007366:	219f      	movs	r1, #159	@ 0x9f
 8007368:	f000 fafc 	bl	8007964 <vsniprintf>
 800736c:	4603      	mov	r3, r0
 800736e:	f8a7 3152 	strh.w	r3, [r7, #338]	@ 0x152
            va_end(argument_list);
            if (buflen > 0) {
 8007372:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	@ 0x152
 8007376:	2b00      	cmp	r3, #0
 8007378:	dd15      	ble.n	80073a6 <_Z17cube_assert_debugbPKctS0_z+0x14a>
                str_buffer[buflen] = '\0';
 800737a:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	@ 0x152
 800737e:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007382:	443b      	add	r3, r7
 8007384:	2200      	movs	r2, #0
 8007386:	f803 2cac 	strb.w	r2, [r3, #-172]
                DEFAULT_DEBUG_UART_DRIVER->Transmit(str_buffer, buflen);
 800738a:	f8b7 2152 	ldrh.w	r2, [r7, #338]	@ 0x152
 800738e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007392:	4619      	mov	r1, r3
 8007394:	480d      	ldr	r0, [pc, #52]	@ (80073cc <_Z17cube_assert_debugbPKctS0_z+0x170>)
 8007396:	f000 f9b9 	bl	800770c <_ZN10UARTDriver8TransmitEPht>
 800739a:	e004      	b.n	80073a6 <_Z17cube_assert_debugbPKctS0_z+0x14a>
            }
        }
    }
    else {
        DEFAULT_DEBUG_UART_DRIVER->Transmit((uint8_t*)"-- ASSERTION FAILED --\r\nCould not acquire vaListMutex\r\n", 55);
 800739c:	2237      	movs	r2, #55	@ 0x37
 800739e:	490c      	ldr	r1, [pc, #48]	@ (80073d0 <_Z17cube_assert_debugbPKctS0_z+0x174>)
 80073a0:	480a      	ldr	r0, [pc, #40]	@ (80073cc <_Z17cube_assert_debugbPKctS0_z+0x170>)
 80073a2:	f000 f9b3 	bl	800770c <_ZN10UARTDriver8TransmitEPht>
    }

#endif

    HAL_NVIC_SystemReset();
 80073a6:	f7f9 fddc 	bl	8000f62 <HAL_NVIC_SystemReset>

    // We should not reach this code, but if we do, we should resume the scheduler
    xTaskResumeAll();
 80073aa:	f7fd fd67 	bl	8004e7c <xTaskResumeAll>
 80073ae:	e000      	b.n	80073b2 <_Z17cube_assert_debugbPKctS0_z+0x156>
        return;
 80073b0:	bf00      	nop
}
 80073b2:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 80073b6:	46bd      	mov	sp, r7
 80073b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073bc:	b001      	add	sp, #4
 80073be:	4770      	bx	lr
 80073c0:	2000aaa4 	.word	0x2000aaa4
 80073c4:	08008700 	.word	0x08008700
 80073c8:	08008738 	.word	0x08008738
 80073cc:	200000b8 	.word	0x200000b8
 80073d0:	08008778 	.word	0x08008778

080073d4 <_Z41__static_initialization_and_destruction_0v>:
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
Mutex Global::vaListMutex;
 80073d8:	4802      	ldr	r0, [pc, #8]	@ (80073e4 <_Z41__static_initialization_and_destruction_0v+0x10>)
 80073da:	f7ff fdd3 	bl	8006f84 <_ZN5MutexC1Ev>
}
 80073de:	bf00      	nop
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	2000aaa4 	.word	0x2000aaa4

080073e8 <_Z41__static_initialization_and_destruction_1v>:
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
Mutex Global::vaListMutex;
 80073ec:	4802      	ldr	r0, [pc, #8]	@ (80073f8 <_Z41__static_initialization_and_destruction_1v+0x10>)
 80073ee:	f7ff fde7 	bl	8006fc0 <_ZN5MutexD1Ev>
}
 80073f2:	bf00      	nop
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	2000aaa4 	.word	0x2000aaa4

080073fc <_GLOBAL__sub_I__ZN6Global11vaListMutexE>:
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
 8007400:	f7ff ffe8 	bl	80073d4 <_Z41__static_initialization_and_destruction_0v>
 8007404:	bd80      	pop	{r7, pc}

08007406 <_GLOBAL__sub_D__ZN6Global11vaListMutexE>:
 8007406:	b580      	push	{r7, lr}
 8007408:	af00      	add	r7, sp, #0
 800740a:	f7ff ffed 	bl	80073e8 <_Z41__static_initialization_and_destruction_1v>
 800740e:	bd80      	pop	{r7, pc}

08007410 <_ZNK7Command14GetDataPointerEv>:
    uint8_t* GetDataPointer() const { return data; }
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <_ZN8CubeTask7RunTaskEPv>:
    }

    void InitTask();

protected:
    static void RunTask(void* pvParams) { CubeTask::Inst().Run(pvParams); } // Static Task Interface, passes control to the instance Run();
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	f7f8 ff52 	bl	80002d8 <_ZN8CubeTask4InstEv>
 8007434:	4603      	mov	r3, r0
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	4618      	mov	r0, r3
 800743a:	f000 f837 	bl	80074ac <_ZN8CubeTask3RunEPv>
 800743e:	bf00      	nop
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
	...

08007448 <_ZN8CubeTask8InitTaskEv>:

/**
 * @brief Initializes Cube task with the RTOS scheduler
*/
void CubeTask::InitTask()
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af02      	add	r7, sp, #8
 800744e:	6078      	str	r0, [r7, #4]
    // Make sure the task is not already initialized
    SOAR_ASSERT(rtTaskHandle == nullptr, "Cannot initialize UART task twice");
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d005      	beq.n	8007464 <_ZN8CubeTask8InitTaskEv+0x1c>
 8007458:	4b0f      	ldr	r3, [pc, #60]	@ (8007498 <_ZN8CubeTask8InitTaskEv+0x50>)
 800745a:	2211      	movs	r2, #17
 800745c:	490f      	ldr	r1, [pc, #60]	@ (800749c <_ZN8CubeTask8InitTaskEv+0x54>)
 800745e:	2000      	movs	r0, #0
 8007460:	f7ff fefc 	bl	800725c <_Z17cube_assert_debugbPKctS0_z>

    // Start the task
    BaseType_t rtValue =
        xTaskCreate((TaskFunction_t)CubeTask::RunTask,
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3304      	adds	r3, #4
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	2302      	movs	r3, #2
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007474:	490a      	ldr	r1, [pc, #40]	@ (80074a0 <_ZN8CubeTask8InitTaskEv+0x58>)
 8007476:	480b      	ldr	r0, [pc, #44]	@ (80074a4 <_ZN8CubeTask8InitTaskEv+0x5c>)
 8007478:	f7fd fafc 	bl	8004a74 <xTaskCreate>
 800747c:	60f8      	str	r0, [r7, #12]
            (void*)this,
            (UBaseType_t)UART_TASK_RTOS_PRIORITY,
            (TaskHandle_t*)&rtTaskHandle);

    //Ensure creation succeded
    SOAR_ASSERT(rtValue == pdPASS, "CUBETask::InitTask() - xTaskCreate() failed");
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d005      	beq.n	8007490 <_ZN8CubeTask8InitTaskEv+0x48>
 8007484:	4b08      	ldr	r3, [pc, #32]	@ (80074a8 <_ZN8CubeTask8InitTaskEv+0x60>)
 8007486:	221d      	movs	r2, #29
 8007488:	4904      	ldr	r1, [pc, #16]	@ (800749c <_ZN8CubeTask8InitTaskEv+0x54>)
 800748a:	2000      	movs	r0, #0
 800748c:	f7ff fee6 	bl	800725c <_Z17cube_assert_debugbPKctS0_z>
}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	080087b0 	.word	0x080087b0
 800749c:	080087d4 	.word	0x080087d4
 80074a0:	080087ec 	.word	0x080087ec
 80074a4:	08007429 	.word	0x08007429
 80074a8:	080087f8 	.word	0x080087f8

080074ac <_ZN8CubeTask3RunEPv>:
/**
 * @brief Instance Run loop for the Cube Task, runs on scheduler start as long as the task is initialized.
 * @param pvParams RTOS Passed void parameters, contains a pointer to the object instance, should not be used
*/
void CubeTask::Run(void * pvParams)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
    //UART Task loop
    while(1) {
        Command cm;
 80074b6:	f107 030c 	add.w	r3, r7, #12
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff fc2d 	bl	8006d1a <_ZN7CommandC1Ev>

        //Wait forever for a command
        qEvtQueue->ReceiveWait(cm);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f107 020c 	add.w	r2, r7, #12
 80074c8:	4611      	mov	r1, r2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff fe0e 	bl	80070ec <_ZN5Queue11ReceiveWaitER7Command>

        //Process the command
        HandleCommand(cm);
 80074d0:	f107 030c 	add.w	r3, r7, #12
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f802 	bl	80074e0 <_ZN8CubeTask13HandleCommandER7Command>
    }
 80074dc:	bf00      	nop
 80074de:	e7ea      	b.n	80074b6 <_ZN8CubeTask3RunEPv+0xa>

080074e0 <_ZN8CubeTask13HandleCommandER7Command>:
 * @brief HandleCommand handles any command passed to the Cube task primary event queue. Responsible for
 *           handling all commands, even if unsupported. (Unexpected commands must still be reset)
 * @param cm Reference to the command object to handle
*/
void CubeTask::HandleCommand(Command& cm)
{
 80074e0:	b590      	push	{r4, r7, lr}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
    //Switch for the GLOBAL_COMMAND
    switch (cm.GetCommand()) {
 80074ea:	6838      	ldr	r0, [r7, #0]
 80074ec:	f7f8 ffa9 	bl	8000442 <_ZNK7Command10GetCommandEv>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d11d      	bne.n	8007532 <_ZN8CubeTask13HandleCommandER7Command+0x52>
    case DATA_COMMAND: {
        //Switch for task specific command within DATA_COMMAND
        switch (cm.GetTaskCommand()) {
 80074f6:	6838      	ldr	r0, [r7, #0]
 80074f8:	f7f8 ffaf 	bl	800045a <_ZNK7Command14GetTaskCommandEv>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d10d      	bne.n	800751e <_ZN8CubeTask13HandleCommandER7Command+0x3e>
        case CUBE_TASK_COMMAND_SEND_DEBUG:
#ifndef DISABLE_DEBUG
                DEFAULT_DEBUG_UART_DRIVER->Transmit(cm.GetDataPointer(), cm.GetDataSize());
 8007502:	6838      	ldr	r0, [r7, #0]
 8007504:	f7ff ff84 	bl	8007410 <_ZNK7Command14GetDataPointerEv>
 8007508:	4604      	mov	r4, r0
 800750a:	6838      	ldr	r0, [r7, #0]
 800750c:	f7ff fcc0 	bl	8006e90 <_ZNK7Command11GetDataSizeEv>
 8007510:	4603      	mov	r3, r0
 8007512:	461a      	mov	r2, r3
 8007514:	4621      	mov	r1, r4
 8007516:	480f      	ldr	r0, [pc, #60]	@ (8007554 <_ZN8CubeTask13HandleCommandER7Command+0x74>)
 8007518:	f000 f8f8 	bl	800770c <_ZN10UARTDriver8TransmitEPht>
#endif
            break;
 800751c:	e008      	b.n	8007530 <_ZN8CubeTask13HandleCommandER7Command+0x50>
        default:
            SOAR_PRINT("CUBETask - Received Unsupported DATA_COMMAND {%d}\n", cm.GetTaskCommand());
 800751e:	6838      	ldr	r0, [r7, #0]
 8007520:	f7f8 ff9b 	bl	800045a <_ZNK7Command14GetTaskCommandEv>
 8007524:	4603      	mov	r3, r0
 8007526:	4619      	mov	r1, r3
 8007528:	480b      	ldr	r0, [pc, #44]	@ (8007558 <_ZN8CubeTask13HandleCommandER7Command+0x78>)
 800752a:	f7ff fe39 	bl	80071a0 <_Z10cube_printPKcz>
            break;
 800752e:	bf00      	nop
        }
        break;
 8007530:	e008      	b.n	8007544 <_ZN8CubeTask13HandleCommandER7Command+0x64>
    }
    default:
        SOAR_PRINT("CUBETask - Received Unsupported Command {%d}\n", cm.GetCommand());
 8007532:	6838      	ldr	r0, [r7, #0]
 8007534:	f7f8 ff85 	bl	8000442 <_ZNK7Command10GetCommandEv>
 8007538:	4603      	mov	r3, r0
 800753a:	4619      	mov	r1, r3
 800753c:	4807      	ldr	r0, [pc, #28]	@ (800755c <_ZN8CubeTask13HandleCommandER7Command+0x7c>)
 800753e:	f7ff fe2f 	bl	80071a0 <_Z10cube_printPKcz>
        break;
 8007542:	bf00      	nop
    }

    //No matter what we happens, we must reset allocated data
    cm.Reset();
 8007544:	6838      	ldr	r0, [r7, #0]
 8007546:	f7ff fc81 	bl	8006e4c <_ZN7Command5ResetEv>
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	bd90      	pop	{r4, r7, pc}
 8007552:	bf00      	nop
 8007554:	200000b8 	.word	0x200000b8
 8007558:	08008824 	.word	0x08008824
 800755c:	08008858 	.word	0x08008858

08007560 <LL_USART_IsActiveFlag_PE>:
  * @rmtoll ISR          PE            LL_USART_IsActiveFlag_PE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(const USART_TypeDef *USARTx)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <LL_USART_IsActiveFlag_PE+0x18>
 8007574:	2301      	movs	r3, #1
 8007576:	e000      	b.n	800757a <LL_USART_IsActiveFlag_PE+0x1a>
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8007586:	b480      	push	{r7}
 8007588:	b083      	sub	sp, #12
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b02      	cmp	r3, #2
 8007598:	d101      	bne.n	800759e <LL_USART_IsActiveFlag_FE+0x18>
 800759a:	2301      	movs	r3, #1
 800759c:	e000      	b.n	80075a0 <LL_USART_IsActiveFlag_FE+0x1a>
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <LL_USART_IsActiveFlag_NE>:
  * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d101      	bne.n	80075c4 <LL_USART_IsActiveFlag_NE+0x18>
 80075c0:	2301      	movs	r3, #1
 80075c2:	e000      	b.n	80075c6 <LL_USART_IsActiveFlag_NE+0x1a>
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	f003 0308 	and.w	r3, r3, #8
 80075e2:	2b08      	cmp	r3, #8
 80075e4:	d101      	bne.n	80075ea <LL_USART_IsActiveFlag_ORE+0x18>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <LL_USART_IsActiveFlag_ORE+0x1a>
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	f003 0320 	and.w	r3, r3, #32
 8007608:	2b20      	cmp	r3, #32
 800760a:	d101      	bne.n	8007610 <LL_USART_IsActiveFlag_RXNE+0x18>
 800760c:	2301      	movs	r3, #1
 800760e:	e000      	b.n	8007612 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800762e:	2b40      	cmp	r3, #64	@ 0x40
 8007630:	d101      	bne.n	8007636 <LL_USART_IsActiveFlag_TC+0x18>
 8007632:	2301      	movs	r3, #1
 8007634:	e000      	b.n	8007638 <LL_USART_IsActiveFlag_TC+0x1a>
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007654:	2b80      	cmp	r3, #128	@ 0x80
 8007656:	d101      	bne.n	800765c <LL_USART_IsActiveFlag_TXE+0x18>
 8007658:	2301      	movs	r3, #1
 800765a:	e000      	b.n	800765e <LL_USART_IsActiveFlag_TXE+0x1a>
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2208      	movs	r2, #8
 8007676:	621a      	str	r2, [r3, #32]
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8007684:	b480      	push	{r7}
 8007686:	b089      	sub	sp, #36	@ 0x24
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	e853 3f00 	ldrex	r3, [r3]
 8007696:	60bb      	str	r3, [r7, #8]
   return(result);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f043 0320 	orr.w	r3, r3, #32
 800769e:	61fb      	str	r3, [r7, #28]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	61ba      	str	r2, [r7, #24]
 80076a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	6979      	ldr	r1, [r7, #20]
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	613b      	str	r3, [r7, #16]
   return(result);
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	bf14      	ite	ne
 80076b8:	2301      	movne	r3, #1
 80076ba:	2300      	moveq	r3, #0
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e4      	bne.n	800768c <LL_USART_EnableIT_RXNE+0x8>
}
 80076c2:	bf00      	nop
 80076c4:	bf00      	nop
 80076c6:	3724      	adds	r7, #36	@ 0x24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80076dc:	b29b      	uxth	r3, r3
 80076de:	b2db      	uxtb	r3, r3
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80076f8:	78fb      	ldrb	r3, [r7, #3]
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <_ZN10UARTDriver8TransmitEPht>:
 * @param data The data to transmit
 * @param len The length of the data to transmit
 * @return True if the transmission was successful, false otherwise
 */
bool UARTDriver::Transmit(uint8_t* data, uint16_t len)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	4613      	mov	r3, r2
 8007718:	80fb      	strh	r3, [r7, #6]
    // Loop through and transmit each byte via. polling
    for (uint16_t i = 0; i < len; i++) {
 800771a:	2300      	movs	r3, #0
 800771c:	82fb      	strh	r3, [r7, #22]
 800771e:	e019      	b.n	8007754 <_ZN10UARTDriver8TransmitEPht+0x48>
        LL_USART_TransmitData8(kUart_, data[i]);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	8afb      	ldrh	r3, [r7, #22]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	4413      	add	r3, r2
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	4619      	mov	r1, r3
 800772e:	f7ff ffdd 	bl	80076ec <LL_USART_TransmitData8>

        // Wait until the TX Register Empty Flag is set
        while (!LL_USART_IsActiveFlag_TXE(kUart_)) {}
 8007732:	bf00      	nop
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4618      	mov	r0, r3
 800773a:	f7ff ff83 	bl	8007644 <LL_USART_IsActiveFlag_TXE>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	bf0c      	ite	eq
 8007744:	2301      	moveq	r3, #1
 8007746:	2300      	movne	r3, #0
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f2      	bne.n	8007734 <_ZN10UARTDriver8TransmitEPht+0x28>
    for (uint16_t i = 0; i < len; i++) {
 800774e:	8afb      	ldrh	r3, [r7, #22]
 8007750:	3301      	adds	r3, #1
 8007752:	82fb      	strh	r3, [r7, #22]
 8007754:	8afa      	ldrh	r2, [r7, #22]
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	429a      	cmp	r2, r3
 800775a:	d3e1      	bcc.n	8007720 <_ZN10UARTDriver8TransmitEPht+0x14>
    }

    // Wait until the transfer complete flag is set
    while (!LL_USART_IsActiveFlag_TC(kUart_)) {}
 800775c:	bf00      	nop
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff ff5b 	bl	800761e <LL_USART_IsActiveFlag_TC>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	bf0c      	ite	eq
 800776e:	2301      	moveq	r3, #1
 8007770:	2300      	movne	r3, #0
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1f2      	bne.n	800775e <_ZN10UARTDriver8TransmitEPht+0x52>

    return true;
 8007778:	2301      	movs	r3, #1
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <_ZN10UARTDriver9ReceiveITEPhP16UARTReceiverBase>:
* @brief Receives 1 byte of data via interrupt
* @param receiver
* @return TRUE if interrupt was successfully enabled, FALSE otherwise
*/
bool UARTDriver::ReceiveIT(uint8_t* charBuf, UARTReceiverBase* receiver)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	607a      	str	r2, [r7, #4]
    // Check flags
    HandleAndClearRxError();
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 f822 	bl	80077d8 <_ZN10UARTDriver21HandleAndClearRxErrorEv>
    if (LL_USART_IsActiveFlag_RXNE(kUart_)) {
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff ff2d 	bl	80075f8 <LL_USART_IsActiveFlag_RXNE>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	bf14      	ite	ne
 80077a4:	2301      	movne	r3, #1
 80077a6:	2300      	moveq	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d004      	beq.n	80077b8 <_ZN10UARTDriver9ReceiveITEPhP16UARTReceiverBase+0x36>
        // Read the data and ignore it
        LL_USART_ReceiveData8(kUart_);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff ff8c 	bl	80076d0 <LL_USART_ReceiveData8>
    }

    // Set the buffer and receiver
    rxCharBuf_ = charBuf;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	605a      	str	r2, [r3, #4]
    rxReceiver_ = receiver;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	609a      	str	r2, [r3, #8]

    // Enable the receive interrupt
    LL_USART_EnableIT_RXNE(kUart_);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7ff ff5b 	bl	8007684 <LL_USART_EnableIT_RXNE>

    return true;
 80077ce:	2301      	movs	r3, #1
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <_ZN10UARTDriver21HandleAndClearRxErrorEv>:
/**
 * @brief Clears any error flags that may have been set
 * @return true if flags had to be cleared, false otherwise
 */
bool UARTDriver::HandleAndClearRxError()
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
    bool shouldClearFlags = false;
 80077e0:	2300      	movs	r3, #0
 80077e2:	73fb      	strb	r3, [r7, #15]
    if (LL_USART_IsActiveFlag_ORE(kUart_)) {
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7ff fef2 	bl	80075d2 <LL_USART_IsActiveFlag_ORE>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	bf14      	ite	ne
 80077f4:	2301      	movne	r3, #1
 80077f6:	2300      	moveq	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x2a>
        shouldClearFlags = true;
 80077fe:	2301      	movs	r3, #1
 8007800:	73fb      	strb	r3, [r7, #15]
    }
    if (LL_USART_IsActiveFlag_NE(kUart_)) {
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4618      	mov	r0, r3
 8007808:	f7ff fed0 	bl	80075ac <LL_USART_IsActiveFlag_NE>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	bf14      	ite	ne
 8007812:	2301      	movne	r3, #1
 8007814:	2300      	moveq	r3, #0
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x48>
        shouldClearFlags = true;
 800781c:	2301      	movs	r3, #1
 800781e:	73fb      	strb	r3, [r7, #15]
    }
    if(LL_USART_IsActiveFlag_FE(kUart_)) {
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff feae 	bl	8007586 <LL_USART_IsActiveFlag_FE>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	bf14      	ite	ne
 8007830:	2301      	movne	r3, #1
 8007832:	2300      	moveq	r3, #0
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x66>
        shouldClearFlags = true;
 800783a:	2301      	movs	r3, #1
 800783c:	73fb      	strb	r3, [r7, #15]
    }
    if(LL_USART_IsActiveFlag_PE(kUart_)) {
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff fe8c 	bl	8007560 <LL_USART_IsActiveFlag_PE>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	bf14      	ite	ne
 800784e:	2301      	movne	r3, #1
 8007850:	2300      	moveq	r3, #0
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x84>
        shouldClearFlags = true;
 8007858:	2301      	movs	r3, #1
 800785a:	73fb      	strb	r3, [r7, #15]
    }

    // Clearing the ORE here also clears PE, NE, FE, IDLE
    if(shouldClearFlags)
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d004      	beq.n	800786c <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x94>
        LL_USART_ClearFlag_ORE(kUart_);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff feff 	bl	800766a <LL_USART_ClearFlag_ORE>

    return !shouldClearFlags;
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	f083 0301 	eor.w	r3, r3, #1
 8007872:	b2db      	uxtb	r3, r3
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <__cxa_guard_acquire>:
 800787c:	6802      	ldr	r2, [r0, #0]
 800787e:	07d2      	lsls	r2, r2, #31
 8007880:	4603      	mov	r3, r0
 8007882:	d405      	bmi.n	8007890 <__cxa_guard_acquire+0x14>
 8007884:	7842      	ldrb	r2, [r0, #1]
 8007886:	b102      	cbz	r2, 800788a <__cxa_guard_acquire+0xe>
 8007888:	deff      	udf	#255	@ 0xff
 800788a:	2001      	movs	r0, #1
 800788c:	7058      	strb	r0, [r3, #1]
 800788e:	4770      	bx	lr
 8007890:	2000      	movs	r0, #0
 8007892:	4770      	bx	lr

08007894 <__cxa_guard_release>:
 8007894:	2301      	movs	r3, #1
 8007896:	6003      	str	r3, [r0, #0]
 8007898:	4770      	bx	lr
	...

0800789c <sniprintf>:
 800789c:	b40c      	push	{r2, r3}
 800789e:	b530      	push	{r4, r5, lr}
 80078a0:	4b18      	ldr	r3, [pc, #96]	@ (8007904 <sniprintf+0x68>)
 80078a2:	1e0c      	subs	r4, r1, #0
 80078a4:	681d      	ldr	r5, [r3, #0]
 80078a6:	b09d      	sub	sp, #116	@ 0x74
 80078a8:	da08      	bge.n	80078bc <sniprintf+0x20>
 80078aa:	238b      	movs	r3, #139	@ 0x8b
 80078ac:	602b      	str	r3, [r5, #0]
 80078ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078b2:	b01d      	add	sp, #116	@ 0x74
 80078b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078b8:	b002      	add	sp, #8
 80078ba:	4770      	bx	lr
 80078bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80078c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80078c4:	f04f 0300 	mov.w	r3, #0
 80078c8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80078ca:	bf14      	ite	ne
 80078cc:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80078d0:	4623      	moveq	r3, r4
 80078d2:	9304      	str	r3, [sp, #16]
 80078d4:	9307      	str	r3, [sp, #28]
 80078d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80078da:	9002      	str	r0, [sp, #8]
 80078dc:	9006      	str	r0, [sp, #24]
 80078de:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80078e4:	ab21      	add	r3, sp, #132	@ 0x84
 80078e6:	a902      	add	r1, sp, #8
 80078e8:	4628      	mov	r0, r5
 80078ea:	9301      	str	r3, [sp, #4]
 80078ec:	f000 f98e 	bl	8007c0c <_svfiprintf_r>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	bfbc      	itt	lt
 80078f4:	238b      	movlt	r3, #139	@ 0x8b
 80078f6:	602b      	strlt	r3, [r5, #0]
 80078f8:	2c00      	cmp	r4, #0
 80078fa:	d0da      	beq.n	80078b2 <sniprintf+0x16>
 80078fc:	9b02      	ldr	r3, [sp, #8]
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	e7d6      	b.n	80078b2 <sniprintf+0x16>
 8007904:	20000010 	.word	0x20000010

08007908 <_vsniprintf_r>:
 8007908:	b530      	push	{r4, r5, lr}
 800790a:	4614      	mov	r4, r2
 800790c:	2c00      	cmp	r4, #0
 800790e:	b09b      	sub	sp, #108	@ 0x6c
 8007910:	4605      	mov	r5, r0
 8007912:	461a      	mov	r2, r3
 8007914:	da05      	bge.n	8007922 <_vsniprintf_r+0x1a>
 8007916:	238b      	movs	r3, #139	@ 0x8b
 8007918:	6003      	str	r3, [r0, #0]
 800791a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800791e:	b01b      	add	sp, #108	@ 0x6c
 8007920:	bd30      	pop	{r4, r5, pc}
 8007922:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007926:	f8ad 300c 	strh.w	r3, [sp, #12]
 800792a:	f04f 0300 	mov.w	r3, #0
 800792e:	9319      	str	r3, [sp, #100]	@ 0x64
 8007930:	bf14      	ite	ne
 8007932:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007936:	4623      	moveq	r3, r4
 8007938:	9302      	str	r3, [sp, #8]
 800793a:	9305      	str	r3, [sp, #20]
 800793c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007940:	9100      	str	r1, [sp, #0]
 8007942:	9104      	str	r1, [sp, #16]
 8007944:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007948:	4669      	mov	r1, sp
 800794a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800794c:	f000 f95e 	bl	8007c0c <_svfiprintf_r>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	bfbc      	itt	lt
 8007954:	238b      	movlt	r3, #139	@ 0x8b
 8007956:	602b      	strlt	r3, [r5, #0]
 8007958:	2c00      	cmp	r4, #0
 800795a:	d0e0      	beq.n	800791e <_vsniprintf_r+0x16>
 800795c:	9b00      	ldr	r3, [sp, #0]
 800795e:	2200      	movs	r2, #0
 8007960:	701a      	strb	r2, [r3, #0]
 8007962:	e7dc      	b.n	800791e <_vsniprintf_r+0x16>

08007964 <vsniprintf>:
 8007964:	b507      	push	{r0, r1, r2, lr}
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4613      	mov	r3, r2
 800796a:	460a      	mov	r2, r1
 800796c:	4601      	mov	r1, r0
 800796e:	4803      	ldr	r0, [pc, #12]	@ (800797c <vsniprintf+0x18>)
 8007970:	6800      	ldr	r0, [r0, #0]
 8007972:	f7ff ffc9 	bl	8007908 <_vsniprintf_r>
 8007976:	b003      	add	sp, #12
 8007978:	f85d fb04 	ldr.w	pc, [sp], #4
 800797c:	20000010 	.word	0x20000010

08007980 <memset>:
 8007980:	4402      	add	r2, r0
 8007982:	4603      	mov	r3, r0
 8007984:	4293      	cmp	r3, r2
 8007986:	d100      	bne.n	800798a <memset+0xa>
 8007988:	4770      	bx	lr
 800798a:	f803 1b01 	strb.w	r1, [r3], #1
 800798e:	e7f9      	b.n	8007984 <memset+0x4>

08007990 <__errno>:
 8007990:	4b01      	ldr	r3, [pc, #4]	@ (8007998 <__errno+0x8>)
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	20000010 	.word	0x20000010

0800799c <__libc_init_array>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	4d0d      	ldr	r5, [pc, #52]	@ (80079d4 <__libc_init_array+0x38>)
 80079a0:	4c0d      	ldr	r4, [pc, #52]	@ (80079d8 <__libc_init_array+0x3c>)
 80079a2:	1b64      	subs	r4, r4, r5
 80079a4:	10a4      	asrs	r4, r4, #2
 80079a6:	2600      	movs	r6, #0
 80079a8:	42a6      	cmp	r6, r4
 80079aa:	d109      	bne.n	80079c0 <__libc_init_array+0x24>
 80079ac:	4d0b      	ldr	r5, [pc, #44]	@ (80079dc <__libc_init_array+0x40>)
 80079ae:	4c0c      	ldr	r4, [pc, #48]	@ (80079e0 <__libc_init_array+0x44>)
 80079b0:	f000 fcc2 	bl	8008338 <_init>
 80079b4:	1b64      	subs	r4, r4, r5
 80079b6:	10a4      	asrs	r4, r4, #2
 80079b8:	2600      	movs	r6, #0
 80079ba:	42a6      	cmp	r6, r4
 80079bc:	d105      	bne.n	80079ca <__libc_init_array+0x2e>
 80079be:	bd70      	pop	{r4, r5, r6, pc}
 80079c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c4:	4798      	blx	r3
 80079c6:	3601      	adds	r6, #1
 80079c8:	e7ee      	b.n	80079a8 <__libc_init_array+0xc>
 80079ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ce:	4798      	blx	r3
 80079d0:	3601      	adds	r6, #1
 80079d2:	e7f2      	b.n	80079ba <__libc_init_array+0x1e>
 80079d4:	0800894c 	.word	0x0800894c
 80079d8:	0800894c 	.word	0x0800894c
 80079dc:	0800894c 	.word	0x0800894c
 80079e0:	08008958 	.word	0x08008958

080079e4 <__retarget_lock_acquire_recursive>:
 80079e4:	4770      	bx	lr

080079e6 <__retarget_lock_release_recursive>:
 80079e6:	4770      	bx	lr

080079e8 <_reclaim_reent>:
 80079e8:	4b2d      	ldr	r3, [pc, #180]	@ (8007aa0 <_reclaim_reent+0xb8>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4283      	cmp	r3, r0
 80079ee:	b570      	push	{r4, r5, r6, lr}
 80079f0:	4604      	mov	r4, r0
 80079f2:	d053      	beq.n	8007a9c <_reclaim_reent+0xb4>
 80079f4:	69c3      	ldr	r3, [r0, #28]
 80079f6:	b31b      	cbz	r3, 8007a40 <_reclaim_reent+0x58>
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	b163      	cbz	r3, 8007a16 <_reclaim_reent+0x2e>
 80079fc:	2500      	movs	r5, #0
 80079fe:	69e3      	ldr	r3, [r4, #28]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	5959      	ldr	r1, [r3, r5]
 8007a04:	b9b1      	cbnz	r1, 8007a34 <_reclaim_reent+0x4c>
 8007a06:	3504      	adds	r5, #4
 8007a08:	2d80      	cmp	r5, #128	@ 0x80
 8007a0a:	d1f8      	bne.n	80079fe <_reclaim_reent+0x16>
 8007a0c:	69e3      	ldr	r3, [r4, #28]
 8007a0e:	4620      	mov	r0, r4
 8007a10:	68d9      	ldr	r1, [r3, #12]
 8007a12:	f000 f855 	bl	8007ac0 <_free_r>
 8007a16:	69e3      	ldr	r3, [r4, #28]
 8007a18:	6819      	ldr	r1, [r3, #0]
 8007a1a:	b111      	cbz	r1, 8007a22 <_reclaim_reent+0x3a>
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 f84f 	bl	8007ac0 <_free_r>
 8007a22:	69e3      	ldr	r3, [r4, #28]
 8007a24:	689d      	ldr	r5, [r3, #8]
 8007a26:	b15d      	cbz	r5, 8007a40 <_reclaim_reent+0x58>
 8007a28:	4629      	mov	r1, r5
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	682d      	ldr	r5, [r5, #0]
 8007a2e:	f000 f847 	bl	8007ac0 <_free_r>
 8007a32:	e7f8      	b.n	8007a26 <_reclaim_reent+0x3e>
 8007a34:	680e      	ldr	r6, [r1, #0]
 8007a36:	4620      	mov	r0, r4
 8007a38:	f000 f842 	bl	8007ac0 <_free_r>
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	e7e1      	b.n	8007a04 <_reclaim_reent+0x1c>
 8007a40:	6961      	ldr	r1, [r4, #20]
 8007a42:	b111      	cbz	r1, 8007a4a <_reclaim_reent+0x62>
 8007a44:	4620      	mov	r0, r4
 8007a46:	f000 f83b 	bl	8007ac0 <_free_r>
 8007a4a:	69e1      	ldr	r1, [r4, #28]
 8007a4c:	b111      	cbz	r1, 8007a54 <_reclaim_reent+0x6c>
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f000 f836 	bl	8007ac0 <_free_r>
 8007a54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007a56:	b111      	cbz	r1, 8007a5e <_reclaim_reent+0x76>
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f000 f831 	bl	8007ac0 <_free_r>
 8007a5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a60:	b111      	cbz	r1, 8007a68 <_reclaim_reent+0x80>
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 f82c 	bl	8007ac0 <_free_r>
 8007a68:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007a6a:	b111      	cbz	r1, 8007a72 <_reclaim_reent+0x8a>
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f000 f827 	bl	8007ac0 <_free_r>
 8007a72:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007a74:	b111      	cbz	r1, 8007a7c <_reclaim_reent+0x94>
 8007a76:	4620      	mov	r0, r4
 8007a78:	f000 f822 	bl	8007ac0 <_free_r>
 8007a7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007a7e:	b111      	cbz	r1, 8007a86 <_reclaim_reent+0x9e>
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 f81d 	bl	8007ac0 <_free_r>
 8007a86:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007a88:	b111      	cbz	r1, 8007a90 <_reclaim_reent+0xa8>
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f000 f818 	bl	8007ac0 <_free_r>
 8007a90:	6a23      	ldr	r3, [r4, #32]
 8007a92:	b11b      	cbz	r3, 8007a9c <_reclaim_reent+0xb4>
 8007a94:	4620      	mov	r0, r4
 8007a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a9a:	4718      	bx	r3
 8007a9c:	bd70      	pop	{r4, r5, r6, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000010 	.word	0x20000010

08007aa4 <memcpy>:
 8007aa4:	440a      	add	r2, r1
 8007aa6:	4291      	cmp	r1, r2
 8007aa8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007aac:	d100      	bne.n	8007ab0 <memcpy+0xc>
 8007aae:	4770      	bx	lr
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aba:	4291      	cmp	r1, r2
 8007abc:	d1f9      	bne.n	8007ab2 <memcpy+0xe>
 8007abe:	bd10      	pop	{r4, pc}

08007ac0 <_free_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	2900      	cmp	r1, #0
 8007ac6:	d041      	beq.n	8007b4c <_free_r+0x8c>
 8007ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007acc:	1f0c      	subs	r4, r1, #4
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bfb8      	it	lt
 8007ad2:	18e4      	addlt	r4, r4, r3
 8007ad4:	f000 fbc4 	bl	8008260 <__malloc_lock>
 8007ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b50 <_free_r+0x90>)
 8007ada:	6813      	ldr	r3, [r2, #0]
 8007adc:	b933      	cbnz	r3, 8007aec <_free_r+0x2c>
 8007ade:	6063      	str	r3, [r4, #4]
 8007ae0:	6014      	str	r4, [r2, #0]
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ae8:	f000 bbc0 	b.w	800826c <__malloc_unlock>
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	d908      	bls.n	8007b02 <_free_r+0x42>
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	1821      	adds	r1, r4, r0
 8007af4:	428b      	cmp	r3, r1
 8007af6:	bf01      	itttt	eq
 8007af8:	6819      	ldreq	r1, [r3, #0]
 8007afa:	685b      	ldreq	r3, [r3, #4]
 8007afc:	1809      	addeq	r1, r1, r0
 8007afe:	6021      	streq	r1, [r4, #0]
 8007b00:	e7ed      	b.n	8007ade <_free_r+0x1e>
 8007b02:	461a      	mov	r2, r3
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	b10b      	cbz	r3, 8007b0c <_free_r+0x4c>
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	d9fa      	bls.n	8007b02 <_free_r+0x42>
 8007b0c:	6811      	ldr	r1, [r2, #0]
 8007b0e:	1850      	adds	r0, r2, r1
 8007b10:	42a0      	cmp	r0, r4
 8007b12:	d10b      	bne.n	8007b2c <_free_r+0x6c>
 8007b14:	6820      	ldr	r0, [r4, #0]
 8007b16:	4401      	add	r1, r0
 8007b18:	1850      	adds	r0, r2, r1
 8007b1a:	4283      	cmp	r3, r0
 8007b1c:	6011      	str	r1, [r2, #0]
 8007b1e:	d1e0      	bne.n	8007ae2 <_free_r+0x22>
 8007b20:	6818      	ldr	r0, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	6053      	str	r3, [r2, #4]
 8007b26:	4408      	add	r0, r1
 8007b28:	6010      	str	r0, [r2, #0]
 8007b2a:	e7da      	b.n	8007ae2 <_free_r+0x22>
 8007b2c:	d902      	bls.n	8007b34 <_free_r+0x74>
 8007b2e:	230c      	movs	r3, #12
 8007b30:	602b      	str	r3, [r5, #0]
 8007b32:	e7d6      	b.n	8007ae2 <_free_r+0x22>
 8007b34:	6820      	ldr	r0, [r4, #0]
 8007b36:	1821      	adds	r1, r4, r0
 8007b38:	428b      	cmp	r3, r1
 8007b3a:	bf04      	itt	eq
 8007b3c:	6819      	ldreq	r1, [r3, #0]
 8007b3e:	685b      	ldreq	r3, [r3, #4]
 8007b40:	6063      	str	r3, [r4, #4]
 8007b42:	bf04      	itt	eq
 8007b44:	1809      	addeq	r1, r1, r0
 8007b46:	6021      	streq	r1, [r4, #0]
 8007b48:	6054      	str	r4, [r2, #4]
 8007b4a:	e7ca      	b.n	8007ae2 <_free_r+0x22>
 8007b4c:	bd38      	pop	{r3, r4, r5, pc}
 8007b4e:	bf00      	nop
 8007b50:	2000abec 	.word	0x2000abec

08007b54 <__ssputs_r>:
 8007b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b58:	688e      	ldr	r6, [r1, #8]
 8007b5a:	461f      	mov	r7, r3
 8007b5c:	42be      	cmp	r6, r7
 8007b5e:	680b      	ldr	r3, [r1, #0]
 8007b60:	4682      	mov	sl, r0
 8007b62:	460c      	mov	r4, r1
 8007b64:	4690      	mov	r8, r2
 8007b66:	d82d      	bhi.n	8007bc4 <__ssputs_r+0x70>
 8007b68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b70:	d026      	beq.n	8007bc0 <__ssputs_r+0x6c>
 8007b72:	6965      	ldr	r5, [r4, #20]
 8007b74:	6909      	ldr	r1, [r1, #16]
 8007b76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b7a:	eba3 0901 	sub.w	r9, r3, r1
 8007b7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b82:	1c7b      	adds	r3, r7, #1
 8007b84:	444b      	add	r3, r9
 8007b86:	106d      	asrs	r5, r5, #1
 8007b88:	429d      	cmp	r5, r3
 8007b8a:	bf38      	it	cc
 8007b8c:	461d      	movcc	r5, r3
 8007b8e:	0553      	lsls	r3, r2, #21
 8007b90:	d527      	bpl.n	8007be2 <__ssputs_r+0x8e>
 8007b92:	4629      	mov	r1, r5
 8007b94:	f000 f958 	bl	8007e48 <_malloc_r>
 8007b98:	4606      	mov	r6, r0
 8007b9a:	b360      	cbz	r0, 8007bf6 <__ssputs_r+0xa2>
 8007b9c:	6921      	ldr	r1, [r4, #16]
 8007b9e:	464a      	mov	r2, r9
 8007ba0:	f7ff ff80 	bl	8007aa4 <memcpy>
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bae:	81a3      	strh	r3, [r4, #12]
 8007bb0:	6126      	str	r6, [r4, #16]
 8007bb2:	6165      	str	r5, [r4, #20]
 8007bb4:	444e      	add	r6, r9
 8007bb6:	eba5 0509 	sub.w	r5, r5, r9
 8007bba:	6026      	str	r6, [r4, #0]
 8007bbc:	60a5      	str	r5, [r4, #8]
 8007bbe:	463e      	mov	r6, r7
 8007bc0:	42be      	cmp	r6, r7
 8007bc2:	d900      	bls.n	8007bc6 <__ssputs_r+0x72>
 8007bc4:	463e      	mov	r6, r7
 8007bc6:	6820      	ldr	r0, [r4, #0]
 8007bc8:	4632      	mov	r2, r6
 8007bca:	4641      	mov	r1, r8
 8007bcc:	f000 fb82 	bl	80082d4 <memmove>
 8007bd0:	68a3      	ldr	r3, [r4, #8]
 8007bd2:	1b9b      	subs	r3, r3, r6
 8007bd4:	60a3      	str	r3, [r4, #8]
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	4433      	add	r3, r6
 8007bda:	6023      	str	r3, [r4, #0]
 8007bdc:	2000      	movs	r0, #0
 8007bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be2:	462a      	mov	r2, r5
 8007be4:	f000 fb48 	bl	8008278 <_realloc_r>
 8007be8:	4606      	mov	r6, r0
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d1e0      	bne.n	8007bb0 <__ssputs_r+0x5c>
 8007bee:	6921      	ldr	r1, [r4, #16]
 8007bf0:	4650      	mov	r0, sl
 8007bf2:	f7ff ff65 	bl	8007ac0 <_free_r>
 8007bf6:	230c      	movs	r3, #12
 8007bf8:	f8ca 3000 	str.w	r3, [sl]
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c02:	81a3      	strh	r3, [r4, #12]
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c08:	e7e9      	b.n	8007bde <__ssputs_r+0x8a>
	...

08007c0c <_svfiprintf_r>:
 8007c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c10:	4698      	mov	r8, r3
 8007c12:	898b      	ldrh	r3, [r1, #12]
 8007c14:	061b      	lsls	r3, r3, #24
 8007c16:	b09d      	sub	sp, #116	@ 0x74
 8007c18:	4607      	mov	r7, r0
 8007c1a:	460d      	mov	r5, r1
 8007c1c:	4614      	mov	r4, r2
 8007c1e:	d510      	bpl.n	8007c42 <_svfiprintf_r+0x36>
 8007c20:	690b      	ldr	r3, [r1, #16]
 8007c22:	b973      	cbnz	r3, 8007c42 <_svfiprintf_r+0x36>
 8007c24:	2140      	movs	r1, #64	@ 0x40
 8007c26:	f000 f90f 	bl	8007e48 <_malloc_r>
 8007c2a:	6028      	str	r0, [r5, #0]
 8007c2c:	6128      	str	r0, [r5, #16]
 8007c2e:	b930      	cbnz	r0, 8007c3e <_svfiprintf_r+0x32>
 8007c30:	230c      	movs	r3, #12
 8007c32:	603b      	str	r3, [r7, #0]
 8007c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c38:	b01d      	add	sp, #116	@ 0x74
 8007c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3e:	2340      	movs	r3, #64	@ 0x40
 8007c40:	616b      	str	r3, [r5, #20]
 8007c42:	2300      	movs	r3, #0
 8007c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c46:	2320      	movs	r3, #32
 8007c48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c50:	2330      	movs	r3, #48	@ 0x30
 8007c52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007df0 <_svfiprintf_r+0x1e4>
 8007c56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c5a:	f04f 0901 	mov.w	r9, #1
 8007c5e:	4623      	mov	r3, r4
 8007c60:	469a      	mov	sl, r3
 8007c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c66:	b10a      	cbz	r2, 8007c6c <_svfiprintf_r+0x60>
 8007c68:	2a25      	cmp	r2, #37	@ 0x25
 8007c6a:	d1f9      	bne.n	8007c60 <_svfiprintf_r+0x54>
 8007c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c70:	d00b      	beq.n	8007c8a <_svfiprintf_r+0x7e>
 8007c72:	465b      	mov	r3, fp
 8007c74:	4622      	mov	r2, r4
 8007c76:	4629      	mov	r1, r5
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f7ff ff6b 	bl	8007b54 <__ssputs_r>
 8007c7e:	3001      	adds	r0, #1
 8007c80:	f000 80a7 	beq.w	8007dd2 <_svfiprintf_r+0x1c6>
 8007c84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c86:	445a      	add	r2, fp
 8007c88:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 809f 	beq.w	8007dd2 <_svfiprintf_r+0x1c6>
 8007c94:	2300      	movs	r3, #0
 8007c96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c9e:	f10a 0a01 	add.w	sl, sl, #1
 8007ca2:	9304      	str	r3, [sp, #16]
 8007ca4:	9307      	str	r3, [sp, #28]
 8007ca6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007caa:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cac:	4654      	mov	r4, sl
 8007cae:	2205      	movs	r2, #5
 8007cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb4:	484e      	ldr	r0, [pc, #312]	@ (8007df0 <_svfiprintf_r+0x1e4>)
 8007cb6:	f7f8 faa3 	bl	8000200 <memchr>
 8007cba:	9a04      	ldr	r2, [sp, #16]
 8007cbc:	b9d8      	cbnz	r0, 8007cf6 <_svfiprintf_r+0xea>
 8007cbe:	06d0      	lsls	r0, r2, #27
 8007cc0:	bf44      	itt	mi
 8007cc2:	2320      	movmi	r3, #32
 8007cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cc8:	0711      	lsls	r1, r2, #28
 8007cca:	bf44      	itt	mi
 8007ccc:	232b      	movmi	r3, #43	@ 0x2b
 8007cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cd8:	d015      	beq.n	8007d06 <_svfiprintf_r+0xfa>
 8007cda:	9a07      	ldr	r2, [sp, #28]
 8007cdc:	4654      	mov	r4, sl
 8007cde:	2000      	movs	r0, #0
 8007ce0:	f04f 0c0a 	mov.w	ip, #10
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cea:	3b30      	subs	r3, #48	@ 0x30
 8007cec:	2b09      	cmp	r3, #9
 8007cee:	d94b      	bls.n	8007d88 <_svfiprintf_r+0x17c>
 8007cf0:	b1b0      	cbz	r0, 8007d20 <_svfiprintf_r+0x114>
 8007cf2:	9207      	str	r2, [sp, #28]
 8007cf4:	e014      	b.n	8007d20 <_svfiprintf_r+0x114>
 8007cf6:	eba0 0308 	sub.w	r3, r0, r8
 8007cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	9304      	str	r3, [sp, #16]
 8007d02:	46a2      	mov	sl, r4
 8007d04:	e7d2      	b.n	8007cac <_svfiprintf_r+0xa0>
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	1d19      	adds	r1, r3, #4
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	9103      	str	r1, [sp, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	bfbb      	ittet	lt
 8007d12:	425b      	neglt	r3, r3
 8007d14:	f042 0202 	orrlt.w	r2, r2, #2
 8007d18:	9307      	strge	r3, [sp, #28]
 8007d1a:	9307      	strlt	r3, [sp, #28]
 8007d1c:	bfb8      	it	lt
 8007d1e:	9204      	strlt	r2, [sp, #16]
 8007d20:	7823      	ldrb	r3, [r4, #0]
 8007d22:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d24:	d10a      	bne.n	8007d3c <_svfiprintf_r+0x130>
 8007d26:	7863      	ldrb	r3, [r4, #1]
 8007d28:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d2a:	d132      	bne.n	8007d92 <_svfiprintf_r+0x186>
 8007d2c:	9b03      	ldr	r3, [sp, #12]
 8007d2e:	1d1a      	adds	r2, r3, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	9203      	str	r2, [sp, #12]
 8007d34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d38:	3402      	adds	r4, #2
 8007d3a:	9305      	str	r3, [sp, #20]
 8007d3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007e00 <_svfiprintf_r+0x1f4>
 8007d40:	7821      	ldrb	r1, [r4, #0]
 8007d42:	2203      	movs	r2, #3
 8007d44:	4650      	mov	r0, sl
 8007d46:	f7f8 fa5b 	bl	8000200 <memchr>
 8007d4a:	b138      	cbz	r0, 8007d5c <_svfiprintf_r+0x150>
 8007d4c:	9b04      	ldr	r3, [sp, #16]
 8007d4e:	eba0 000a 	sub.w	r0, r0, sl
 8007d52:	2240      	movs	r2, #64	@ 0x40
 8007d54:	4082      	lsls	r2, r0
 8007d56:	4313      	orrs	r3, r2
 8007d58:	3401      	adds	r4, #1
 8007d5a:	9304      	str	r3, [sp, #16]
 8007d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d60:	4824      	ldr	r0, [pc, #144]	@ (8007df4 <_svfiprintf_r+0x1e8>)
 8007d62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d66:	2206      	movs	r2, #6
 8007d68:	f7f8 fa4a 	bl	8000200 <memchr>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d036      	beq.n	8007dde <_svfiprintf_r+0x1d2>
 8007d70:	4b21      	ldr	r3, [pc, #132]	@ (8007df8 <_svfiprintf_r+0x1ec>)
 8007d72:	bb1b      	cbnz	r3, 8007dbc <_svfiprintf_r+0x1b0>
 8007d74:	9b03      	ldr	r3, [sp, #12]
 8007d76:	3307      	adds	r3, #7
 8007d78:	f023 0307 	bic.w	r3, r3, #7
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	9303      	str	r3, [sp, #12]
 8007d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d82:	4433      	add	r3, r6
 8007d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d86:	e76a      	b.n	8007c5e <_svfiprintf_r+0x52>
 8007d88:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	2001      	movs	r0, #1
 8007d90:	e7a8      	b.n	8007ce4 <_svfiprintf_r+0xd8>
 8007d92:	2300      	movs	r3, #0
 8007d94:	3401      	adds	r4, #1
 8007d96:	9305      	str	r3, [sp, #20]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	f04f 0c0a 	mov.w	ip, #10
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007da4:	3a30      	subs	r2, #48	@ 0x30
 8007da6:	2a09      	cmp	r2, #9
 8007da8:	d903      	bls.n	8007db2 <_svfiprintf_r+0x1a6>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0c6      	beq.n	8007d3c <_svfiprintf_r+0x130>
 8007dae:	9105      	str	r1, [sp, #20]
 8007db0:	e7c4      	b.n	8007d3c <_svfiprintf_r+0x130>
 8007db2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007db6:	4604      	mov	r4, r0
 8007db8:	2301      	movs	r3, #1
 8007dba:	e7f0      	b.n	8007d9e <_svfiprintf_r+0x192>
 8007dbc:	ab03      	add	r3, sp, #12
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	462a      	mov	r2, r5
 8007dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8007dfc <_svfiprintf_r+0x1f0>)
 8007dc4:	a904      	add	r1, sp, #16
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	f3af 8000 	nop.w
 8007dcc:	1c42      	adds	r2, r0, #1
 8007dce:	4606      	mov	r6, r0
 8007dd0:	d1d6      	bne.n	8007d80 <_svfiprintf_r+0x174>
 8007dd2:	89ab      	ldrh	r3, [r5, #12]
 8007dd4:	065b      	lsls	r3, r3, #25
 8007dd6:	f53f af2d 	bmi.w	8007c34 <_svfiprintf_r+0x28>
 8007dda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ddc:	e72c      	b.n	8007c38 <_svfiprintf_r+0x2c>
 8007dde:	ab03      	add	r3, sp, #12
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	462a      	mov	r2, r5
 8007de4:	4b05      	ldr	r3, [pc, #20]	@ (8007dfc <_svfiprintf_r+0x1f0>)
 8007de6:	a904      	add	r1, sp, #16
 8007de8:	4638      	mov	r0, r7
 8007dea:	f000 f91b 	bl	8008024 <_printf_i>
 8007dee:	e7ed      	b.n	8007dcc <_svfiprintf_r+0x1c0>
 8007df0:	08008910 	.word	0x08008910
 8007df4:	0800891a 	.word	0x0800891a
 8007df8:	00000000 	.word	0x00000000
 8007dfc:	08007b55 	.word	0x08007b55
 8007e00:	08008916 	.word	0x08008916

08007e04 <sbrk_aligned>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	4e0f      	ldr	r6, [pc, #60]	@ (8007e44 <sbrk_aligned+0x40>)
 8007e08:	460c      	mov	r4, r1
 8007e0a:	6831      	ldr	r1, [r6, #0]
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	b911      	cbnz	r1, 8007e16 <sbrk_aligned+0x12>
 8007e10:	f000 fa7a 	bl	8008308 <_sbrk_r>
 8007e14:	6030      	str	r0, [r6, #0]
 8007e16:	4621      	mov	r1, r4
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f000 fa75 	bl	8008308 <_sbrk_r>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	d103      	bne.n	8007e2a <sbrk_aligned+0x26>
 8007e22:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007e26:	4620      	mov	r0, r4
 8007e28:	bd70      	pop	{r4, r5, r6, pc}
 8007e2a:	1cc4      	adds	r4, r0, #3
 8007e2c:	f024 0403 	bic.w	r4, r4, #3
 8007e30:	42a0      	cmp	r0, r4
 8007e32:	d0f8      	beq.n	8007e26 <sbrk_aligned+0x22>
 8007e34:	1a21      	subs	r1, r4, r0
 8007e36:	4628      	mov	r0, r5
 8007e38:	f000 fa66 	bl	8008308 <_sbrk_r>
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d1f2      	bne.n	8007e26 <sbrk_aligned+0x22>
 8007e40:	e7ef      	b.n	8007e22 <sbrk_aligned+0x1e>
 8007e42:	bf00      	nop
 8007e44:	2000abe8 	.word	0x2000abe8

08007e48 <_malloc_r>:
 8007e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e4c:	1ccd      	adds	r5, r1, #3
 8007e4e:	f025 0503 	bic.w	r5, r5, #3
 8007e52:	3508      	adds	r5, #8
 8007e54:	2d0c      	cmp	r5, #12
 8007e56:	bf38      	it	cc
 8007e58:	250c      	movcc	r5, #12
 8007e5a:	2d00      	cmp	r5, #0
 8007e5c:	4606      	mov	r6, r0
 8007e5e:	db01      	blt.n	8007e64 <_malloc_r+0x1c>
 8007e60:	42a9      	cmp	r1, r5
 8007e62:	d904      	bls.n	8007e6e <_malloc_r+0x26>
 8007e64:	230c      	movs	r3, #12
 8007e66:	6033      	str	r3, [r6, #0]
 8007e68:	2000      	movs	r0, #0
 8007e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f44 <_malloc_r+0xfc>
 8007e72:	f000 f9f5 	bl	8008260 <__malloc_lock>
 8007e76:	f8d8 3000 	ldr.w	r3, [r8]
 8007e7a:	461c      	mov	r4, r3
 8007e7c:	bb44      	cbnz	r4, 8007ed0 <_malloc_r+0x88>
 8007e7e:	4629      	mov	r1, r5
 8007e80:	4630      	mov	r0, r6
 8007e82:	f7ff ffbf 	bl	8007e04 <sbrk_aligned>
 8007e86:	1c43      	adds	r3, r0, #1
 8007e88:	4604      	mov	r4, r0
 8007e8a:	d158      	bne.n	8007f3e <_malloc_r+0xf6>
 8007e8c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e90:	4627      	mov	r7, r4
 8007e92:	2f00      	cmp	r7, #0
 8007e94:	d143      	bne.n	8007f1e <_malloc_r+0xd6>
 8007e96:	2c00      	cmp	r4, #0
 8007e98:	d04b      	beq.n	8007f32 <_malloc_r+0xea>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	eb04 0903 	add.w	r9, r4, r3
 8007ea4:	f000 fa30 	bl	8008308 <_sbrk_r>
 8007ea8:	4581      	cmp	r9, r0
 8007eaa:	d142      	bne.n	8007f32 <_malloc_r+0xea>
 8007eac:	6821      	ldr	r1, [r4, #0]
 8007eae:	1a6d      	subs	r5, r5, r1
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff ffa6 	bl	8007e04 <sbrk_aligned>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d03a      	beq.n	8007f32 <_malloc_r+0xea>
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	442b      	add	r3, r5
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	bb62      	cbnz	r2, 8007f24 <_malloc_r+0xdc>
 8007eca:	f8c8 7000 	str.w	r7, [r8]
 8007ece:	e00f      	b.n	8007ef0 <_malloc_r+0xa8>
 8007ed0:	6822      	ldr	r2, [r4, #0]
 8007ed2:	1b52      	subs	r2, r2, r5
 8007ed4:	d420      	bmi.n	8007f18 <_malloc_r+0xd0>
 8007ed6:	2a0b      	cmp	r2, #11
 8007ed8:	d917      	bls.n	8007f0a <_malloc_r+0xc2>
 8007eda:	1961      	adds	r1, r4, r5
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	6025      	str	r5, [r4, #0]
 8007ee0:	bf18      	it	ne
 8007ee2:	6059      	strne	r1, [r3, #4]
 8007ee4:	6863      	ldr	r3, [r4, #4]
 8007ee6:	bf08      	it	eq
 8007ee8:	f8c8 1000 	streq.w	r1, [r8]
 8007eec:	5162      	str	r2, [r4, r5]
 8007eee:	604b      	str	r3, [r1, #4]
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f000 f9bb 	bl	800826c <__malloc_unlock>
 8007ef6:	f104 000b 	add.w	r0, r4, #11
 8007efa:	1d23      	adds	r3, r4, #4
 8007efc:	f020 0007 	bic.w	r0, r0, #7
 8007f00:	1ac2      	subs	r2, r0, r3
 8007f02:	bf1c      	itt	ne
 8007f04:	1a1b      	subne	r3, r3, r0
 8007f06:	50a3      	strne	r3, [r4, r2]
 8007f08:	e7af      	b.n	8007e6a <_malloc_r+0x22>
 8007f0a:	6862      	ldr	r2, [r4, #4]
 8007f0c:	42a3      	cmp	r3, r4
 8007f0e:	bf0c      	ite	eq
 8007f10:	f8c8 2000 	streq.w	r2, [r8]
 8007f14:	605a      	strne	r2, [r3, #4]
 8007f16:	e7eb      	b.n	8007ef0 <_malloc_r+0xa8>
 8007f18:	4623      	mov	r3, r4
 8007f1a:	6864      	ldr	r4, [r4, #4]
 8007f1c:	e7ae      	b.n	8007e7c <_malloc_r+0x34>
 8007f1e:	463c      	mov	r4, r7
 8007f20:	687f      	ldr	r7, [r7, #4]
 8007f22:	e7b6      	b.n	8007e92 <_malloc_r+0x4a>
 8007f24:	461a      	mov	r2, r3
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	42a3      	cmp	r3, r4
 8007f2a:	d1fb      	bne.n	8007f24 <_malloc_r+0xdc>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	6053      	str	r3, [r2, #4]
 8007f30:	e7de      	b.n	8007ef0 <_malloc_r+0xa8>
 8007f32:	230c      	movs	r3, #12
 8007f34:	6033      	str	r3, [r6, #0]
 8007f36:	4630      	mov	r0, r6
 8007f38:	f000 f998 	bl	800826c <__malloc_unlock>
 8007f3c:	e794      	b.n	8007e68 <_malloc_r+0x20>
 8007f3e:	6005      	str	r5, [r0, #0]
 8007f40:	e7d6      	b.n	8007ef0 <_malloc_r+0xa8>
 8007f42:	bf00      	nop
 8007f44:	2000abec 	.word	0x2000abec

08007f48 <_printf_common>:
 8007f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4c:	4616      	mov	r6, r2
 8007f4e:	4698      	mov	r8, r3
 8007f50:	688a      	ldr	r2, [r1, #8]
 8007f52:	690b      	ldr	r3, [r1, #16]
 8007f54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	bfb8      	it	lt
 8007f5c:	4613      	movlt	r3, r2
 8007f5e:	6033      	str	r3, [r6, #0]
 8007f60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f64:	4607      	mov	r7, r0
 8007f66:	460c      	mov	r4, r1
 8007f68:	b10a      	cbz	r2, 8007f6e <_printf_common+0x26>
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	6033      	str	r3, [r6, #0]
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	0699      	lsls	r1, r3, #26
 8007f72:	bf42      	ittt	mi
 8007f74:	6833      	ldrmi	r3, [r6, #0]
 8007f76:	3302      	addmi	r3, #2
 8007f78:	6033      	strmi	r3, [r6, #0]
 8007f7a:	6825      	ldr	r5, [r4, #0]
 8007f7c:	f015 0506 	ands.w	r5, r5, #6
 8007f80:	d106      	bne.n	8007f90 <_printf_common+0x48>
 8007f82:	f104 0a19 	add.w	sl, r4, #25
 8007f86:	68e3      	ldr	r3, [r4, #12]
 8007f88:	6832      	ldr	r2, [r6, #0]
 8007f8a:	1a9b      	subs	r3, r3, r2
 8007f8c:	42ab      	cmp	r3, r5
 8007f8e:	dc26      	bgt.n	8007fde <_printf_common+0x96>
 8007f90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f94:	6822      	ldr	r2, [r4, #0]
 8007f96:	3b00      	subs	r3, #0
 8007f98:	bf18      	it	ne
 8007f9a:	2301      	movne	r3, #1
 8007f9c:	0692      	lsls	r2, r2, #26
 8007f9e:	d42b      	bmi.n	8007ff8 <_printf_common+0xb0>
 8007fa0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fa4:	4641      	mov	r1, r8
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	47c8      	blx	r9
 8007faa:	3001      	adds	r0, #1
 8007fac:	d01e      	beq.n	8007fec <_printf_common+0xa4>
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	6922      	ldr	r2, [r4, #16]
 8007fb2:	f003 0306 	and.w	r3, r3, #6
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	bf02      	ittt	eq
 8007fba:	68e5      	ldreq	r5, [r4, #12]
 8007fbc:	6833      	ldreq	r3, [r6, #0]
 8007fbe:	1aed      	subeq	r5, r5, r3
 8007fc0:	68a3      	ldr	r3, [r4, #8]
 8007fc2:	bf0c      	ite	eq
 8007fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fc8:	2500      	movne	r5, #0
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	bfc4      	itt	gt
 8007fce:	1a9b      	subgt	r3, r3, r2
 8007fd0:	18ed      	addgt	r5, r5, r3
 8007fd2:	2600      	movs	r6, #0
 8007fd4:	341a      	adds	r4, #26
 8007fd6:	42b5      	cmp	r5, r6
 8007fd8:	d11a      	bne.n	8008010 <_printf_common+0xc8>
 8007fda:	2000      	movs	r0, #0
 8007fdc:	e008      	b.n	8007ff0 <_printf_common+0xa8>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4652      	mov	r2, sl
 8007fe2:	4641      	mov	r1, r8
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	47c8      	blx	r9
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d103      	bne.n	8007ff4 <_printf_common+0xac>
 8007fec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff4:	3501      	adds	r5, #1
 8007ff6:	e7c6      	b.n	8007f86 <_printf_common+0x3e>
 8007ff8:	18e1      	adds	r1, r4, r3
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	2030      	movs	r0, #48	@ 0x30
 8007ffe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008002:	4422      	add	r2, r4
 8008004:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008008:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800800c:	3302      	adds	r3, #2
 800800e:	e7c7      	b.n	8007fa0 <_printf_common+0x58>
 8008010:	2301      	movs	r3, #1
 8008012:	4622      	mov	r2, r4
 8008014:	4641      	mov	r1, r8
 8008016:	4638      	mov	r0, r7
 8008018:	47c8      	blx	r9
 800801a:	3001      	adds	r0, #1
 800801c:	d0e6      	beq.n	8007fec <_printf_common+0xa4>
 800801e:	3601      	adds	r6, #1
 8008020:	e7d9      	b.n	8007fd6 <_printf_common+0x8e>
	...

08008024 <_printf_i>:
 8008024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008028:	7e0f      	ldrb	r7, [r1, #24]
 800802a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800802c:	2f78      	cmp	r7, #120	@ 0x78
 800802e:	4691      	mov	r9, r2
 8008030:	4680      	mov	r8, r0
 8008032:	460c      	mov	r4, r1
 8008034:	469a      	mov	sl, r3
 8008036:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800803a:	d807      	bhi.n	800804c <_printf_i+0x28>
 800803c:	2f62      	cmp	r7, #98	@ 0x62
 800803e:	d80a      	bhi.n	8008056 <_printf_i+0x32>
 8008040:	2f00      	cmp	r7, #0
 8008042:	f000 80d1 	beq.w	80081e8 <_printf_i+0x1c4>
 8008046:	2f58      	cmp	r7, #88	@ 0x58
 8008048:	f000 80b8 	beq.w	80081bc <_printf_i+0x198>
 800804c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008050:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008054:	e03a      	b.n	80080cc <_printf_i+0xa8>
 8008056:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800805a:	2b15      	cmp	r3, #21
 800805c:	d8f6      	bhi.n	800804c <_printf_i+0x28>
 800805e:	a101      	add	r1, pc, #4	@ (adr r1, 8008064 <_printf_i+0x40>)
 8008060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008064:	080080bd 	.word	0x080080bd
 8008068:	080080d1 	.word	0x080080d1
 800806c:	0800804d 	.word	0x0800804d
 8008070:	0800804d 	.word	0x0800804d
 8008074:	0800804d 	.word	0x0800804d
 8008078:	0800804d 	.word	0x0800804d
 800807c:	080080d1 	.word	0x080080d1
 8008080:	0800804d 	.word	0x0800804d
 8008084:	0800804d 	.word	0x0800804d
 8008088:	0800804d 	.word	0x0800804d
 800808c:	0800804d 	.word	0x0800804d
 8008090:	080081cf 	.word	0x080081cf
 8008094:	080080fb 	.word	0x080080fb
 8008098:	08008189 	.word	0x08008189
 800809c:	0800804d 	.word	0x0800804d
 80080a0:	0800804d 	.word	0x0800804d
 80080a4:	080081f1 	.word	0x080081f1
 80080a8:	0800804d 	.word	0x0800804d
 80080ac:	080080fb 	.word	0x080080fb
 80080b0:	0800804d 	.word	0x0800804d
 80080b4:	0800804d 	.word	0x0800804d
 80080b8:	08008191 	.word	0x08008191
 80080bc:	6833      	ldr	r3, [r6, #0]
 80080be:	1d1a      	adds	r2, r3, #4
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6032      	str	r2, [r6, #0]
 80080c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080cc:	2301      	movs	r3, #1
 80080ce:	e09c      	b.n	800820a <_printf_i+0x1e6>
 80080d0:	6833      	ldr	r3, [r6, #0]
 80080d2:	6820      	ldr	r0, [r4, #0]
 80080d4:	1d19      	adds	r1, r3, #4
 80080d6:	6031      	str	r1, [r6, #0]
 80080d8:	0606      	lsls	r6, r0, #24
 80080da:	d501      	bpl.n	80080e0 <_printf_i+0xbc>
 80080dc:	681d      	ldr	r5, [r3, #0]
 80080de:	e003      	b.n	80080e8 <_printf_i+0xc4>
 80080e0:	0645      	lsls	r5, r0, #25
 80080e2:	d5fb      	bpl.n	80080dc <_printf_i+0xb8>
 80080e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080e8:	2d00      	cmp	r5, #0
 80080ea:	da03      	bge.n	80080f4 <_printf_i+0xd0>
 80080ec:	232d      	movs	r3, #45	@ 0x2d
 80080ee:	426d      	negs	r5, r5
 80080f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080f4:	4858      	ldr	r0, [pc, #352]	@ (8008258 <_printf_i+0x234>)
 80080f6:	230a      	movs	r3, #10
 80080f8:	e011      	b.n	800811e <_printf_i+0xfa>
 80080fa:	6821      	ldr	r1, [r4, #0]
 80080fc:	6833      	ldr	r3, [r6, #0]
 80080fe:	0608      	lsls	r0, r1, #24
 8008100:	f853 5b04 	ldr.w	r5, [r3], #4
 8008104:	d402      	bmi.n	800810c <_printf_i+0xe8>
 8008106:	0649      	lsls	r1, r1, #25
 8008108:	bf48      	it	mi
 800810a:	b2ad      	uxthmi	r5, r5
 800810c:	2f6f      	cmp	r7, #111	@ 0x6f
 800810e:	4852      	ldr	r0, [pc, #328]	@ (8008258 <_printf_i+0x234>)
 8008110:	6033      	str	r3, [r6, #0]
 8008112:	bf14      	ite	ne
 8008114:	230a      	movne	r3, #10
 8008116:	2308      	moveq	r3, #8
 8008118:	2100      	movs	r1, #0
 800811a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800811e:	6866      	ldr	r6, [r4, #4]
 8008120:	60a6      	str	r6, [r4, #8]
 8008122:	2e00      	cmp	r6, #0
 8008124:	db05      	blt.n	8008132 <_printf_i+0x10e>
 8008126:	6821      	ldr	r1, [r4, #0]
 8008128:	432e      	orrs	r6, r5
 800812a:	f021 0104 	bic.w	r1, r1, #4
 800812e:	6021      	str	r1, [r4, #0]
 8008130:	d04b      	beq.n	80081ca <_printf_i+0x1a6>
 8008132:	4616      	mov	r6, r2
 8008134:	fbb5 f1f3 	udiv	r1, r5, r3
 8008138:	fb03 5711 	mls	r7, r3, r1, r5
 800813c:	5dc7      	ldrb	r7, [r0, r7]
 800813e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008142:	462f      	mov	r7, r5
 8008144:	42bb      	cmp	r3, r7
 8008146:	460d      	mov	r5, r1
 8008148:	d9f4      	bls.n	8008134 <_printf_i+0x110>
 800814a:	2b08      	cmp	r3, #8
 800814c:	d10b      	bne.n	8008166 <_printf_i+0x142>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	07df      	lsls	r7, r3, #31
 8008152:	d508      	bpl.n	8008166 <_printf_i+0x142>
 8008154:	6923      	ldr	r3, [r4, #16]
 8008156:	6861      	ldr	r1, [r4, #4]
 8008158:	4299      	cmp	r1, r3
 800815a:	bfde      	ittt	le
 800815c:	2330      	movle	r3, #48	@ 0x30
 800815e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008162:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008166:	1b92      	subs	r2, r2, r6
 8008168:	6122      	str	r2, [r4, #16]
 800816a:	f8cd a000 	str.w	sl, [sp]
 800816e:	464b      	mov	r3, r9
 8008170:	aa03      	add	r2, sp, #12
 8008172:	4621      	mov	r1, r4
 8008174:	4640      	mov	r0, r8
 8008176:	f7ff fee7 	bl	8007f48 <_printf_common>
 800817a:	3001      	adds	r0, #1
 800817c:	d14a      	bne.n	8008214 <_printf_i+0x1f0>
 800817e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008182:	b004      	add	sp, #16
 8008184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	f043 0320 	orr.w	r3, r3, #32
 800818e:	6023      	str	r3, [r4, #0]
 8008190:	4832      	ldr	r0, [pc, #200]	@ (800825c <_printf_i+0x238>)
 8008192:	2778      	movs	r7, #120	@ 0x78
 8008194:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	6831      	ldr	r1, [r6, #0]
 800819c:	061f      	lsls	r7, r3, #24
 800819e:	f851 5b04 	ldr.w	r5, [r1], #4
 80081a2:	d402      	bmi.n	80081aa <_printf_i+0x186>
 80081a4:	065f      	lsls	r7, r3, #25
 80081a6:	bf48      	it	mi
 80081a8:	b2ad      	uxthmi	r5, r5
 80081aa:	6031      	str	r1, [r6, #0]
 80081ac:	07d9      	lsls	r1, r3, #31
 80081ae:	bf44      	itt	mi
 80081b0:	f043 0320 	orrmi.w	r3, r3, #32
 80081b4:	6023      	strmi	r3, [r4, #0]
 80081b6:	b11d      	cbz	r5, 80081c0 <_printf_i+0x19c>
 80081b8:	2310      	movs	r3, #16
 80081ba:	e7ad      	b.n	8008118 <_printf_i+0xf4>
 80081bc:	4826      	ldr	r0, [pc, #152]	@ (8008258 <_printf_i+0x234>)
 80081be:	e7e9      	b.n	8008194 <_printf_i+0x170>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	f023 0320 	bic.w	r3, r3, #32
 80081c6:	6023      	str	r3, [r4, #0]
 80081c8:	e7f6      	b.n	80081b8 <_printf_i+0x194>
 80081ca:	4616      	mov	r6, r2
 80081cc:	e7bd      	b.n	800814a <_printf_i+0x126>
 80081ce:	6833      	ldr	r3, [r6, #0]
 80081d0:	6825      	ldr	r5, [r4, #0]
 80081d2:	6961      	ldr	r1, [r4, #20]
 80081d4:	1d18      	adds	r0, r3, #4
 80081d6:	6030      	str	r0, [r6, #0]
 80081d8:	062e      	lsls	r6, r5, #24
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	d501      	bpl.n	80081e2 <_printf_i+0x1be>
 80081de:	6019      	str	r1, [r3, #0]
 80081e0:	e002      	b.n	80081e8 <_printf_i+0x1c4>
 80081e2:	0668      	lsls	r0, r5, #25
 80081e4:	d5fb      	bpl.n	80081de <_printf_i+0x1ba>
 80081e6:	8019      	strh	r1, [r3, #0]
 80081e8:	2300      	movs	r3, #0
 80081ea:	6123      	str	r3, [r4, #16]
 80081ec:	4616      	mov	r6, r2
 80081ee:	e7bc      	b.n	800816a <_printf_i+0x146>
 80081f0:	6833      	ldr	r3, [r6, #0]
 80081f2:	1d1a      	adds	r2, r3, #4
 80081f4:	6032      	str	r2, [r6, #0]
 80081f6:	681e      	ldr	r6, [r3, #0]
 80081f8:	6862      	ldr	r2, [r4, #4]
 80081fa:	2100      	movs	r1, #0
 80081fc:	4630      	mov	r0, r6
 80081fe:	f7f7 ffff 	bl	8000200 <memchr>
 8008202:	b108      	cbz	r0, 8008208 <_printf_i+0x1e4>
 8008204:	1b80      	subs	r0, r0, r6
 8008206:	6060      	str	r0, [r4, #4]
 8008208:	6863      	ldr	r3, [r4, #4]
 800820a:	6123      	str	r3, [r4, #16]
 800820c:	2300      	movs	r3, #0
 800820e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008212:	e7aa      	b.n	800816a <_printf_i+0x146>
 8008214:	6923      	ldr	r3, [r4, #16]
 8008216:	4632      	mov	r2, r6
 8008218:	4649      	mov	r1, r9
 800821a:	4640      	mov	r0, r8
 800821c:	47d0      	blx	sl
 800821e:	3001      	adds	r0, #1
 8008220:	d0ad      	beq.n	800817e <_printf_i+0x15a>
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	079b      	lsls	r3, r3, #30
 8008226:	d413      	bmi.n	8008250 <_printf_i+0x22c>
 8008228:	68e0      	ldr	r0, [r4, #12]
 800822a:	9b03      	ldr	r3, [sp, #12]
 800822c:	4298      	cmp	r0, r3
 800822e:	bfb8      	it	lt
 8008230:	4618      	movlt	r0, r3
 8008232:	e7a6      	b.n	8008182 <_printf_i+0x15e>
 8008234:	2301      	movs	r3, #1
 8008236:	4632      	mov	r2, r6
 8008238:	4649      	mov	r1, r9
 800823a:	4640      	mov	r0, r8
 800823c:	47d0      	blx	sl
 800823e:	3001      	adds	r0, #1
 8008240:	d09d      	beq.n	800817e <_printf_i+0x15a>
 8008242:	3501      	adds	r5, #1
 8008244:	68e3      	ldr	r3, [r4, #12]
 8008246:	9903      	ldr	r1, [sp, #12]
 8008248:	1a5b      	subs	r3, r3, r1
 800824a:	42ab      	cmp	r3, r5
 800824c:	dcf2      	bgt.n	8008234 <_printf_i+0x210>
 800824e:	e7eb      	b.n	8008228 <_printf_i+0x204>
 8008250:	2500      	movs	r5, #0
 8008252:	f104 0619 	add.w	r6, r4, #25
 8008256:	e7f5      	b.n	8008244 <_printf_i+0x220>
 8008258:	08008921 	.word	0x08008921
 800825c:	08008932 	.word	0x08008932

08008260 <__malloc_lock>:
 8008260:	4801      	ldr	r0, [pc, #4]	@ (8008268 <__malloc_lock+0x8>)
 8008262:	f7ff bbbf 	b.w	80079e4 <__retarget_lock_acquire_recursive>
 8008266:	bf00      	nop
 8008268:	2000abe0 	.word	0x2000abe0

0800826c <__malloc_unlock>:
 800826c:	4801      	ldr	r0, [pc, #4]	@ (8008274 <__malloc_unlock+0x8>)
 800826e:	f7ff bbba 	b.w	80079e6 <__retarget_lock_release_recursive>
 8008272:	bf00      	nop
 8008274:	2000abe0 	.word	0x2000abe0

08008278 <_realloc_r>:
 8008278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827c:	4607      	mov	r7, r0
 800827e:	4614      	mov	r4, r2
 8008280:	460d      	mov	r5, r1
 8008282:	b921      	cbnz	r1, 800828e <_realloc_r+0x16>
 8008284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008288:	4611      	mov	r1, r2
 800828a:	f7ff bddd 	b.w	8007e48 <_malloc_r>
 800828e:	b92a      	cbnz	r2, 800829c <_realloc_r+0x24>
 8008290:	f7ff fc16 	bl	8007ac0 <_free_r>
 8008294:	4625      	mov	r5, r4
 8008296:	4628      	mov	r0, r5
 8008298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800829c:	f000 f844 	bl	8008328 <_malloc_usable_size_r>
 80082a0:	4284      	cmp	r4, r0
 80082a2:	4606      	mov	r6, r0
 80082a4:	d802      	bhi.n	80082ac <_realloc_r+0x34>
 80082a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082aa:	d8f4      	bhi.n	8008296 <_realloc_r+0x1e>
 80082ac:	4621      	mov	r1, r4
 80082ae:	4638      	mov	r0, r7
 80082b0:	f7ff fdca 	bl	8007e48 <_malloc_r>
 80082b4:	4680      	mov	r8, r0
 80082b6:	b908      	cbnz	r0, 80082bc <_realloc_r+0x44>
 80082b8:	4645      	mov	r5, r8
 80082ba:	e7ec      	b.n	8008296 <_realloc_r+0x1e>
 80082bc:	42b4      	cmp	r4, r6
 80082be:	4622      	mov	r2, r4
 80082c0:	4629      	mov	r1, r5
 80082c2:	bf28      	it	cs
 80082c4:	4632      	movcs	r2, r6
 80082c6:	f7ff fbed 	bl	8007aa4 <memcpy>
 80082ca:	4629      	mov	r1, r5
 80082cc:	4638      	mov	r0, r7
 80082ce:	f7ff fbf7 	bl	8007ac0 <_free_r>
 80082d2:	e7f1      	b.n	80082b8 <_realloc_r+0x40>

080082d4 <memmove>:
 80082d4:	4288      	cmp	r0, r1
 80082d6:	b510      	push	{r4, lr}
 80082d8:	eb01 0402 	add.w	r4, r1, r2
 80082dc:	d902      	bls.n	80082e4 <memmove+0x10>
 80082de:	4284      	cmp	r4, r0
 80082e0:	4623      	mov	r3, r4
 80082e2:	d807      	bhi.n	80082f4 <memmove+0x20>
 80082e4:	1e43      	subs	r3, r0, #1
 80082e6:	42a1      	cmp	r1, r4
 80082e8:	d008      	beq.n	80082fc <memmove+0x28>
 80082ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082f2:	e7f8      	b.n	80082e6 <memmove+0x12>
 80082f4:	4402      	add	r2, r0
 80082f6:	4601      	mov	r1, r0
 80082f8:	428a      	cmp	r2, r1
 80082fa:	d100      	bne.n	80082fe <memmove+0x2a>
 80082fc:	bd10      	pop	{r4, pc}
 80082fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008306:	e7f7      	b.n	80082f8 <memmove+0x24>

08008308 <_sbrk_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d06      	ldr	r5, [pc, #24]	@ (8008324 <_sbrk_r+0x1c>)
 800830c:	2300      	movs	r3, #0
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	f7f8 fc82 	bl	8000c1c <_sbrk>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_sbrk_r+0x1a>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_sbrk_r+0x1a>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	2000abe4 	.word	0x2000abe4

08008328 <_malloc_usable_size_r>:
 8008328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800832c:	1f18      	subs	r0, r3, #4
 800832e:	2b00      	cmp	r3, #0
 8008330:	bfbc      	itt	lt
 8008332:	580b      	ldrlt	r3, [r1, r0]
 8008334:	18c0      	addlt	r0, r0, r3
 8008336:	4770      	bx	lr

08008338 <_init>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	bf00      	nop
 800833c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833e:	bc08      	pop	{r3}
 8008340:	469e      	mov	lr, r3
 8008342:	4770      	bx	lr

08008344 <_fini>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	bf00      	nop
 8008348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834a:	bc08      	pop	{r3}
 800834c:	469e      	mov	lr, r3
 800834e:	4770      	bx	lr
