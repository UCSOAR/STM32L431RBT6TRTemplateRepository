
STM32L431RBT6TR_Template_Repository.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08007cf8  08007cf8  00008cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082f0  080082f0  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  080082f0  080082f0  000092f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082f8  080082f8  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080082f8  080082f8  000092f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08008304  08008304  00009304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800830c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ab3c  20000060  0800836c  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ab9c  0800836c  0000ab9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b022  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000702f  00000000  00000000  000350b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  0003c0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001419  00000000  00000000  0003db80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bfbc  00000000  00000000  0003ef99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002559f  00000000  00000000  0006af55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7fd4  00000000  00000000  000904f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001784c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007104  00000000  00000000  0017850c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0017f610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ce0 	.word	0x08007ce0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007ce0 	.word	0x08007ce0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <run_interface>:
#include "main_system.hpp"
#include "UARTDriver.hpp"

extern "C" {
    void run_interface()
    {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
        run_main();
 80002a4:	f000 f87c 	bl	80003a0 <_Z8run_mainv>
    }
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}

080002ac <_ZN10UARTDriverC1EP13USART_TypeDef>:
 *	      based on the STM32 LL Library
 */
class UARTDriver
{
public:
	UARTDriver(USART_TypeDef* uartInstance) :
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
		kUart_(uartInstance),
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	601a      	str	r2, [r3, #0]
		rxCharBuf_(nullptr),
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
		rxReceiver_(nullptr) {}
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4618      	mov	r0, r3
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
	...

080002d8 <_ZN8CubeTask4InstEv>:

/* Class ------------------------------------------------------------------*/
class CubeTask : public Task
{
public:
    static CubeTask& Inst() {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
        static CubeTask inst;
 80002dc:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <_ZN8CubeTask4InstEv+0x48>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f3bf 8f5b 	dmb	ish
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	bf0c      	ite	eq
 80002ec:	2301      	moveq	r3, #1
 80002ee:	2300      	movne	r3, #0
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d010      	beq.n	8000318 <_ZN8CubeTask4InstEv+0x40>
 80002f6:	480a      	ldr	r0, [pc, #40]	@ (8000320 <_ZN8CubeTask4InstEv+0x48>)
 80002f8:	f006 ff9e 	bl	8007238 <__cxa_guard_acquire>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	bf14      	ite	ne
 8000302:	2301      	movne	r3, #1
 8000304:	2300      	moveq	r3, #0
 8000306:	b2db      	uxtb	r3, r3
 8000308:	2b00      	cmp	r3, #0
 800030a:	d005      	beq.n	8000318 <_ZN8CubeTask4InstEv+0x40>
 800030c:	4805      	ldr	r0, [pc, #20]	@ (8000324 <_ZN8CubeTask4InstEv+0x4c>)
 800030e:	f000 f80b 	bl	8000328 <_ZN8CubeTaskC1Ev>
 8000312:	4803      	ldr	r0, [pc, #12]	@ (8000320 <_ZN8CubeTask4InstEv+0x48>)
 8000314:	f006 ff9c 	bl	8007250 <__cxa_guard_release>
        return inst;
 8000318:	4b02      	ldr	r3, [pc, #8]	@ (8000324 <_ZN8CubeTask4InstEv+0x4c>)
    }
 800031a:	4618      	mov	r0, r3
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000088 	.word	0x20000088
 8000324:	2000007c 	.word	0x2000007c

08000328 <_ZN8CubeTaskC1Ev>:
    void Run(void* pvParams);    // Main run code

    void HandleCommand(Command& cm);

private:
    CubeTask() : Task(UART_TASK_QUEUE_DEPTH_OBJS) {}    // Private constructor
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	210a      	movs	r1, #10
 8000334:	4618      	mov	r0, r3
 8000336:	f006 fbc1 	bl	8006abc <_ZN4TaskC1Et>
 800033a:	4a04      	ldr	r2, [pc, #16]	@ (800034c <_ZN8CubeTaskC1Ev+0x24>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4618      	mov	r0, r3
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	080082b8 	.word	0x080082b8

08000350 <_ZN9DebugTask4InstEv>:
constexpr uint16_t DEBUG_RX_BUFFER_SZ_BYTES = 16;

/* Class ------------------------------------------------------------------*/
class DebugTask : public Task, public UARTReceiverBase {
 public:
  static DebugTask& Inst() {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
    static DebugTask inst;
 8000354:	4b10      	ldr	r3, [pc, #64]	@ (8000398 <_ZN9DebugTask4InstEv+0x48>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f3bf 8f5b 	dmb	ish
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b00      	cmp	r3, #0
 8000362:	bf0c      	ite	eq
 8000364:	2301      	moveq	r3, #1
 8000366:	2300      	movne	r3, #0
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b00      	cmp	r3, #0
 800036c:	d010      	beq.n	8000390 <_ZN9DebugTask4InstEv+0x40>
 800036e:	480a      	ldr	r0, [pc, #40]	@ (8000398 <_ZN9DebugTask4InstEv+0x48>)
 8000370:	f006 ff62 	bl	8007238 <__cxa_guard_acquire>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	bf14      	ite	ne
 800037a:	2301      	movne	r3, #1
 800037c:	2300      	moveq	r3, #0
 800037e:	b2db      	uxtb	r3, r3
 8000380:	2b00      	cmp	r3, #0
 8000382:	d005      	beq.n	8000390 <_ZN9DebugTask4InstEv+0x40>
 8000384:	4805      	ldr	r0, [pc, #20]	@ (800039c <_ZN9DebugTask4InstEv+0x4c>)
 8000386:	f005 ffe7 	bl	8006358 <_ZN9DebugTaskC1Ev>
 800038a:	4803      	ldr	r0, [pc, #12]	@ (8000398 <_ZN9DebugTask4InstEv+0x48>)
 800038c:	f006 ff60 	bl	8007250 <__cxa_guard_release>
    return inst;
 8000390:	4b02      	ldr	r3, [pc, #8]	@ (800039c <_ZN9DebugTask4InstEv+0x4c>)
  }
 8000392:	4618      	mov	r0, r3
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200000b4 	.word	0x200000b4
 800039c:	2000008c 	.word	0x2000008c

080003a0 <_Z8run_mainv>:

/* Interface Functions ------------------------------------------------------------*/
/**
 * @brief Main function interface, called inside main.cpp before os initialization takes place.
*/
void run_main() {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
    // Init Tasks
    CubeTask::Inst().InitTask();
 80003a4:	f7ff ff98 	bl	80002d8 <_ZN8CubeTask4InstEv>
 80003a8:	4603      	mov	r3, r0
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	6812      	ldr	r2, [r2, #0]
 80003ae:	4618      	mov	r0, r3
 80003b0:	4790      	blx	r2
    DebugTask::Inst().InitTask();
 80003b2:	f7ff ffcd 	bl	8000350 <_ZN9DebugTask4InstEv>
 80003b6:	4603      	mov	r3, r0
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	6812      	ldr	r2, [r2, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	4790      	blx	r2

    // Print System Boot Info : Warning, don't queue more than 10 prints before scheduler starts
    SOAR_PRINT("\n-- CUBE SYSTEM --\n");
 80003c0:	4811      	ldr	r0, [pc, #68]	@ (8000408 <_Z8run_mainv+0x68>)
 80003c2:	f006 fbad 	bl	8006b20 <_Z10cube_printPKcz>
    SOAR_PRINT("System Reset Reason: [TODO]\n"); //TODO: System reset reason can be implemented via. Flash storage
 80003c6:	4811      	ldr	r0, [pc, #68]	@ (800040c <_Z8run_mainv+0x6c>)
 80003c8:	f006 fbaa 	bl	8006b20 <_Z10cube_printPKcz>
    SOAR_PRINT("Current System Free Heap: %d Bytes\n", xPortGetFreeHeapSize());
 80003cc:	f005 fee0 	bl	8006190 <xPortGetFreeHeapSize>
 80003d0:	4603      	mov	r3, r0
 80003d2:	4619      	mov	r1, r3
 80003d4:	480e      	ldr	r0, [pc, #56]	@ (8000410 <_Z8run_mainv+0x70>)
 80003d6:	f006 fba3 	bl	8006b20 <_Z10cube_printPKcz>
    SOAR_PRINT("Lowest Ever Free Heap: %d Bytes\n\n", xPortGetMinimumEverFreeHeapSize());
 80003da:	f005 fee5 	bl	80061a8 <xPortGetMinimumEverFreeHeapSize>
 80003de:	4603      	mov	r3, r0
 80003e0:	4619      	mov	r1, r3
 80003e2:	480c      	ldr	r0, [pc, #48]	@ (8000414 <_Z8run_mainv+0x74>)
 80003e4:	f006 fb9c 	bl	8006b20 <_Z10cube_printPKcz>

    // Start the Scheduler
    // Guidelines:
    // - Be CAREFUL with race conditions after osKernelStart
    // - All uses of new and delete should be closely monitored after this point
    osKernelStart();
 80003e8:	f002 fff6 	bl	80033d8 <osKernelStart>

    // Should never reach here
    SOAR_ASSERT(false, "osKernelStart() failed");
 80003ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000418 <_Z8run_mainv+0x78>)
 80003ee:	222b      	movs	r2, #43	@ 0x2b
 80003f0:	490a      	ldr	r1, [pc, #40]	@ (800041c <_Z8run_mainv+0x7c>)
 80003f2:	2000      	movs	r0, #0
 80003f4:	f006 fbf6 	bl	8006be4 <_Z17cube_assert_debugbPKctS0_z>

    while (1)
    {
        osDelay(100);
 80003f8:	2064      	movs	r0, #100	@ 0x64
 80003fa:	f002 fff4 	bl	80033e6 <osDelay>
        HAL_NVIC_SystemReset();
 80003fe:	f000 fd18 	bl	8000e32 <HAL_NVIC_SystemReset>
        osDelay(100);
 8000402:	bf00      	nop
 8000404:	e7f8      	b.n	80003f8 <_Z8run_mainv+0x58>
 8000406:	bf00      	nop
 8000408:	08007cf8 	.word	0x08007cf8
 800040c:	08007d0c 	.word	0x08007d0c
 8000410:	08007d2c 	.word	0x08007d2c
 8000414:	08007d50 	.word	0x08007d50
 8000418:	08007d74 	.word	0x08007d74
 800041c:	08007d8c 	.word	0x08007d8c

08000420 <_Z41__static_initialization_and_destruction_0ii>:
    }
}
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d108      	bne.n	8000442 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000436:	4293      	cmp	r3, r2
 8000438:	d103      	bne.n	8000442 <_Z41__static_initialization_and_destruction_0ii+0x22>
    UARTDriver uart1(USART1);
 800043a:	4904      	ldr	r1, [pc, #16]	@ (800044c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800043c:	4804      	ldr	r0, [pc, #16]	@ (8000450 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800043e:	f7ff ff35 	bl	80002ac <_ZN10UARTDriverC1EP13USART_TypeDef>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40013800 	.word	0x40013800
 8000450:	200000b8 	.word	0x200000b8

08000454 <_GLOBAL__sub_I__ZN6Driver5uart1E>:
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
 8000458:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800045c:	2001      	movs	r0, #1
 800045e:	f7ff ffdf 	bl	8000420 <_Z41__static_initialization_and_destruction_0ii>
 8000462:	bd80      	pop	{r7, pc}

08000464 <_ZNK7Command10GetCommandEv>:
    void Reset();    // Reset the command, equivalent of a destructor that must be called, counts allocations and deallocations, asserts an error if the allocation count is too high

    // Getters
    uint16_t GetDataSize() const;
    uint8_t* GetDataPointer() const { return data; }
    GLOBAL_COMMANDS GetCommand() const { return command; }
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	4618      	mov	r0, r3
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <_ZNK7Command14GetTaskCommandEv>:
    uint16_t GetTaskCommand() const { return taskCommand; }
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	885b      	ldrh	r3, [r3, #2]
 8000488:	4618      	mov	r0, r3
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <_ZN16UARTReceiverBaseC1Ev>:
class UARTReceiverBase
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	4a04      	ldr	r2, [pc, #16]	@ (80004b0 <_ZN16UARTReceiverBaseC1Ev+0x1c>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4618      	mov	r0, r3
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	0800823c 	.word	0x0800823c

080004b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	4a07      	ldr	r2, [pc, #28]	@ (80004e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80004c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	4a06      	ldr	r2, [pc, #24]	@ (80004e4 <vApplicationGetIdleTaskMemory+0x30>)
 80004ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	22c0      	movs	r2, #192	@ 0xc0
 80004d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	200000c4 	.word	0x200000c4
 80004e4:	20000164 	.word	0x20000164

080004e8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4a07      	ldr	r2, [pc, #28]	@ (8000514 <vApplicationGetTimerTaskMemory+0x2c>)
 80004f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	4a06      	ldr	r2, [pc, #24]	@ (8000518 <vApplicationGetTimerTaskMemory+0x30>)
 80004fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000506:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	20000464 	.word	0x20000464
 8000518:	20000504 	.word	0x20000504

0800051c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000520:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <__NVIC_GetPriorityGrouping+0x18>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	0a1b      	lsrs	r3, r3, #8
 8000526:	f003 0307 	and.w	r3, r3, #7
}
 800052a:	4618      	mov	r0, r3
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000546:	2b00      	cmp	r3, #0
 8000548:	db0b      	blt.n	8000562 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	f003 021f 	and.w	r2, r3, #31
 8000550:	4907      	ldr	r1, [pc, #28]	@ (8000570 <__NVIC_EnableIRQ+0x38>)
 8000552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000556:	095b      	lsrs	r3, r3, #5
 8000558:	2001      	movs	r0, #1
 800055a:	fa00 f202 	lsl.w	r2, r0, r2
 800055e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e000e100 	.word	0xe000e100

08000574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	6039      	str	r1, [r7, #0]
 800057e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000584:	2b00      	cmp	r3, #0
 8000586:	db0a      	blt.n	800059e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	b2da      	uxtb	r2, r3
 800058c:	490c      	ldr	r1, [pc, #48]	@ (80005c0 <__NVIC_SetPriority+0x4c>)
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	0112      	lsls	r2, r2, #4
 8000594:	b2d2      	uxtb	r2, r2
 8000596:	440b      	add	r3, r1
 8000598:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800059c:	e00a      	b.n	80005b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4908      	ldr	r1, [pc, #32]	@ (80005c4 <__NVIC_SetPriority+0x50>)
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	f003 030f 	and.w	r3, r3, #15
 80005aa:	3b04      	subs	r3, #4
 80005ac:	0112      	lsls	r2, r2, #4
 80005ae:	b2d2      	uxtb	r2, r2
 80005b0:	440b      	add	r3, r1
 80005b2:	761a      	strb	r2, [r3, #24]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	e000e100 	.word	0xe000e100
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b089      	sub	sp, #36	@ 0x24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	f1c3 0307 	rsb	r3, r3, #7
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	bf28      	it	cs
 80005e6:	2304      	movcs	r3, #4
 80005e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	3304      	adds	r3, #4
 80005ee:	2b06      	cmp	r3, #6
 80005f0:	d902      	bls.n	80005f8 <NVIC_EncodePriority+0x30>
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	3b03      	subs	r3, #3
 80005f6:	e000      	b.n	80005fa <NVIC_EncodePriority+0x32>
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	43da      	mvns	r2, r3
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	401a      	ands	r2, r3
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000610:	f04f 31ff 	mov.w	r1, #4294967295
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	fa01 f303 	lsl.w	r3, r1, r3
 800061a:	43d9      	mvns	r1, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	4313      	orrs	r3, r2
         );
}
 8000622:	4618      	mov	r0, r3
 8000624:	3724      	adds	r7, #36	@ 0x24
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f043 0201 	orr.w	r2, r3, #1
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	601a      	str	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	609a      	str	r2, [r3, #8]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000684:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000686:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000688:	4907      	ldr	r1, [pc, #28]	@ (80006a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4313      	orrs	r3, r2
 800068e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000692:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4013      	ands	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	40021000 	.word	0x40021000

080006ac <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80006b8:	4907      	ldr	r1, [pc, #28]	@ (80006d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4313      	orrs	r3, r2
 80006be:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4013      	ands	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ca:	68fb      	ldr	r3, [r7, #12]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	40021000 	.word	0x40021000

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f000 fa75 	bl	8000bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f80b 	bl	80006fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f000 f8ec 	bl	80008c4 <MX_GPIO_Init>
  MX_CRC_Init();
 80006ec:	f000 f84e 	bl	800078c <MX_CRC_Init>
  MX_USART1_UART_Init();
 80006f0:	f000 f86e 	bl	80007d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  run_interface();
 80006f4:	f7ff fdd4 	bl	80002a0 <run_interface>
 80006f8:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */
  }
#endif
  /* USER CODE END 3 */
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	bd80      	pop	{r7, pc}

080006fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b096      	sub	sp, #88	@ 0x58
 8000702:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	2244      	movs	r2, #68	@ 0x44
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f006 fe11 	bl	8007334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000720:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000724:	f000 fc8a 	bl	800103c <HAL_PWREx_ControlVoltageScaling>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800072e:	f000 f8f3 	bl	8000918 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000732:	2310      	movs	r3, #16
 8000734:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000736:	2301      	movs	r3, #1
 8000738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800073e:	2360      	movs	r3, #96	@ 0x60
 8000740:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000742:	2300      	movs	r3, #0
 8000744:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fccc 	bl	80010e8 <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000756:	f000 f8df 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f001 f8cc 	bl	8001910 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800077e:	f000 f8cb 	bl	8000918 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3758      	adds	r7, #88	@ 0x58
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000790:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <MX_CRC_Init+0x3c>)
 8000792:	4a0e      	ldr	r2, [pc, #56]	@ (80007cc <MX_CRC_Init+0x40>)
 8000794:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000796:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_CRC_Init+0x3c>)
 8000798:	2200      	movs	r2, #0
 800079a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800079c:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <MX_CRC_Init+0x3c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_CRC_Init+0x3c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <MX_CRC_Init+0x3c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_CRC_Init+0x3c>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <MX_CRC_Init+0x3c>)
 80007b6:	f000 fb41 	bl	8000e3c <HAL_CRC_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007c0:	f000 f8aa 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000b04 	.word	0x20000b04
 80007cc:	40023000 	.word	0x40023000

080007d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0a4      	sub	sp, #144	@ 0x90
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80007d6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
 80007e6:	615a      	str	r2, [r3, #20]
 80007e8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
 80007fa:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	225c      	movs	r2, #92	@ 0x5c
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f006 fd96 	bl	8007334 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000808:	2301      	movs	r3, #1
 800080a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fabc 	bl	8001d90 <HAL_RCCEx_PeriphCLKConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f87b 	bl	8000918 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000822:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000826:	f7ff ff41 	bl	80006ac <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff ff26 	bl	800067c <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000830:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000834:	65fb      	str	r3, [r7, #92]	@ 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000836:	2302      	movs	r3, #2
 8000838:	663b      	str	r3, [r7, #96]	@ 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	667b      	str	r3, [r7, #100]	@ 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	66bb      	str	r3, [r7, #104]	@ 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000842:	2300      	movs	r3, #0
 8000844:	66fb      	str	r3, [r7, #108]	@ 0x6c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000846:	2307      	movs	r3, #7
 8000848:	673b      	str	r3, [r7, #112]	@ 0x70
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800084e:	4619      	mov	r1, r3
 8000850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000854:	f002 f965 	bl	8002b22 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000858:	f7ff fe60 	bl	800051c <__NVIC_GetPriorityGrouping>
 800085c:	4603      	mov	r3, r0
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff feb0 	bl	80005c8 <NVIC_EncodePriority>
 8000868:	4603      	mov	r3, r0
 800086a:	4619      	mov	r1, r3
 800086c:	2025      	movs	r0, #37	@ 0x25
 800086e:	f7ff fe81 	bl	8000574 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000872:	2025      	movs	r0, #37	@ 0x25
 8000874:	f7ff fe60 	bl	8000538 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000878:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800087c:	677b      	str	r3, [r7, #116]	@ 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800087e:	2300      	movs	r3, #0
 8000880:	67bb      	str	r3, [r7, #120]	@ 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000882:	2300      	movs	r3, #0
 8000884:	67fb      	str	r3, [r7, #124]	@ 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800088c:	230c      	movs	r3, #12
 800088e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  LL_USART_Init(USART1, &USART_InitStruct);
 800089e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80008a2:	4619      	mov	r1, r3
 80008a4:	4806      	ldr	r0, [pc, #24]	@ (80008c0 <MX_USART1_UART_Init+0xf0>)
 80008a6:	f002 fd31 	bl	800330c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_USART1_UART_Init+0xf0>)
 80008ac:	f7ff fecf 	bl	800064e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80008b0:	4803      	ldr	r0, [pc, #12]	@ (80008c0 <MX_USART1_UART_Init+0xf0>)
 80008b2:	f7ff febc 	bl	800062e <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	3790      	adds	r7, #144	@ 0x90
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40013800 	.word	0x40013800

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_GPIO_Init+0x2c>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <MX_GPIO_Init+0x2c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_GPIO_Init+0x2c>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a04      	ldr	r2, [pc, #16]	@ (8000914 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d101      	bne.n	800090a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000906:	f000 f97b 	bl	8000c00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40012c00 	.word	0x40012c00

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <HAL_MspInit+0x4c>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092e:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <HAL_MspInit+0x4c>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6613      	str	r3, [r2, #96]	@ 0x60
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <HAL_MspInit+0x4c>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <HAL_MspInit+0x4c>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6593      	str	r3, [r2, #88]	@ 0x58
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <HAL_MspInit+0x4c>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	210f      	movs	r1, #15
 800095e:	f06f 0001 	mvn.w	r0, #1
 8000962:	f000 fa3c 	bl	8000dde <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0a      	ldr	r2, [pc, #40]	@ (80009ac <HAL_CRC_MspInit+0x38>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d10b      	bne.n	800099e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <HAL_CRC_MspInit+0x3c>)
 8000988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800098a:	4a09      	ldr	r2, [pc, #36]	@ (80009b0 <HAL_CRC_MspInit+0x3c>)
 800098c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000990:	6493      	str	r3, [r2, #72]	@ 0x48
 8000992:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <HAL_CRC_MspInit+0x3c>)
 8000994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000996:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023000 	.word	0x40023000
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	@ 0x30
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009c2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a7c <HAL_InitTick+0xc8>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009c6:	4a2d      	ldr	r2, [pc, #180]	@ (8000a7c <HAL_InitTick+0xc8>)
 80009c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ce:	4b2b      	ldr	r3, [pc, #172]	@ (8000a7c <HAL_InitTick+0xc8>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009da:	f107 020c 	add.w	r2, r7, #12
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 f941 	bl	8001c6c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009ea:	f001 f929 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 80009ee:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009f2:	4a23      	ldr	r2, [pc, #140]	@ (8000a80 <HAL_InitTick+0xcc>)
 80009f4:	fba2 2303 	umull	r2, r3, r2, r3
 80009f8:	0c9b      	lsrs	r3, r3, #18
 80009fa:	3b01      	subs	r3, #1
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009fe:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <HAL_InitTick+0xd0>)
 8000a00:	4a21      	ldr	r2, [pc, #132]	@ (8000a88 <HAL_InitTick+0xd4>)
 8000a02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <HAL_InitTick+0xd0>)
 8000a06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a0a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a84 <HAL_InitTick+0xd0>)
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a10:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <HAL_InitTick+0xd0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <HAL_InitTick+0xd0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <HAL_InitTick+0xd0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a24:	4817      	ldr	r0, [pc, #92]	@ (8000a84 <HAL_InitTick+0xd0>)
 8000a26:	f001 fcbd 	bl	80023a4 <HAL_TIM_Base_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d11b      	bne.n	8000a70 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a38:	4812      	ldr	r0, [pc, #72]	@ (8000a84 <HAL_InitTick+0xd0>)
 8000a3a:	f001 fd15 	bl	8002468 <HAL_TIM_Base_Start_IT>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d111      	bne.n	8000a70 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a4c:	2019      	movs	r0, #25
 8000a4e:	f000 f9e2 	bl	8000e16 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d808      	bhi.n	8000a6a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	2019      	movs	r0, #25
 8000a5e:	f000 f9be 	bl	8000dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <HAL_InitTick+0xd8>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	e002      	b.n	8000a70 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3730      	adds	r7, #48	@ 0x30
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	20000b28 	.word	0x20000b28
 8000a88:	40012c00 	.word	0x40012c00
 8000a8c:	20000004 	.word	0x20000004

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000acc:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ace:	f001 fd1f 	bl	8002510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000b28 	.word	0x20000b28

08000adc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	@ (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f006 fc68 	bl	80073f0 <__errno>
 8000b20:	4603      	mov	r3, r0
 8000b22:	220c      	movs	r2, #12
 8000b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a05      	ldr	r2, [pc, #20]	@ (8000b50 <_sbrk+0x64>)
 8000b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000c000 	.word	0x2000c000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	20000b74 	.word	0x20000b74
 8000b54:	2000aba0 	.word	0x2000aba0

08000b58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <SystemInit+0x20>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <SystemInit+0x20>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b80:	f7ff ffea 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	@ (8000bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc0 <LoopForever+0xe>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc8 <LoopForever+0x16>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000baa:	f006 fc27 	bl	80073fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bae:	f7ff fd95 	bl	80006dc <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bc0:	0800830c 	.word	0x0800830c
  ldr r2, =_sbss
 8000bc4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bc8:	2000ab9c 	.word	0x2000ab9c

08000bcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_IRQHandler>

08000bce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f8f5 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bde:	200f      	movs	r0, #15
 8000be0:	f7ff fee8 	bl	80009b4 <HAL_InitTick>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	71fb      	strb	r3, [r7, #7]
 8000bee:	e001      	b.n	8000bf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf0:	f7ff fe98 	bl	8000924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20000b78 	.word	0x20000b78

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	@ (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000b78 	.word	0x20000b78

08000c40 <__NVIC_SetPriorityGrouping>:
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_EnableIRQ>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db0b      	blt.n	8000cce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 021f 	and.w	r2, r3, #31
 8000cbc:	4907      	ldr	r1, [pc, #28]	@ (8000cdc <__NVIC_EnableIRQ+0x38>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	095b      	lsrs	r3, r3, #5
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	@ (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	@ (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	@ 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	@ 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000da0:	f3bf 8f4f 	dsb	sy
}
 8000da4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <__NVIC_SystemReset+0x24>)
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000dae:	4904      	ldr	r1, [pc, #16]	@ (8000dc0 <__NVIC_SystemReset+0x24>)
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <__NVIC_SystemReset+0x28>)
 8000db2:	4313      	orrs	r3, r2
 8000db4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000db6:	f3bf 8f4f 	dsb	sy
}
 8000dba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <__NVIC_SystemReset+0x20>
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	05fa0004 	.word	0x05fa0004

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff35 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff4a 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff9a 	bl	8000d34 <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff69 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff3d 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000e36:	f7ff ffb1 	bl	8000d9c <__NVIC_SystemReset>
	...

08000e3c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e054      	b.n	8000ef8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7f5b      	ldrb	r3, [r3, #29]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d105      	bne.n	8000e64 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fd88 	bl	8000974 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2202      	movs	r2, #2
 8000e68:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	791b      	ldrb	r3, [r3, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10c      	bne.n	8000e8c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a22      	ldr	r2, [pc, #136]	@ (8000f00 <HAL_CRC_Init+0xc4>)
 8000e78:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0218 	bic.w	r2, r2, #24
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	e00c      	b.n	8000ea6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6899      	ldr	r1, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	461a      	mov	r2, r3
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 f834 	bl	8000f04 <HAL_CRCEx_Polynomial_Set>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e028      	b.n	8000ef8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	795b      	ldrb	r3, [r3, #5]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d105      	bne.n	8000eba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	e004      	b.n	8000ec4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6912      	ldr	r2, [r2, #16]
 8000ec2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695a      	ldr	r2, [r3, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	699a      	ldr	r2, [r3, #24]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	430a      	orrs	r2, r1
 8000eee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	04c11db7 	.word	0x04c11db7

08000f04 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000f14:	231f      	movs	r3, #31
 8000f16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d102      	bne.n	8000f28 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	75fb      	strb	r3, [r7, #23]
 8000f26:	e063      	b.n	8000ff0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000f28:	bf00      	nop
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1e5a      	subs	r2, r3, #1
 8000f2e:	613a      	str	r2, [r7, #16]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d009      	beq.n	8000f48 <HAL_CRCEx_Polynomial_Set+0x44>
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	f003 031f 	and.w	r3, r3, #31
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f0      	beq.n	8000f2a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b18      	cmp	r3, #24
 8000f4c:	d846      	bhi.n	8000fdc <HAL_CRCEx_Polynomial_Set+0xd8>
 8000f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f54 <HAL_CRCEx_Polynomial_Set+0x50>)
 8000f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f54:	08000fe3 	.word	0x08000fe3
 8000f58:	08000fdd 	.word	0x08000fdd
 8000f5c:	08000fdd 	.word	0x08000fdd
 8000f60:	08000fdd 	.word	0x08000fdd
 8000f64:	08000fdd 	.word	0x08000fdd
 8000f68:	08000fdd 	.word	0x08000fdd
 8000f6c:	08000fdd 	.word	0x08000fdd
 8000f70:	08000fdd 	.word	0x08000fdd
 8000f74:	08000fd1 	.word	0x08000fd1
 8000f78:	08000fdd 	.word	0x08000fdd
 8000f7c:	08000fdd 	.word	0x08000fdd
 8000f80:	08000fdd 	.word	0x08000fdd
 8000f84:	08000fdd 	.word	0x08000fdd
 8000f88:	08000fdd 	.word	0x08000fdd
 8000f8c:	08000fdd 	.word	0x08000fdd
 8000f90:	08000fdd 	.word	0x08000fdd
 8000f94:	08000fc5 	.word	0x08000fc5
 8000f98:	08000fdd 	.word	0x08000fdd
 8000f9c:	08000fdd 	.word	0x08000fdd
 8000fa0:	08000fdd 	.word	0x08000fdd
 8000fa4:	08000fdd 	.word	0x08000fdd
 8000fa8:	08000fdd 	.word	0x08000fdd
 8000fac:	08000fdd 	.word	0x08000fdd
 8000fb0:	08000fdd 	.word	0x08000fdd
 8000fb4:	08000fb9 	.word	0x08000fb9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d913      	bls.n	8000fe6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000fc2:	e010      	b.n	8000fe6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	2b07      	cmp	r3, #7
 8000fc8:	d90f      	bls.n	8000fea <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000fce:	e00c      	b.n	8000fea <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	d90b      	bls.n	8000fee <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000fda:	e008      	b.n	8000fee <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	75fb      	strb	r3, [r7, #23]
        break;
 8000fe0:	e006      	b.n	8000ff0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000fe2:	bf00      	nop
 8000fe4:	e004      	b.n	8000ff0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000fe6:	bf00      	nop
 8000fe8:	e002      	b.n	8000ff0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000fea:	bf00      	nop
 8000fec:	e000      	b.n	8000ff0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000fee:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10d      	bne.n	8001012 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f023 0118 	bic.w	r1, r3, #24
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	430a      	orrs	r2, r1
 8001010:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001012:	7dfb      	ldrb	r3, [r7, #23]
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001024:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <HAL_PWREx_GetVoltageRange+0x18>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40007000 	.word	0x40007000

0800103c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800104a:	d130      	bne.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800104c:	4b23      	ldr	r3, [pc, #140]	@ (80010dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001058:	d038      	beq.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800105a:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001062:	4a1e      	ldr	r2, [pc, #120]	@ (80010dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001064:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001068:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800106a:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2232      	movs	r2, #50	@ 0x32
 8001070:	fb02 f303 	mul.w	r3, r2, r3
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	0c9b      	lsrs	r3, r3, #18
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001080:	e002      	b.n	8001088 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3b01      	subs	r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001088:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001094:	d102      	bne.n	800109c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f2      	bne.n	8001082 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800109c:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010a8:	d110      	bne.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e00f      	b.n	80010ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010ae:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ba:	d007      	beq.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010c4:	4a05      	ldr	r2, [pc, #20]	@ (80010dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40007000 	.word	0x40007000
 80010e0:	20000000 	.word	0x20000000
 80010e4:	431bde83 	.word	0x431bde83

080010e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f000 bc02 	b.w	8001900 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010fc:	4b96      	ldr	r3, [pc, #600]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001106:	4b94      	ldr	r3, [pc, #592]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0310 	and.w	r3, r3, #16
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80e4 	beq.w	80012e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d007      	beq.n	8001134 <HAL_RCC_OscConfig+0x4c>
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	2b0c      	cmp	r3, #12
 8001128:	f040 808b 	bne.w	8001242 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2b01      	cmp	r3, #1
 8001130:	f040 8087 	bne.w	8001242 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001134:	4b88      	ldr	r3, [pc, #544]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <HAL_RCC_OscConfig+0x64>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e3d9      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1a      	ldr	r2, [r3, #32]
 8001150:	4b81      	ldr	r3, [pc, #516]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0308 	and.w	r3, r3, #8
 8001158:	2b00      	cmp	r3, #0
 800115a:	d004      	beq.n	8001166 <HAL_RCC_OscConfig+0x7e>
 800115c:	4b7e      	ldr	r3, [pc, #504]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001164:	e005      	b.n	8001172 <HAL_RCC_OscConfig+0x8a>
 8001166:	4b7c      	ldr	r3, [pc, #496]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001172:	4293      	cmp	r3, r2
 8001174:	d223      	bcs.n	80011be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fda8 	bl	8001cd0 <RCC_SetFlashLatencyFromMSIRange>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e3ba      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800118a:	4b73      	ldr	r3, [pc, #460]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a72      	ldr	r2, [pc, #456]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b70      	ldr	r3, [pc, #448]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	496d      	ldr	r1, [pc, #436]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	4968      	ldr	r1, [pc, #416]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
 80011bc:	e025      	b.n	800120a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011be:	4b66      	ldr	r3, [pc, #408]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a65      	ldr	r2, [pc, #404]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80011c4:	f043 0308 	orr.w	r3, r3, #8
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b63      	ldr	r3, [pc, #396]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4960      	ldr	r1, [pc, #384]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	495b      	ldr	r1, [pc, #364]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d109      	bne.n	800120a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fd68 	bl	8001cd0 <RCC_SetFlashLatencyFromMSIRange>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e37a      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800120a:	f000 fc81 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 800120e:	4602      	mov	r2, r0
 8001210:	4b51      	ldr	r3, [pc, #324]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	4950      	ldr	r1, [pc, #320]	@ (800135c <HAL_RCC_OscConfig+0x274>)
 800121c:	5ccb      	ldrb	r3, [r1, r3]
 800121e:	f003 031f 	and.w	r3, r3, #31
 8001222:	fa22 f303 	lsr.w	r3, r2, r3
 8001226:	4a4e      	ldr	r2, [pc, #312]	@ (8001360 <HAL_RCC_OscConfig+0x278>)
 8001228:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800122a:	4b4e      	ldr	r3, [pc, #312]	@ (8001364 <HAL_RCC_OscConfig+0x27c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fbc0 	bl	80009b4 <HAL_InitTick>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d052      	beq.n	80012e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	e35e      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d032      	beq.n	80012b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800124a:	4b43      	ldr	r3, [pc, #268]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a42      	ldr	r2, [pc, #264]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001256:	f7ff fce7 	bl	8000c28 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800125e:	f7ff fce3 	bl	8000c28 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e347      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001270:	4b39      	ldr	r3, [pc, #228]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0f0      	beq.n	800125e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800127c:	4b36      	ldr	r3, [pc, #216]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a35      	ldr	r2, [pc, #212]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b33      	ldr	r3, [pc, #204]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4930      	ldr	r1, [pc, #192]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800129a:	4b2f      	ldr	r3, [pc, #188]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	492b      	ldr	r1, [pc, #172]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	604b      	str	r3, [r1, #4]
 80012ae:	e01a      	b.n	80012e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012b0:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a28      	ldr	r2, [pc, #160]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80012b6:	f023 0301 	bic.w	r3, r3, #1
 80012ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fcb4 	bl	8000c28 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012c4:	f7ff fcb0 	bl	8000c28 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e314      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012d6:	4b20      	ldr	r3, [pc, #128]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x1dc>
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d073      	beq.n	80013da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d005      	beq.n	8001304 <HAL_RCC_OscConfig+0x21c>
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	2b0c      	cmp	r3, #12
 80012fc:	d10e      	bne.n	800131c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d10b      	bne.n	800131c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d063      	beq.n	80013d8 <HAL_RCC_OscConfig+0x2f0>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d15f      	bne.n	80013d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e2f1      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001324:	d106      	bne.n	8001334 <HAL_RCC_OscConfig+0x24c>
 8001326:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a0b      	ldr	r2, [pc, #44]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e025      	b.n	8001380 <HAL_RCC_OscConfig+0x298>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800133c:	d114      	bne.n	8001368 <HAL_RCC_OscConfig+0x280>
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a05      	ldr	r2, [pc, #20]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a02      	ldr	r2, [pc, #8]	@ (8001358 <HAL_RCC_OscConfig+0x270>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e013      	b.n	8001380 <HAL_RCC_OscConfig+0x298>
 8001358:	40021000 	.word	0x40021000
 800135c:	08008240 	.word	0x08008240
 8001360:	20000000 	.word	0x20000000
 8001364:	20000004 	.word	0x20000004
 8001368:	4ba0      	ldr	r3, [pc, #640]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a9f      	ldr	r2, [pc, #636]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 800136e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b9d      	ldr	r3, [pc, #628]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a9c      	ldr	r2, [pc, #624]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800137e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fc4e 	bl	8000c28 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fc4a 	bl	8000c28 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	@ 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e2ae      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013a2:	4b92      	ldr	r3, [pc, #584]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0x2a8>
 80013ae:	e014      	b.n	80013da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b0:	f7ff fc3a 	bl	8000c28 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fc36 	bl	8000c28 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	@ 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e29a      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ca:	4b88      	ldr	r3, [pc, #544]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x2d0>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d060      	beq.n	80014a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_OscConfig+0x310>
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	d119      	bne.n	8001426 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d116      	bne.n	8001426 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f8:	4b7c      	ldr	r3, [pc, #496]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_OscConfig+0x328>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e277      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b76      	ldr	r3, [pc, #472]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	061b      	lsls	r3, r3, #24
 800141e:	4973      	ldr	r1, [pc, #460]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001424:	e040      	b.n	80014a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d023      	beq.n	8001476 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142e:	4b6f      	ldr	r3, [pc, #444]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6e      	ldr	r2, [pc, #440]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143a:	f7ff fbf5 	bl	8000c28 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff fbf1 	bl	8000c28 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e255      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001454:	4b65      	ldr	r3, [pc, #404]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b62      	ldr	r3, [pc, #392]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	061b      	lsls	r3, r3, #24
 800146e:	495f      	ldr	r1, [pc, #380]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
 8001474:	e018      	b.n	80014a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001476:	4b5d      	ldr	r3, [pc, #372]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a5c      	ldr	r2, [pc, #368]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 800147c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001482:	f7ff fbd1 	bl	8000c28 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148a:	f7ff fbcd 	bl	8000c28 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e231      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800149c:	4b53      	ldr	r3, [pc, #332]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f0      	bne.n	800148a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d03c      	beq.n	800152e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d01c      	beq.n	80014f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014bc:	4b4b      	ldr	r3, [pc, #300]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 80014be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014c2:	4a4a      	ldr	r2, [pc, #296]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014cc:	f7ff fbac 	bl	8000c28 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d4:	f7ff fba8 	bl	8000c28 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e20c      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014e6:	4b41      	ldr	r3, [pc, #260]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 80014e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0ef      	beq.n	80014d4 <HAL_RCC_OscConfig+0x3ec>
 80014f4:	e01b      	b.n	800152e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f6:	4b3d      	ldr	r3, [pc, #244]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 80014f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014fc:	4a3b      	ldr	r2, [pc, #236]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001506:	f7ff fb8f 	bl	8000c28 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150e:	f7ff fb8b 	bl	8000c28 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e1ef      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001520:	4b32      	ldr	r3, [pc, #200]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 8001522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1ef      	bne.n	800150e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 80a6 	beq.w	8001688 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153c:	2300      	movs	r3, #0
 800153e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001540:	4b2a      	ldr	r3, [pc, #168]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10d      	bne.n	8001568 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154c:	4b27      	ldr	r3, [pc, #156]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 800154e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001550:	4a26      	ldr	r2, [pc, #152]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 8001552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001556:	6593      	str	r3, [r2, #88]	@ 0x58
 8001558:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 800155a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001564:	2301      	movs	r3, #1
 8001566:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001568:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <HAL_RCC_OscConfig+0x508>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d118      	bne.n	80015a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001574:	4b1e      	ldr	r3, [pc, #120]	@ (80015f0 <HAL_RCC_OscConfig+0x508>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1d      	ldr	r2, [pc, #116]	@ (80015f0 <HAL_RCC_OscConfig+0x508>)
 800157a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001580:	f7ff fb52 	bl	8000c28 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001588:	f7ff fb4e 	bl	8000c28 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1b2      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <HAL_RCC_OscConfig+0x508>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d108      	bne.n	80015c0 <HAL_RCC_OscConfig+0x4d8>
 80015ae:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 80015b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b4:	4a0d      	ldr	r2, [pc, #52]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015be:	e029      	b.n	8001614 <HAL_RCC_OscConfig+0x52c>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d115      	bne.n	80015f4 <HAL_RCC_OscConfig+0x50c>
 80015c8:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 80015ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ce:	4a07      	ldr	r2, [pc, #28]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015d8:	4b04      	ldr	r3, [pc, #16]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 80015da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015de:	4a03      	ldr	r2, [pc, #12]	@ (80015ec <HAL_RCC_OscConfig+0x504>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015e8:	e014      	b.n	8001614 <HAL_RCC_OscConfig+0x52c>
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40007000 	.word	0x40007000
 80015f4:	4b9a      	ldr	r3, [pc, #616]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 80015f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015fa:	4a99      	ldr	r2, [pc, #612]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 80015fc:	f023 0301 	bic.w	r3, r3, #1
 8001600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001604:	4b96      	ldr	r3, [pc, #600]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 8001606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800160a:	4a95      	ldr	r2, [pc, #596]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d016      	beq.n	800164a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff fb04 	bl	8000c28 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001622:	e00a      	b.n	800163a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff fb00 	bl	8000c28 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e162      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800163a:	4b89      	ldr	r3, [pc, #548]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 800163c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0ed      	beq.n	8001624 <HAL_RCC_OscConfig+0x53c>
 8001648:	e015      	b.n	8001676 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164a:	f7ff faed 	bl	8000c28 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001652:	f7ff fae9 	bl	8000c28 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001660:	4293      	cmp	r3, r2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e14b      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001668:	4b7d      	ldr	r3, [pc, #500]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 800166a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1ed      	bne.n	8001652 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001676:	7ffb      	ldrb	r3, [r7, #31]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800167c:	4b78      	ldr	r3, [pc, #480]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001680:	4a77      	ldr	r2, [pc, #476]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 8001682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001686:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0320 	and.w	r3, r3, #32
 8001690:	2b00      	cmp	r3, #0
 8001692:	d03c      	beq.n	800170e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001698:	2b00      	cmp	r3, #0
 800169a:	d01c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800169c:	4b70      	ldr	r3, [pc, #448]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 800169e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016a2:	4a6f      	ldr	r2, [pc, #444]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fabc 	bl	8000c28 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016b4:	f7ff fab8 	bl	8000c28 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e11c      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016c6:	4b66      	ldr	r3, [pc, #408]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 80016c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ef      	beq.n	80016b4 <HAL_RCC_OscConfig+0x5cc>
 80016d4:	e01b      	b.n	800170e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016d6:	4b62      	ldr	r3, [pc, #392]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 80016d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016dc:	4a60      	ldr	r2, [pc, #384]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7ff fa9f 	bl	8000c28 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ee:	f7ff fa9b 	bl	8000c28 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e0ff      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001700:	4b57      	ldr	r3, [pc, #348]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 8001702:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ef      	bne.n	80016ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 80f3 	beq.w	80018fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171c:	2b02      	cmp	r3, #2
 800171e:	f040 80c9 	bne.w	80018b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001722:	4b4f      	ldr	r3, [pc, #316]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f003 0203 	and.w	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001732:	429a      	cmp	r2, r3
 8001734:	d12c      	bne.n	8001790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001740:	3b01      	subs	r3, #1
 8001742:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001744:	429a      	cmp	r2, r3
 8001746:	d123      	bne.n	8001790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001752:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d11b      	bne.n	8001790 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001762:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d113      	bne.n	8001790 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001772:	085b      	lsrs	r3, r3, #1
 8001774:	3b01      	subs	r3, #1
 8001776:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d109      	bne.n	8001790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	085b      	lsrs	r3, r3, #1
 8001788:	3b01      	subs	r3, #1
 800178a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d06b      	beq.n	8001868 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d062      	beq.n	800185c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001796:	4b32      	ldr	r3, [pc, #200]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0ac      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 80017ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017b2:	f7ff fa39 	bl	8000c28 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff fa35 	bl	8000c28 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e099      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017cc:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d8:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <HAL_RCC_OscConfig+0x77c>)
 80017de:	4013      	ands	r3, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017e8:	3a01      	subs	r2, #1
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	4311      	orrs	r1, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017f2:	0212      	lsls	r2, r2, #8
 80017f4:	4311      	orrs	r1, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017fa:	0852      	lsrs	r2, r2, #1
 80017fc:	3a01      	subs	r2, #1
 80017fe:	0552      	lsls	r2, r2, #21
 8001800:	4311      	orrs	r1, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001806:	0852      	lsrs	r2, r2, #1
 8001808:	3a01      	subs	r2, #1
 800180a:	0652      	lsls	r2, r2, #25
 800180c:	4311      	orrs	r1, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001812:	06d2      	lsls	r2, r2, #27
 8001814:	430a      	orrs	r2, r1
 8001816:	4912      	ldr	r1, [pc, #72]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 8001818:	4313      	orrs	r3, r2
 800181a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800181c:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0f      	ldr	r2, [pc, #60]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 8001822:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001826:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001828:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4a0c      	ldr	r2, [pc, #48]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 800182e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001832:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001834:	f7ff f9f8 	bl	8000c28 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f9f4 	bl	8000c28 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e058      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184e:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <HAL_RCC_OscConfig+0x778>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800185a:	e050      	b.n	80018fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e04f      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
 8001860:	40021000 	.word	0x40021000
 8001864:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001868:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <HAL_RCC_OscConfig+0x820>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d144      	bne.n	80018fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001874:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <HAL_RCC_OscConfig+0x820>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a23      	ldr	r2, [pc, #140]	@ (8001908 <HAL_RCC_OscConfig+0x820>)
 800187a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800187e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001880:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <HAL_RCC_OscConfig+0x820>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4a20      	ldr	r2, [pc, #128]	@ (8001908 <HAL_RCC_OscConfig+0x820>)
 8001886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800188a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800188c:	f7ff f9cc 	bl	8000c28 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff f9c8 	bl	8000c28 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e02c      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a6:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <HAL_RCC_OscConfig+0x820>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x7ac>
 80018b2:	e024      	b.n	80018fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d01f      	beq.n	80018fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ba:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <HAL_RCC_OscConfig+0x820>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <HAL_RCC_OscConfig+0x820>)
 80018c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff f9af 	bl	8000c28 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff f9ab 	bl	8000c28 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e00f      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e0:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <HAL_RCC_OscConfig+0x820>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_RCC_OscConfig+0x820>)
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	4905      	ldr	r1, [pc, #20]	@ (8001908 <HAL_RCC_OscConfig+0x820>)
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_RCC_OscConfig+0x824>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	60cb      	str	r3, [r1, #12]
 80018f8:	e001      	b.n	80018fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000
 800190c:	feeefffc 	.word	0xfeeefffc

08001910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0e7      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b75      	ldr	r3, [pc, #468]	@ (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d910      	bls.n	8001954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b72      	ldr	r3, [pc, #456]	@ (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 0207 	bic.w	r2, r3, #7
 800193a:	4970      	ldr	r1, [pc, #448]	@ (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b6e      	ldr	r3, [pc, #440]	@ (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0cf      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d010      	beq.n	8001982 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	4b66      	ldr	r3, [pc, #408]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800196c:	429a      	cmp	r2, r3
 800196e:	d908      	bls.n	8001982 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001970:	4b63      	ldr	r3, [pc, #396]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4960      	ldr	r1, [pc, #384]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d04c      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d107      	bne.n	80019a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001996:	4b5a      	ldr	r3, [pc, #360]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d121      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0a6      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ae:	4b54      	ldr	r3, [pc, #336]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d115      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e09a      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e08e      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e086      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019e6:	4b46      	ldr	r3, [pc, #280]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f023 0203 	bic.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4943      	ldr	r1, [pc, #268]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f8:	f7ff f916 	bl	8000c28 <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7ff f912 	bl	8000c28 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e06e      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	4b3a      	ldr	r3, [pc, #232]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 020c 	and.w	r2, r3, #12
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d1eb      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d010      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	4b31      	ldr	r3, [pc, #196]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d208      	bcs.n	8001a56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	4b2e      	ldr	r3, [pc, #184]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	492b      	ldr	r1, [pc, #172]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a56:	4b29      	ldr	r3, [pc, #164]	@ (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d210      	bcs.n	8001a86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a64:	4b25      	ldr	r3, [pc, #148]	@ (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 0207 	bic.w	r2, r3, #7
 8001a6c:	4923      	ldr	r1, [pc, #140]	@ (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a74:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <HAL_RCC_ClockConfig+0x1ec>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e036      	b.n	8001af4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d008      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a92:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	4918      	ldr	r1, [pc, #96]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d009      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab0:	4b13      	ldr	r3, [pc, #76]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4910      	ldr	r1, [pc, #64]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ac4:	f000 f824 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	490b      	ldr	r1, [pc, #44]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f4>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae0:	4a09      	ldr	r2, [pc, #36]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ae4:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <HAL_RCC_ClockConfig+0x1fc>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe ff63 	bl	80009b4 <HAL_InitTick>
 8001aee:	4603      	mov	r3, r0
 8001af0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001af2:	7afb      	ldrb	r3, [r7, #11]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40022000 	.word	0x40022000
 8001b00:	40021000 	.word	0x40021000
 8001b04:	08008240 	.word	0x08008240
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	@ 0x24
 8001b14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b28:	4b3b      	ldr	r3, [pc, #236]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x34>
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	2b0c      	cmp	r3, #12
 8001b3c:	d121      	bne.n	8001b82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d11e      	bne.n	8001b82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b44:	4b34      	ldr	r3, [pc, #208]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b50:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e005      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b60:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10d      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d102      	bne.n	8001b8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b88:	4b25      	ldr	r3, [pc, #148]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	e004      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b94:	4b23      	ldr	r3, [pc, #140]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d134      	bne.n	8001c08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d003      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0xac>
 8001bb4:	e005      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bb8:	617b      	str	r3, [r7, #20]
      break;
 8001bba:	e005      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bbc:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bbe:	617b      	str	r3, [r7, #20]
      break;
 8001bc0:	e002      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	617b      	str	r3, [r7, #20]
      break;
 8001bc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	fb03 f202 	mul.w	r2, r3, r2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	0e5b      	lsrs	r3, r3, #25
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c08:	69bb      	ldr	r3, [r7, #24]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	@ 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	08008258 	.word	0x08008258
 8001c20:	00f42400 	.word	0x00f42400
 8001c24:	007a1200 	.word	0x007a1200

08001c28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000000 	.word	0x20000000

08001c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c44:	f7ff fff0 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0adb      	lsrs	r3, r3, #11
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4904      	ldr	r1, [pc, #16]	@ (8001c68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08008250 	.word	0x08008250

08001c6c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	220f      	movs	r2, #15
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001c7c:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0203 	and.w	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001c88:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001c94:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	08db      	lsrs	r3, r3, #3
 8001ca6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <HAL_RCC_GetClockConfig+0x60>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0207 	and.w	r2, r3, #7
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	601a      	str	r2, [r3, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40022000 	.word	0x40022000

08001cd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cd8:	2300      	movs	r3, #0
 8001cda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8001d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ce8:	f7ff f99a 	bl	8001020 <HAL_PWREx_GetVoltageRange>
 8001cec:	6178      	str	r0, [r7, #20]
 8001cee:	e014      	b.n	8001d1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cf0:	4b25      	ldr	r3, [pc, #148]	@ (8001d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf4:	4a24      	ldr	r2, [pc, #144]	@ (8001d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cfc:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d08:	f7ff f98a 	bl	8001020 <HAL_PWREx_GetVoltageRange>
 8001d0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d12:	4a1d      	ldr	r2, [pc, #116]	@ (8001d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d18:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d20:	d10b      	bne.n	8001d3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b80      	cmp	r3, #128	@ 0x80
 8001d26:	d919      	bls.n	8001d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d2c:	d902      	bls.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d2e:	2302      	movs	r3, #2
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	e013      	b.n	8001d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d34:	2301      	movs	r3, #1
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	e010      	b.n	8001d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b80      	cmp	r3, #128	@ 0x80
 8001d3e:	d902      	bls.n	8001d46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d40:	2303      	movs	r3, #3
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	e00a      	b.n	8001d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b80      	cmp	r3, #128	@ 0x80
 8001d4a:	d102      	bne.n	8001d52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	e004      	b.n	8001d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b70      	cmp	r3, #112	@ 0x70
 8001d56:	d101      	bne.n	8001d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d58:	2301      	movs	r3, #1
 8001d5a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 0207 	bic.w	r2, r3, #7
 8001d64:	4909      	ldr	r1, [pc, #36]	@ (8001d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d6c:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d001      	beq.n	8001d7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40022000 	.word	0x40022000

08001d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d98:	2300      	movs	r3, #0
 8001d9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d031      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001db4:	d01a      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001db6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001dba:	d814      	bhi.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d009      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001dc4:	d10f      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4a5c      	ldr	r2, [pc, #368]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dd2:	e00c      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f9f0 	bl	80021c0 <RCCEx_PLLSAI1_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001de4:	e003      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	74fb      	strb	r3, [r7, #19]
      break;
 8001dea:	e000      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dee:	7cfb      	ldrb	r3, [r7, #19]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10b      	bne.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001df4:	4b51      	ldr	r3, [pc, #324]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	494e      	ldr	r1, [pc, #312]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e0a:	e001      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e0c:	7cfb      	ldrb	r3, [r7, #19]
 8001e0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 809e 	beq.w	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e22:	4b46      	ldr	r3, [pc, #280]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001e32:	2300      	movs	r3, #0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00d      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	4b40      	ldr	r3, [pc, #256]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3c:	4a3f      	ldr	r2, [pc, #252]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e44:	4b3d      	ldr	r3, [pc, #244]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e50:	2301      	movs	r3, #1
 8001e52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e54:	4b3a      	ldr	r3, [pc, #232]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a39      	ldr	r2, [pc, #228]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e60:	f7fe fee2 	bl	8000c28 <HAL_GetTick>
 8001e64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e66:	e009      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e68:	f7fe fede 	bl	8000c28 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d902      	bls.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	74fb      	strb	r3, [r7, #19]
        break;
 8001e7a:	e005      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e7c:	4b30      	ldr	r3, [pc, #192]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ef      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001e88:	7cfb      	ldrb	r3, [r7, #19]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d15a      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01e      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d019      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001eaa:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eb4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001eb6:	4b21      	ldr	r3, [pc, #132]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ed6:	4a19      	ldr	r2, [pc, #100]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d016      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7fe fe9e 	bl	8000c28 <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eee:	e00b      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef0:	f7fe fe9a 	bl	8000c28 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d902      	bls.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	74fb      	strb	r3, [r7, #19]
            break;
 8001f06:	e006      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0ec      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001f16:	7cfb      	ldrb	r3, [r7, #19]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10b      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f1c:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f22:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	4904      	ldr	r1, [pc, #16]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f32:	e009      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f34:	7cfb      	ldrb	r3, [r7, #19]
 8001f36:	74bb      	strb	r3, [r7, #18]
 8001f38:	e006      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f48:	7c7b      	ldrb	r3, [r7, #17]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d105      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4e:	4b9b      	ldr	r3, [pc, #620]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	4a9a      	ldr	r2, [pc, #616]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f58:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00a      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f66:	4b95      	ldr	r3, [pc, #596]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6c:	f023 0203 	bic.w	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4991      	ldr	r1, [pc, #580]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00a      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f88:	4b8c      	ldr	r3, [pc, #560]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8e:	f023 020c 	bic.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f96:	4989      	ldr	r1, [pc, #548]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00a      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001faa:	4b84      	ldr	r3, [pc, #528]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	4980      	ldr	r1, [pc, #512]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00a      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fcc:	4b7b      	ldr	r3, [pc, #492]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fda:	4978      	ldr	r1, [pc, #480]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fee:	4b73      	ldr	r3, [pc, #460]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffc:	496f      	ldr	r1, [pc, #444]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00a      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002010:	4b6a      	ldr	r3, [pc, #424]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002016:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	4967      	ldr	r1, [pc, #412]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002032:	4b62      	ldr	r3, [pc, #392]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002038:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	495e      	ldr	r1, [pc, #376]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002054:	4b59      	ldr	r3, [pc, #356]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002062:	4956      	ldr	r1, [pc, #344]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002076:	4b51      	ldr	r3, [pc, #324]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002084:	494d      	ldr	r1, [pc, #308]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d028      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002098:	4b48      	ldr	r3, [pc, #288]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a6:	4945      	ldr	r1, [pc, #276]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020b6:	d106      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b8:	4b40      	ldr	r3, [pc, #256]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a3f      	ldr	r2, [pc, #252]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80020be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020c2:	60d3      	str	r3, [r2, #12]
 80020c4:	e011      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020ce:	d10c      	bne.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3304      	adds	r3, #4
 80020d4:	2101      	movs	r1, #1
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f872 	bl	80021c0 <RCCEx_PLLSAI1_Config>
 80020dc:	4603      	mov	r3, r0
 80020de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020e0:	7cfb      	ldrb	r3, [r7, #19]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80020e6:	7cfb      	ldrb	r3, [r7, #19]
 80020e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d028      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020f6:	4b31      	ldr	r3, [pc, #196]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80020f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002104:	492d      	ldr	r1, [pc, #180]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002110:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002114:	d106      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002116:	4b29      	ldr	r3, [pc, #164]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	4a28      	ldr	r2, [pc, #160]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800211c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002120:	60d3      	str	r3, [r2, #12]
 8002122:	e011      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002128:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800212c:	d10c      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3304      	adds	r3, #4
 8002132:	2101      	movs	r1, #1
 8002134:	4618      	mov	r0, r3
 8002136:	f000 f843 	bl	80021c0 <RCCEx_PLLSAI1_Config>
 800213a:	4603      	mov	r3, r0
 800213c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800213e:	7cfb      	ldrb	r3, [r7, #19]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01c      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002154:	4b19      	ldr	r3, [pc, #100]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002162:	4916      	ldr	r1, [pc, #88]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002172:	d10c      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3304      	adds	r3, #4
 8002178:	2102      	movs	r1, #2
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f820 	bl	80021c0 <RCCEx_PLLSAI1_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800219a:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a8:	4904      	ldr	r1, [pc, #16]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000

080021c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021ce:	4b74      	ldr	r3, [pc, #464]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d018      	beq.n	800220c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021da:	4b71      	ldr	r3, [pc, #452]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0203 	and.w	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d10d      	bne.n	8002206 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
       ||
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80021f2:	4b6b      	ldr	r3, [pc, #428]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
       ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d047      	beq.n	8002296 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e044      	b.n	8002296 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d018      	beq.n	8002246 <RCCEx_PLLSAI1_Config+0x86>
 8002214:	2b03      	cmp	r3, #3
 8002216:	d825      	bhi.n	8002264 <RCCEx_PLLSAI1_Config+0xa4>
 8002218:	2b01      	cmp	r3, #1
 800221a:	d002      	beq.n	8002222 <RCCEx_PLLSAI1_Config+0x62>
 800221c:	2b02      	cmp	r3, #2
 800221e:	d009      	beq.n	8002234 <RCCEx_PLLSAI1_Config+0x74>
 8002220:	e020      	b.n	8002264 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002222:	4b5f      	ldr	r3, [pc, #380]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d11d      	bne.n	800226a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002232:	e01a      	b.n	800226a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002234:	4b5a      	ldr	r3, [pc, #360]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223c:	2b00      	cmp	r3, #0
 800223e:	d116      	bne.n	800226e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002244:	e013      	b.n	800226e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002246:	4b56      	ldr	r3, [pc, #344]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10f      	bne.n	8002272 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002252:	4b53      	ldr	r3, [pc, #332]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002262:	e006      	b.n	8002272 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
      break;
 8002268:	e004      	b.n	8002274 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800226a:	bf00      	nop
 800226c:	e002      	b.n	8002274 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800226e:	bf00      	nop
 8002270:	e000      	b.n	8002274 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002272:	bf00      	nop
    }

    if(status == HAL_OK)
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10d      	bne.n	8002296 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800227a:	4b49      	ldr	r3, [pc, #292]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6819      	ldr	r1, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	430b      	orrs	r3, r1
 8002290:	4943      	ldr	r1, [pc, #268]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002292:	4313      	orrs	r3, r2
 8002294:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d17c      	bne.n	8002396 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800229c:	4b40      	ldr	r3, [pc, #256]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a3f      	ldr	r2, [pc, #252]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80022a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a8:	f7fe fcbe 	bl	8000c28 <HAL_GetTick>
 80022ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022ae:	e009      	b.n	80022c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022b0:	f7fe fcba 	bl	8000c28 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d902      	bls.n	80022c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	73fb      	strb	r3, [r7, #15]
        break;
 80022c2:	e005      	b.n	80022d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022c4:	4b36      	ldr	r3, [pc, #216]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1ef      	bne.n	80022b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d15f      	bne.n	8002396 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d110      	bne.n	80022fe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022dc:	4b30      	ldr	r3, [pc, #192]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80022e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6892      	ldr	r2, [r2, #8]
 80022ec:	0211      	lsls	r1, r2, #8
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68d2      	ldr	r2, [r2, #12]
 80022f2:	06d2      	lsls	r2, r2, #27
 80022f4:	430a      	orrs	r2, r1
 80022f6:	492a      	ldr	r1, [pc, #168]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	610b      	str	r3, [r1, #16]
 80022fc:	e027      	b.n	800234e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d112      	bne.n	800232a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002304:	4b26      	ldr	r3, [pc, #152]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800230c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6892      	ldr	r2, [r2, #8]
 8002314:	0211      	lsls	r1, r2, #8
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6912      	ldr	r2, [r2, #16]
 800231a:	0852      	lsrs	r2, r2, #1
 800231c:	3a01      	subs	r2, #1
 800231e:	0552      	lsls	r2, r2, #21
 8002320:	430a      	orrs	r2, r1
 8002322:	491f      	ldr	r1, [pc, #124]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002324:	4313      	orrs	r3, r2
 8002326:	610b      	str	r3, [r1, #16]
 8002328:	e011      	b.n	800234e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800232a:	4b1d      	ldr	r3, [pc, #116]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002332:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6892      	ldr	r2, [r2, #8]
 800233a:	0211      	lsls	r1, r2, #8
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6952      	ldr	r2, [r2, #20]
 8002340:	0852      	lsrs	r2, r2, #1
 8002342:	3a01      	subs	r2, #1
 8002344:	0652      	lsls	r2, r2, #25
 8002346:	430a      	orrs	r2, r1
 8002348:	4915      	ldr	r1, [pc, #84]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800234a:	4313      	orrs	r3, r2
 800234c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800234e:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a13      	ldr	r2, [pc, #76]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002354:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002358:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7fe fc65 	bl	8000c28 <HAL_GetTick>
 800235e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002360:	e009      	b.n	8002376 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002362:	f7fe fc61 	bl	8000c28 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d902      	bls.n	8002376 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	73fb      	strb	r3, [r7, #15]
          break;
 8002374:	e005      	b.n	8002382 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002376:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0ef      	beq.n	8002362 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4903      	ldr	r1, [pc, #12]	@ (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002392:	4313      	orrs	r3, r2
 8002394:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e049      	b.n	800244a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f841 	bl	8002452 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f000 f9c4 	bl	8002770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d001      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e03b      	b.n	80024f8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a19      	ldr	r2, [pc, #100]	@ (8002504 <HAL_TIM_Base_Start_IT+0x9c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d009      	beq.n	80024b6 <HAL_TIM_Base_Start_IT+0x4e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024aa:	d004      	beq.n	80024b6 <HAL_TIM_Base_Start_IT+0x4e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a15      	ldr	r2, [pc, #84]	@ (8002508 <HAL_TIM_Base_Start_IT+0xa0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d115      	bne.n	80024e2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4b13      	ldr	r3, [pc, #76]	@ (800250c <HAL_TIM_Base_Start_IT+0xa4>)
 80024be:	4013      	ands	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2b06      	cmp	r3, #6
 80024c6:	d015      	beq.n	80024f4 <HAL_TIM_Base_Start_IT+0x8c>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ce:	d011      	beq.n	80024f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e0:	e008      	b.n	80024f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e000      	b.n	80024f6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40012c00 	.word	0x40012c00
 8002508:	40014000 	.word	0x40014000
 800250c:	00010007 	.word	0x00010007

08002510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d020      	beq.n	8002574 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01b      	beq.n	8002574 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0202 	mvn.w	r2, #2
 8002544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f8e9 	bl	8002732 <HAL_TIM_IC_CaptureCallback>
 8002560:	e005      	b.n	800256e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f8db 	bl	800271e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f8ec 	bl	8002746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d020      	beq.n	80025c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0204 	mvn.w	r2, #4
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f8c3 	bl	8002732 <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f8b5 	bl	800271e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f8c6 	bl	8002746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d020      	beq.n	800260c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01b      	beq.n	800260c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0208 	mvn.w	r2, #8
 80025dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2204      	movs	r2, #4
 80025e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f89d 	bl	8002732 <HAL_TIM_IC_CaptureCallback>
 80025f8:	e005      	b.n	8002606 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f88f 	bl	800271e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f8a0 	bl	8002746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b00      	cmp	r3, #0
 8002614:	d020      	beq.n	8002658 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0310 	and.w	r3, r3, #16
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01b      	beq.n	8002658 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0210 	mvn.w	r2, #16
 8002628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2208      	movs	r2, #8
 800262e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f877 	bl	8002732 <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f869 	bl	800271e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f87a 	bl	8002746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00c      	beq.n	800267c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0201 	mvn.w	r2, #1
 8002674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe f93c 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002682:	2b00      	cmp	r3, #0
 8002684:	d104      	bne.n	8002690 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00c      	beq.n	80026aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80026a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f8dd 	bl	8002864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00c      	beq.n	80026ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80026c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f8d5 	bl	8002878 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00c      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f834 	bl	800275a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00c      	beq.n	8002716 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f06f 0220 	mvn.w	r2, #32
 800270e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f89d 	bl	8002850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a30      	ldr	r2, [pc, #192]	@ (8002844 <TIM_Base_SetConfig+0xd4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d003      	beq.n	8002790 <TIM_Base_SetConfig+0x20>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800278e:	d108      	bne.n	80027a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a27      	ldr	r2, [pc, #156]	@ (8002844 <TIM_Base_SetConfig+0xd4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00b      	beq.n	80027c2 <TIM_Base_SetConfig+0x52>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027b0:	d007      	beq.n	80027c2 <TIM_Base_SetConfig+0x52>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a24      	ldr	r2, [pc, #144]	@ (8002848 <TIM_Base_SetConfig+0xd8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d003      	beq.n	80027c2 <TIM_Base_SetConfig+0x52>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a23      	ldr	r2, [pc, #140]	@ (800284c <TIM_Base_SetConfig+0xdc>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d108      	bne.n	80027d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a12      	ldr	r2, [pc, #72]	@ (8002844 <TIM_Base_SetConfig+0xd4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d007      	beq.n	8002810 <TIM_Base_SetConfig+0xa0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a11      	ldr	r2, [pc, #68]	@ (8002848 <TIM_Base_SetConfig+0xd8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d003      	beq.n	8002810 <TIM_Base_SetConfig+0xa0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a10      	ldr	r2, [pc, #64]	@ (800284c <TIM_Base_SetConfig+0xdc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d103      	bne.n	8002818 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d105      	bne.n	8002836 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f023 0201 	bic.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	611a      	str	r2, [r3, #16]
  }
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40012c00 	.word	0x40012c00
 8002848:	40014000 	.word	0x40014000
 800284c:	40014400 	.word	0x40014400

08002850 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800288c:	b480      	push	{r7}
 800288e:	b08b      	sub	sp, #44	@ 0x2c
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e003      	b.n	80028be <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2103      	movs	r1, #3
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	401a      	ands	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	61fb      	str	r3, [r7, #28]
  return result;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80028e0:	2320      	movs	r3, #32
 80028e2:	e003      	b.n	80028ec <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	431a      	orrs	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	601a      	str	r2, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	372c      	adds	r7, #44	@ 0x2c
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	43db      	mvns	r3, r3
 800291a:	401a      	ands	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	431a      	orrs	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	605a      	str	r2, [r3, #4]
}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002936:	b480      	push	{r7}
 8002938:	b08b      	sub	sp, #44	@ 0x2c
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	613b      	str	r3, [r7, #16]
  return result;
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800295c:	2320      	movs	r3, #32
 800295e:	e003      	b.n	8002968 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2103      	movs	r1, #3
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	401a      	ands	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	61fb      	str	r3, [r7, #28]
  return result;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800298a:	2320      	movs	r3, #32
 800298c:	e003      	b.n	8002996 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	431a      	orrs	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80029a4:	bf00      	nop
 80029a6:	372c      	adds	r7, #44	@ 0x2c
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b08b      	sub	sp, #44	@ 0x2c
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	613b      	str	r3, [r7, #16]
  return result;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80029d6:	2320      	movs	r3, #32
 80029d8:	e003      	b.n	80029e2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	2103      	movs	r1, #3
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	401a      	ands	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	61fb      	str	r3, [r7, #28]
  return result;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002a04:	2320      	movs	r3, #32
 8002a06:	e003      	b.n	8002a10 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	60da      	str	r2, [r3, #12]
}
 8002a1e:	bf00      	nop
 8002a20:	372c      	adds	r7, #44	@ 0x2c
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b08b      	sub	sp, #44	@ 0x2c
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a1a      	ldr	r2, [r3, #32]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	613b      	str	r3, [r7, #16]
  return result;
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002a50:	2320      	movs	r3, #32
 8002a52:	e003      	b.n	8002a5c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	210f      	movs	r1, #15
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	401a      	ands	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	61fb      	str	r3, [r7, #28]
  return result;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002a7e:	2320      	movs	r3, #32
 8002a80:	e003      	b.n	8002a8a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	431a      	orrs	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002a98:	bf00      	nop
 8002a9a:	372c      	adds	r7, #44	@ 0x2c
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b08b      	sub	sp, #44	@ 0x2c
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	613b      	str	r3, [r7, #16]
  return result;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002acc:	2320      	movs	r3, #32
 8002ace:	e003      	b.n	8002ad8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	210f      	movs	r1, #15
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	0a1b      	lsrs	r3, r3, #8
 8002ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	fa93 f3a3 	rbit	r3, r3
 8002af0:	61fb      	str	r3, [r7, #28]
  return result;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002afc:	2320      	movs	r3, #32
 8002afe:	e003      	b.n	8002b08 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002b16:	bf00      	nop
 8002b18:	372c      	adds	r7, #44	@ 0x2c
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b088      	sub	sp, #32
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	60fb      	str	r3, [r7, #12]
  return result;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <LL_GPIO_Init+0x26>
    return 32U;
 8002b44:	2320      	movs	r3, #32
 8002b46:	e003      	b.n	8002b50 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002b52:	e048      	b.n	8002be6 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d03a      	beq.n	8002be0 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d003      	beq.n	8002b7a <LL_GPIO_Init+0x58>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d10e      	bne.n	8002b98 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	69b9      	ldr	r1, [r7, #24]
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff fed7 	bl	8002936 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	461a      	mov	r2, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff feb7 	bl	8002906 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	69b9      	ldr	r1, [r7, #24]
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ff05 	bl	80029b0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d111      	bne.n	8002bd2 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2bff      	cmp	r3, #255	@ 0xff
 8002bb2:	d807      	bhi.n	8002bc4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	69b9      	ldr	r1, [r7, #24]
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff34 	bl	8002a2a <LL_GPIO_SetAFPin_0_7>
 8002bc2:	e006      	b.n	8002bd2 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	69b9      	ldr	r1, [r7, #24]
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ff69 	bl	8002aa4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	69b9      	ldr	r1, [r7, #24]
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff fe56 	bl	800288c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	3301      	adds	r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1af      	bne.n	8002b54 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002c04:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <LL_RCC_HSI_IsReady+0x24>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c10:	d101      	bne.n	8002c16 <LL_RCC_HSI_IsReady+0x16>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <LL_RCC_HSI_IsReady+0x18>
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000

08002c28 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8002c2c:	4b07      	ldr	r3, [pc, #28]	@ (8002c4c <LL_RCC_LSE_IsReady+0x24>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d101      	bne.n	8002c3e <LL_RCC_LSE_IsReady+0x16>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <LL_RCC_LSE_IsReady+0x18>
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000

08002c50 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8002c54:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d101      	bne.n	8002c64 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	40021000 	.word	0x40021000

08002c74 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <LL_RCC_MSI_GetRange+0x18>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000

08002c90 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002c94:	4b04      	ldr	r3, [pc, #16]	@ (8002ca8 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8002c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c9a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	40021000 	.word	0x40021000

08002cac <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002cb0:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <LL_RCC_GetSysClkSource+0x18>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ccc:	4b04      	ldr	r3, [pc, #16]	@ (8002ce0 <LL_RCC_GetAHBPrescaler+0x18>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	@ (8002cfc <LL_RCC_GetAPB1Prescaler+0x18>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000

08002d00 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d04:	4b04      	ldr	r3, [pc, #16]	@ (8002d18 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000

08002d1c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002d24:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <LL_RCC_GetUSARTClockSource+0x24>)
 8002d26:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	4313      	orrs	r3, r2
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	40021000 	.word	0x40021000

08002d44 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d48:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <LL_RCC_PLL_GetMainSource+0x18>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000

08002d60 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d64:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <LL_RCC_PLL_GetN+0x18>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	40021000 	.word	0x40021000

08002d7c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002d80:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <LL_RCC_PLL_GetR+0x18>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000

08002d98 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d9c:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <LL_RCC_PLL_GetDivider+0x18>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000

08002db4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d137      	bne.n	8002e36 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff ffa8 	bl	8002d1c <LL_RCC_GetUSARTClockSource>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	f200 80b3 	bhi.w	8002f3e <LL_RCC_GetUSARTClockFreq+0x18a>
 8002dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8002de0 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8002dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dde:	bf00      	nop
 8002de0:	08002e1f 	.word	0x08002e1f
 8002de4:	08002df1 	.word	0x08002df1
 8002de8:	08002df9 	.word	0x08002df9
 8002dec:	08002e0b 	.word	0x08002e0b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002df0:	f000 f8c2 	bl	8002f78 <RCC_GetSystemClockFreq>
 8002df4:	60f8      	str	r0, [r7, #12]
        break;
 8002df6:	e0b3      	b.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002df8:	f7ff ff02 	bl	8002c00 <LL_RCC_HSI_IsReady>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 809f 	beq.w	8002f42 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8002e04:	4b59      	ldr	r3, [pc, #356]	@ (8002f6c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002e06:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002e08:	e09b      	b.n	8002f42 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002e0a:	f7ff ff0d 	bl	8002c28 <LL_RCC_LSE_IsReady>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8098 	beq.w	8002f46 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8002e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e1a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002e1c:	e093      	b.n	8002f46 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002e1e:	f000 f8ab 	bl	8002f78 <RCC_GetSystemClockFreq>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 f937 	bl	8003098 <RCC_GetHCLKClockFreq>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 f95d 	bl	80030ec <RCC_GetPCLK2ClockFreq>
 8002e32:	60f8      	str	r0, [r7, #12]
        break;
 8002e34:	e094      	b.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b0c      	cmp	r3, #12
 8002e3a:	d146      	bne.n	8002eca <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff6d 	bl	8002d1c <LL_RCC_GetUSARTClockSource>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8002e48:	2b0c      	cmp	r3, #12
 8002e4a:	d87e      	bhi.n	8002f4a <LL_RCC_GetUSARTClockFreq+0x196>
 8002e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e54 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8002e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	08002eb3 	.word	0x08002eb3
 8002e58:	08002f4b 	.word	0x08002f4b
 8002e5c:	08002f4b 	.word	0x08002f4b
 8002e60:	08002f4b 	.word	0x08002f4b
 8002e64:	08002e89 	.word	0x08002e89
 8002e68:	08002f4b 	.word	0x08002f4b
 8002e6c:	08002f4b 	.word	0x08002f4b
 8002e70:	08002f4b 	.word	0x08002f4b
 8002e74:	08002e91 	.word	0x08002e91
 8002e78:	08002f4b 	.word	0x08002f4b
 8002e7c:	08002f4b 	.word	0x08002f4b
 8002e80:	08002f4b 	.word	0x08002f4b
 8002e84:	08002ea1 	.word	0x08002ea1
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002e88:	f000 f876 	bl	8002f78 <RCC_GetSystemClockFreq>
 8002e8c:	60f8      	str	r0, [r7, #12]
        break;
 8002e8e:	e067      	b.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002e90:	f7ff feb6 	bl	8002c00 <LL_RCC_HSI_IsReady>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d059      	beq.n	8002f4e <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8002e9a:	4b34      	ldr	r3, [pc, #208]	@ (8002f6c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002e9c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002e9e:	e056      	b.n	8002f4e <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002ea0:	f7ff fec2 	bl	8002c28 <LL_RCC_LSE_IsReady>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d053      	beq.n	8002f52 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8002eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eae:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002eb0:	e04f      	b.n	8002f52 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002eb2:	f000 f861 	bl	8002f78 <RCC_GetSystemClockFreq>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 f8ed 	bl	8003098 <RCC_GetHCLKClockFreq>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 f8ff 	bl	80030c4 <RCC_GetPCLK1ClockFreq>
 8002ec6:	60f8      	str	r0, [r7, #12]
        break;
 8002ec8:	e04a      	b.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b30      	cmp	r3, #48	@ 0x30
 8002ece:	d147      	bne.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff23 	bl	8002d1c <LL_RCC_GetUSARTClockSource>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8002edc:	d01a      	beq.n	8002f14 <LL_RCC_GetUSARTClockFreq+0x160>
 8002ede:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8002ee2:	d838      	bhi.n	8002f56 <LL_RCC_GetUSARTClockFreq+0x1a2>
 8002ee4:	4a22      	ldr	r2, [pc, #136]	@ (8002f70 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00c      	beq.n	8002f04 <LL_RCC_GetUSARTClockFreq+0x150>
 8002eea:	4a21      	ldr	r2, [pc, #132]	@ (8002f70 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d832      	bhi.n	8002f56 <LL_RCC_GetUSARTClockFreq+0x1a2>
 8002ef0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ef4:	d017      	beq.n	8002f26 <LL_RCC_GetUSARTClockFreq+0x172>
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f74 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d12c      	bne.n	8002f56 <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8002efc:	f000 f83c 	bl	8002f78 <RCC_GetSystemClockFreq>
 8002f00:	60f8      	str	r0, [r7, #12]
          break;
 8002f02:	e02d      	b.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8002f04:	f7ff fe7c 	bl	8002c00 <LL_RCC_HSI_IsReady>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d025      	beq.n	8002f5a <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 8002f0e:	4b17      	ldr	r3, [pc, #92]	@ (8002f6c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002f10:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002f12:	e022      	b.n	8002f5a <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8002f14:	f7ff fe88 	bl	8002c28 <LL_RCC_LSE_IsReady>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01f      	beq.n	8002f5e <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 8002f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f22:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002f24:	e01b      	b.n	8002f5e <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002f26:	f000 f827 	bl	8002f78 <RCC_GetSystemClockFreq>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 f8b3 	bl	8003098 <RCC_GetHCLKClockFreq>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f8c5 	bl	80030c4 <RCC_GetPCLK1ClockFreq>
 8002f3a:	60f8      	str	r0, [r7, #12]
          break;
 8002f3c:	e010      	b.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002f3e:	bf00      	nop
 8002f40:	e00e      	b.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002f42:	bf00      	nop
 8002f44:	e00c      	b.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002f46:	bf00      	nop
 8002f48:	e00a      	b.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002f4a:	bf00      	nop
 8002f4c:	e008      	b.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002f4e:	bf00      	nop
 8002f50:	e006      	b.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002f52:	bf00      	nop
 8002f54:	e004      	b.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8002f56:	bf00      	nop
 8002f58:	e002      	b.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8002f5e:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8002f60:	68fb      	ldr	r3, [r7, #12]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	00f42400 	.word	0x00f42400
 8002f70:	00300020 	.word	0x00300020
 8002f74:	00300010 	.word	0x00300010

08002f78 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002f7e:	f7ff fe95 	bl	8002cac <LL_RCC_GetSysClkSource>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	d851      	bhi.n	800302c <RCC_GetSystemClockFreq+0xb4>
 8002f88:	a201      	add	r2, pc, #4	@ (adr r2, 8002f90 <RCC_GetSystemClockFreq+0x18>)
 8002f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8e:	bf00      	nop
 8002f90:	08002fc5 	.word	0x08002fc5
 8002f94:	0800302d 	.word	0x0800302d
 8002f98:	0800302d 	.word	0x0800302d
 8002f9c:	0800302d 	.word	0x0800302d
 8002fa0:	08003019 	.word	0x08003019
 8002fa4:	0800302d 	.word	0x0800302d
 8002fa8:	0800302d 	.word	0x0800302d
 8002fac:	0800302d 	.word	0x0800302d
 8002fb0:	0800301f 	.word	0x0800301f
 8002fb4:	0800302d 	.word	0x0800302d
 8002fb8:	0800302d 	.word	0x0800302d
 8002fbc:	0800302d 	.word	0x0800302d
 8002fc0:	08003025 	.word	0x08003025
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002fc4:	f7ff fe44 	bl	8002c50 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d111      	bne.n	8002ff2 <RCC_GetSystemClockFreq+0x7a>
 8002fce:	f7ff fe3f 	bl	8002c50 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d004      	beq.n	8002fe2 <RCC_GetSystemClockFreq+0x6a>
 8002fd8:	f7ff fe4c 	bl	8002c74 <LL_RCC_MSI_GetRange>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	e003      	b.n	8002fea <RCC_GetSystemClockFreq+0x72>
 8002fe2:	f7ff fe55 	bl	8002c90 <LL_RCC_MSI_GetRangeAfterStandby>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	0a1b      	lsrs	r3, r3, #8
 8002fea:	4a28      	ldr	r2, [pc, #160]	@ (800308c <RCC_GetSystemClockFreq+0x114>)
 8002fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff0:	e010      	b.n	8003014 <RCC_GetSystemClockFreq+0x9c>
 8002ff2:	f7ff fe2d 	bl	8002c50 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d004      	beq.n	8003006 <RCC_GetSystemClockFreq+0x8e>
 8002ffc:	f7ff fe3a 	bl	8002c74 <LL_RCC_MSI_GetRange>
 8003000:	4603      	mov	r3, r0
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	e003      	b.n	800300e <RCC_GetSystemClockFreq+0x96>
 8003006:	f7ff fe43 	bl	8002c90 <LL_RCC_MSI_GetRangeAfterStandby>
 800300a:	4603      	mov	r3, r0
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	4a1f      	ldr	r2, [pc, #124]	@ (800308c <RCC_GetSystemClockFreq+0x114>)
 8003010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003014:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003016:	e033      	b.n	8003080 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003018:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <RCC_GetSystemClockFreq+0x118>)
 800301a:	607b      	str	r3, [r7, #4]
      break;
 800301c:	e030      	b.n	8003080 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800301e:	4b1d      	ldr	r3, [pc, #116]	@ (8003094 <RCC_GetSystemClockFreq+0x11c>)
 8003020:	607b      	str	r3, [r7, #4]
      break;
 8003022:	e02d      	b.n	8003080 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003024:	f000 f876 	bl	8003114 <RCC_PLL_GetFreqDomain_SYS>
 8003028:	6078      	str	r0, [r7, #4]
      break;
 800302a:	e029      	b.n	8003080 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800302c:	f7ff fe10 	bl	8002c50 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d111      	bne.n	800305a <RCC_GetSystemClockFreq+0xe2>
 8003036:	f7ff fe0b 	bl	8002c50 <LL_RCC_MSI_IsEnabledRangeSelect>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <RCC_GetSystemClockFreq+0xd2>
 8003040:	f7ff fe18 	bl	8002c74 <LL_RCC_MSI_GetRange>
 8003044:	4603      	mov	r3, r0
 8003046:	0a1b      	lsrs	r3, r3, #8
 8003048:	e003      	b.n	8003052 <RCC_GetSystemClockFreq+0xda>
 800304a:	f7ff fe21 	bl	8002c90 <LL_RCC_MSI_GetRangeAfterStandby>
 800304e:	4603      	mov	r3, r0
 8003050:	0a1b      	lsrs	r3, r3, #8
 8003052:	4a0e      	ldr	r2, [pc, #56]	@ (800308c <RCC_GetSystemClockFreq+0x114>)
 8003054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003058:	e010      	b.n	800307c <RCC_GetSystemClockFreq+0x104>
 800305a:	f7ff fdf9 	bl	8002c50 <LL_RCC_MSI_IsEnabledRangeSelect>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <RCC_GetSystemClockFreq+0xf6>
 8003064:	f7ff fe06 	bl	8002c74 <LL_RCC_MSI_GetRange>
 8003068:	4603      	mov	r3, r0
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	e003      	b.n	8003076 <RCC_GetSystemClockFreq+0xfe>
 800306e:	f7ff fe0f 	bl	8002c90 <LL_RCC_MSI_GetRangeAfterStandby>
 8003072:	4603      	mov	r3, r0
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	4a05      	ldr	r2, [pc, #20]	@ (800308c <RCC_GetSystemClockFreq+0x114>)
 8003078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800307e:	bf00      	nop
  }

  return frequency;
 8003080:	687b      	ldr	r3, [r7, #4]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	08008258 	.word	0x08008258
 8003090:	00f42400 	.word	0x00f42400
 8003094:	007a1200 	.word	0x007a1200

08003098 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80030a0:	f7ff fe12 	bl	8002cc8 <LL_RCC_GetAHBPrescaler>
 80030a4:	4603      	mov	r3, r0
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	4a04      	ldr	r2, [pc, #16]	@ (80030c0 <RCC_GetHCLKClockFreq+0x28>)
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	461a      	mov	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	40d3      	lsrs	r3, r2
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	08008240 	.word	0x08008240

080030c4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80030cc:	f7ff fe0a 	bl	8002ce4 <LL_RCC_GetAPB1Prescaler>
 80030d0:	4603      	mov	r3, r0
 80030d2:	0a1b      	lsrs	r3, r3, #8
 80030d4:	4a04      	ldr	r2, [pc, #16]	@ (80030e8 <RCC_GetPCLK1ClockFreq+0x24>)
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	461a      	mov	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	40d3      	lsrs	r3, r2
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	08008250 	.word	0x08008250

080030ec <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80030f4:	f7ff fe04 	bl	8002d00 <LL_RCC_GetAPB2Prescaler>
 80030f8:	4603      	mov	r3, r0
 80030fa:	0adb      	lsrs	r3, r3, #11
 80030fc:	4a04      	ldr	r2, [pc, #16]	@ (8003110 <RCC_GetPCLK2ClockFreq+0x24>)
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	461a      	mov	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	40d3      	lsrs	r3, r2
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	08008250 	.word	0x08008250

08003114 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800311a:	f7ff fe13 	bl	8002d44 <LL_RCC_PLL_GetMainSource>
 800311e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d036      	beq.n	8003194 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d836      	bhi.n	800319a <RCC_PLL_GetFreqDomain_SYS+0x86>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d003      	beq.n	800313a <RCC_PLL_GetFreqDomain_SYS+0x26>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d02a      	beq.n	800318e <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8003138:	e02f      	b.n	800319a <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800313a:	f7ff fd89 	bl	8002c50 <LL_RCC_MSI_IsEnabledRangeSelect>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d111      	bne.n	8003168 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8003144:	f7ff fd84 	bl	8002c50 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d004      	beq.n	8003158 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800314e:	f7ff fd91 	bl	8002c74 <LL_RCC_MSI_GetRange>
 8003152:	4603      	mov	r3, r0
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	e003      	b.n	8003160 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8003158:	f7ff fd9a 	bl	8002c90 <LL_RCC_MSI_GetRangeAfterStandby>
 800315c:	4603      	mov	r3, r0
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	4a2f      	ldr	r2, [pc, #188]	@ (8003220 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003166:	e010      	b.n	800318a <RCC_PLL_GetFreqDomain_SYS+0x76>
 8003168:	f7ff fd72 	bl	8002c50 <LL_RCC_MSI_IsEnabledRangeSelect>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d004      	beq.n	800317c <RCC_PLL_GetFreqDomain_SYS+0x68>
 8003172:	f7ff fd7f 	bl	8002c74 <LL_RCC_MSI_GetRange>
 8003176:	4603      	mov	r3, r0
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	e003      	b.n	8003184 <RCC_PLL_GetFreqDomain_SYS+0x70>
 800317c:	f7ff fd88 	bl	8002c90 <LL_RCC_MSI_GetRangeAfterStandby>
 8003180:	4603      	mov	r3, r0
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	4a26      	ldr	r2, [pc, #152]	@ (8003220 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800318c:	e02f      	b.n	80031ee <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800318e:	4b25      	ldr	r3, [pc, #148]	@ (8003224 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8003190:	607b      	str	r3, [r7, #4]
      break;
 8003192:	e02c      	b.n	80031ee <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003194:	4b24      	ldr	r3, [pc, #144]	@ (8003228 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8003196:	607b      	str	r3, [r7, #4]
      break;
 8003198:	e029      	b.n	80031ee <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800319a:	f7ff fd59 	bl	8002c50 <LL_RCC_MSI_IsEnabledRangeSelect>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d111      	bne.n	80031c8 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80031a4:	f7ff fd54 	bl	8002c50 <LL_RCC_MSI_IsEnabledRangeSelect>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d004      	beq.n	80031b8 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80031ae:	f7ff fd61 	bl	8002c74 <LL_RCC_MSI_GetRange>
 80031b2:	4603      	mov	r3, r0
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	e003      	b.n	80031c0 <RCC_PLL_GetFreqDomain_SYS+0xac>
 80031b8:	f7ff fd6a 	bl	8002c90 <LL_RCC_MSI_GetRangeAfterStandby>
 80031bc:	4603      	mov	r3, r0
 80031be:	0a1b      	lsrs	r3, r3, #8
 80031c0:	4a17      	ldr	r2, [pc, #92]	@ (8003220 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80031c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c6:	e010      	b.n	80031ea <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80031c8:	f7ff fd42 	bl	8002c50 <LL_RCC_MSI_IsEnabledRangeSelect>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d004      	beq.n	80031dc <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80031d2:	f7ff fd4f 	bl	8002c74 <LL_RCC_MSI_GetRange>
 80031d6:	4603      	mov	r3, r0
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	e003      	b.n	80031e4 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 80031dc:	f7ff fd58 	bl	8002c90 <LL_RCC_MSI_GetRangeAfterStandby>
 80031e0:	4603      	mov	r3, r0
 80031e2:	091b      	lsrs	r3, r3, #4
 80031e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003220 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80031e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ea:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80031ec:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80031ee:	f7ff fdd3 	bl	8002d98 <LL_RCC_PLL_GetDivider>
 80031f2:	4603      	mov	r3, r0
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	3301      	adds	r3, #1
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	fbb2 f4f3 	udiv	r4, r2, r3
 80031fe:	f7ff fdaf 	bl	8002d60 <LL_RCC_PLL_GetN>
 8003202:	4603      	mov	r3, r0
 8003204:	fb03 f404 	mul.w	r4, r3, r4
 8003208:	f7ff fdb8 	bl	8002d7c <LL_RCC_PLL_GetR>
 800320c:	4603      	mov	r3, r0
 800320e:	0e5b      	lsrs	r3, r3, #25
 8003210:	3301      	adds	r3, #1
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bd90      	pop	{r4, r7, pc}
 8003220:	08008258 	.word	0x08008258
 8003224:	00f42400 	.word	0x00f42400
 8003228:	007a1200 	.word	0x007a1200

0800322c <LL_USART_IsEnabled>:
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <LL_USART_IsEnabled+0x18>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <LL_USART_IsEnabled+0x1a>
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_USART_SetStopBitsLength>:
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	605a      	str	r2, [r3, #4]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <LL_USART_SetHWFlowCtrl>:
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	609a      	str	r2, [r3, #8]
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <LL_USART_SetBaudRate>:
{
 800329e:	b480      	push	{r7}
 80032a0:	b087      	sub	sp, #28
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032b2:	d11a      	bne.n	80032ea <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	005a      	lsls	r2, r3, #1
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	085b      	lsrs	r3, r3, #1
 80032bc:	441a      	add	r2, r3
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80032ce:	4013      	ands	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	085b      	lsrs	r3, r3, #1
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	60da      	str	r2, [r3, #12]
}
 80032e8:	e00a      	b.n	8003300 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	085a      	lsrs	r2, r3, #1
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	441a      	add	r2, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	60da      	str	r2, [r3, #12]
}
 8003300:	bf00      	nop
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff ff84 	bl	800322c <LL_USART_IsEnabled>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d148      	bne.n	80033bc <LL_USART_Init+0xb0>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4b26      	ldr	r3, [pc, #152]	@ (80033c8 <LL_USART_Init+0xbc>)
 8003330:	4013      	ands	r3, r2
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	6851      	ldr	r1, [r2, #4]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	68d2      	ldr	r2, [r2, #12]
 800333a:	4311      	orrs	r1, r2
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	6912      	ldr	r2, [r2, #16]
 8003340:	4311      	orrs	r1, r2
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	6992      	ldr	r2, [r2, #24]
 8003346:	430a      	orrs	r2, r1
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	4619      	mov	r1, r3
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff7c 	bl	8003252 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	4619      	mov	r1, r3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ff89 	bl	8003278 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a18      	ldr	r2, [pc, #96]	@ (80033cc <LL_USART_Init+0xc0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d104      	bne.n	8003378 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800336e:	2003      	movs	r0, #3
 8003370:	f7ff fd20 	bl	8002db4 <LL_RCC_GetUSARTClockFreq>
 8003374:	60b8      	str	r0, [r7, #8]
 8003376:	e010      	b.n	800339a <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a15      	ldr	r2, [pc, #84]	@ (80033d0 <LL_USART_Init+0xc4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d104      	bne.n	800338a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8003380:	200c      	movs	r0, #12
 8003382:	f7ff fd17 	bl	8002db4 <LL_RCC_GetUSARTClockFreq>
 8003386:	60b8      	str	r0, [r7, #8]
 8003388:	e007      	b.n	800339a <LL_USART_Init+0x8e>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a11      	ldr	r2, [pc, #68]	@ (80033d4 <LL_USART_Init+0xc8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d103      	bne.n	800339a <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8003392:	2030      	movs	r0, #48	@ 0x30
 8003394:	f7ff fd0e 	bl	8002db4 <LL_RCC_GetUSARTClockFreq>
 8003398:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <LL_USART_Init+0xb0>
        && (USART_InitStruct->BaudRate != 0U))
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <LL_USART_Init+0xb0>
    {
      status = SUCCESS;
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ff71 	bl	800329e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	efff69f3 	.word	0xefff69f3
 80033cc:	40013800 	.word	0x40013800
 80033d0:	40004400 	.word	0x40004400
 80033d4:	40004800 	.word	0x40004800

080033d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80033dc:	f001 f98c 	bl	80046f8 <vTaskStartScheduler>
  
  return osOK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <osDelay+0x16>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	e000      	b.n	80033fe <osDelay+0x18>
 80033fc:	2301      	movs	r3, #1
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 f944 	bl	800468c <vTaskDelay>
  
  return osOK;
 8003404:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f103 0208 	add.w	r2, r3, #8
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f04f 32ff 	mov.w	r2, #4294967295
 8003426:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f103 0208 	add.w	r2, r3, #8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f103 0208 	add.w	r2, r3, #8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	601a      	str	r2, [r3, #0]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d103      	bne.n	80034d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	e00c      	b.n	80034ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3308      	adds	r3, #8
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	e002      	b.n	80034de <vListInsert+0x2e>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d2f6      	bcs.n	80034d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	601a      	str	r2, [r3, #0]
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6892      	ldr	r2, [r2, #8]
 8003538:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6852      	ldr	r2, [r2, #4]
 8003542:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	429a      	cmp	r2, r3
 800354c:	d103      	bne.n	8003556 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	1e5a      	subs	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10b      	bne.n	80035a4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035a4:	f002 fba0 	bl	8005ce8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035b4:	fb01 f303 	mul.w	r3, r1, r3
 80035b8:	441a      	add	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d4:	3b01      	subs	r3, #1
 80035d6:	68f9      	ldr	r1, [r7, #12]
 80035d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	441a      	add	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	22ff      	movs	r2, #255	@ 0xff
 80035e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	22ff      	movs	r2, #255	@ 0xff
 80035f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d114      	bne.n	8003624 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d01a      	beq.n	8003638 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3310      	adds	r3, #16
 8003606:	4618      	mov	r0, r3
 8003608:	f001 fb12 	bl	8004c30 <xTaskRemoveFromEventList>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d012      	beq.n	8003638 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003612:	4b0d      	ldr	r3, [pc, #52]	@ (8003648 <xQueueGenericReset+0xd0>)
 8003614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	e009      	b.n	8003638 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3310      	adds	r3, #16
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fef0 	bl	800340e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3324      	adds	r3, #36	@ 0x24
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff feeb 	bl	800340e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003638:	f002 fb88 	bl	8005d4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800363c:	2301      	movs	r3, #1
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	e000ed04 	.word	0xe000ed04

0800364c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08e      	sub	sp, #56	@ 0x38
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10b      	bne.n	8003678 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003672:	bf00      	nop
 8003674:	bf00      	nop
 8003676:	e7fd      	b.n	8003674 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10b      	bne.n	8003696 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	e7fd      	b.n	8003692 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <xQueueGenericCreateStatic+0x56>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <xQueueGenericCreateStatic+0x5a>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <xQueueGenericCreateStatic+0x5c>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10b      	bne.n	80036c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	623b      	str	r3, [r7, #32]
}
 80036be:	bf00      	nop
 80036c0:	bf00      	nop
 80036c2:	e7fd      	b.n	80036c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <xQueueGenericCreateStatic+0x84>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <xQueueGenericCreateStatic+0x88>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <xQueueGenericCreateStatic+0x8a>
 80036d4:	2300      	movs	r3, #0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	61fb      	str	r3, [r7, #28]
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	e7fd      	b.n	80036ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80036f2:	2348      	movs	r3, #72	@ 0x48
 80036f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b48      	cmp	r3, #72	@ 0x48
 80036fa:	d00b      	beq.n	8003714 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	61bb      	str	r3, [r7, #24]
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003714:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800371a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00d      	beq.n	800373c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003728:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800372c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f840 	bl	80037bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800373c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800373e:	4618      	mov	r0, r3
 8003740:	3730      	adds	r7, #48	@ 0x30
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003746:	b580      	push	{r7, lr}
 8003748:	b08a      	sub	sp, #40	@ 0x28
 800374a:	af02      	add	r7, sp, #8
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	4613      	mov	r3, r2
 8003752:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10b      	bne.n	8003772 <xQueueGenericCreate+0x2c>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	613b      	str	r3, [r7, #16]
}
 800376c:	bf00      	nop
 800376e:	bf00      	nop
 8003770:	e7fd      	b.n	800376e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	3348      	adds	r3, #72	@ 0x48
 8003780:	4618      	mov	r0, r3
 8003782:	f002 fbd3 	bl	8005f2c <pvPortMalloc>
 8003786:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d011      	beq.n	80037b2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	3348      	adds	r3, #72	@ 0x48
 8003796:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037a0:	79fa      	ldrb	r2, [r7, #7]
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f805 	bl	80037bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037b2:	69bb      	ldr	r3, [r7, #24]
	}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d103      	bne.n	80037d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	e002      	b.n	80037de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037ea:	2101      	movs	r1, #1
 80037ec:	69b8      	ldr	r0, [r7, #24]
 80037ee:	f7ff fec3 	bl	8003578 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00e      	beq.n	8003826 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800381a:	2300      	movs	r3, #0
 800381c:	2200      	movs	r2, #0
 800381e:	2100      	movs	r1, #0
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f81d 	bl	8003860 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800382e:	b580      	push	{r7, lr}
 8003830:	b086      	sub	sp, #24
 8003832:	af00      	add	r7, sp, #0
 8003834:	4603      	mov	r3, r0
 8003836:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003838:	2301      	movs	r3, #1
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	2300      	movs	r3, #0
 800383e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	461a      	mov	r2, r3
 8003844:	6939      	ldr	r1, [r7, #16]
 8003846:	6978      	ldr	r0, [r7, #20]
 8003848:	f7ff ff7d 	bl	8003746 <xQueueGenericCreate>
 800384c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff ffd3 	bl	80037fa <prvInitialiseMutex>

		return xNewQueue;
 8003854:	68fb      	ldr	r3, [r7, #12]
	}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08e      	sub	sp, #56	@ 0x38
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800386e:	2300      	movs	r3, #0
 8003870:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10b      	bne.n	8003894 <xQueueGenericSend+0x34>
	__asm volatile
 800387c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800388e:	bf00      	nop
 8003890:	bf00      	nop
 8003892:	e7fd      	b.n	8003890 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d103      	bne.n	80038a2 <xQueueGenericSend+0x42>
 800389a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <xQueueGenericSend+0x46>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <xQueueGenericSend+0x48>
 80038a6:	2300      	movs	r3, #0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <xQueueGenericSend+0x64>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80038be:	bf00      	nop
 80038c0:	bf00      	nop
 80038c2:	e7fd      	b.n	80038c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d103      	bne.n	80038d2 <xQueueGenericSend+0x72>
 80038ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <xQueueGenericSend+0x76>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <xQueueGenericSend+0x78>
 80038d6:	2300      	movs	r3, #0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10b      	bne.n	80038f4 <xQueueGenericSend+0x94>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	623b      	str	r3, [r7, #32]
}
 80038ee:	bf00      	nop
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038f4:	f001 fb62 	bl	8004fbc <xTaskGetSchedulerState>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <xQueueGenericSend+0xa4>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <xQueueGenericSend+0xa8>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <xQueueGenericSend+0xaa>
 8003908:	2300      	movs	r3, #0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10b      	bne.n	8003926 <xQueueGenericSend+0xc6>
	__asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	61fb      	str	r3, [r7, #28]
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	e7fd      	b.n	8003922 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003926:	f002 f9df 	bl	8005ce8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800392a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800392e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <xQueueGenericSend+0xdc>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d129      	bne.n	8003990 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003942:	f000 fb5b 	bl	8003ffc <prvCopyDataToQueue>
 8003946:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394c:	2b00      	cmp	r3, #0
 800394e:	d010      	beq.n	8003972 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003952:	3324      	adds	r3, #36	@ 0x24
 8003954:	4618      	mov	r0, r3
 8003956:	f001 f96b 	bl	8004c30 <xTaskRemoveFromEventList>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d013      	beq.n	8003988 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003960:	4b3f      	ldr	r3, [pc, #252]	@ (8003a60 <xQueueGenericSend+0x200>)
 8003962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	e00a      	b.n	8003988 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003978:	4b39      	ldr	r3, [pc, #228]	@ (8003a60 <xQueueGenericSend+0x200>)
 800397a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003988:	f002 f9e0 	bl	8005d4c <vPortExitCritical>
				return pdPASS;
 800398c:	2301      	movs	r3, #1
 800398e:	e063      	b.n	8003a58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003996:	f002 f9d9 	bl	8005d4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800399a:	2300      	movs	r3, #0
 800399c:	e05c      	b.n	8003a58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800399e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d106      	bne.n	80039b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	4618      	mov	r0, r3
 80039aa:	f001 f9a5 	bl	8004cf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039ae:	2301      	movs	r3, #1
 80039b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039b2:	f002 f9cb 	bl	8005d4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039b6:	f000 ff0f 	bl	80047d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039ba:	f002 f995 	bl	8005ce8 <vPortEnterCritical>
 80039be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039c4:	b25b      	sxtb	r3, r3
 80039c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ca:	d103      	bne.n	80039d4 <xQueueGenericSend+0x174>
 80039cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039da:	b25b      	sxtb	r3, r3
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d103      	bne.n	80039ea <xQueueGenericSend+0x18a>
 80039e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039ea:	f002 f9af 	bl	8005d4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039ee:	1d3a      	adds	r2, r7, #4
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 f994 	bl	8004d24 <xTaskCheckForTimeOut>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d124      	bne.n	8003a4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a04:	f000 fbf2 	bl	80041ec <prvIsQueueFull>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d018      	beq.n	8003a40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a10:	3310      	adds	r3, #16
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	4611      	mov	r1, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 f8b8 	bl	8004b8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a1e:	f000 fb7d 	bl	800411c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a22:	f000 fee7 	bl	80047f4 <xTaskResumeAll>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f47f af7c 	bne.w	8003926 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a60 <xQueueGenericSend+0x200>)
 8003a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	e772      	b.n	8003926 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a42:	f000 fb6b 	bl	800411c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a46:	f000 fed5 	bl	80047f4 <xTaskResumeAll>
 8003a4a:	e76c      	b.n	8003926 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a4e:	f000 fb65 	bl	800411c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a52:	f000 fecf 	bl	80047f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3738      	adds	r7, #56	@ 0x38
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	e000ed04 	.word	0xe000ed04

08003a64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b090      	sub	sp, #64	@ 0x40
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10b      	bne.n	8003a94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a8e:	bf00      	nop
 8003a90:	bf00      	nop
 8003a92:	e7fd      	b.n	8003a90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <xQueueGenericSendFromISR+0x3e>
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <xQueueGenericSendFromISR+0x42>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <xQueueGenericSendFromISR+0x44>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003abe:	bf00      	nop
 8003ac0:	bf00      	nop
 8003ac2:	e7fd      	b.n	8003ac0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d103      	bne.n	8003ad2 <xQueueGenericSendFromISR+0x6e>
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <xQueueGenericSendFromISR+0x72>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <xQueueGenericSendFromISR+0x74>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10b      	bne.n	8003af4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	623b      	str	r3, [r7, #32]
}
 8003aee:	bf00      	nop
 8003af0:	bf00      	nop
 8003af2:	e7fd      	b.n	8003af0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003af4:	f002 f9d8 	bl	8005ea8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003af8:	f3ef 8211 	mrs	r2, BASEPRI
 8003afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	61fa      	str	r2, [r7, #28]
 8003b0e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d302      	bcc.n	8003b26 <xQueueGenericSendFromISR+0xc2>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d12f      	bne.n	8003b86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003b3c:	f000 fa5e 	bl	8003ffc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d112      	bne.n	8003b70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b54:	3324      	adds	r3, #36	@ 0x24
 8003b56:	4618      	mov	r0, r3
 8003b58:	f001 f86a 	bl	8004c30 <xTaskRemoveFromEventList>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00e      	beq.n	8003b80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00b      	beq.n	8003b80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e007      	b.n	8003b80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b74:	3301      	adds	r3, #1
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	b25a      	sxtb	r2, r3
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003b80:	2301      	movs	r3, #1
 8003b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003b84:	e001      	b.n	8003b8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b8c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3740      	adds	r7, #64	@ 0x40
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08c      	sub	sp, #48	@ 0x30
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <xQueueReceive+0x32>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	623b      	str	r3, [r7, #32]
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	e7fd      	b.n	8003bce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <xQueueReceive+0x40>
 8003bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <xQueueReceive+0x44>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <xQueueReceive+0x46>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <xQueueReceive+0x62>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	61fb      	str	r3, [r7, #28]
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	e7fd      	b.n	8003bfe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c02:	f001 f9db 	bl	8004fbc <xTaskGetSchedulerState>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <xQueueReceive+0x72>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <xQueueReceive+0x76>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <xQueueReceive+0x78>
 8003c16:	2300      	movs	r3, #0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10b      	bne.n	8003c34 <xQueueReceive+0x94>
	__asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	61bb      	str	r3, [r7, #24]
}
 8003c2e:	bf00      	nop
 8003c30:	bf00      	nop
 8003c32:	e7fd      	b.n	8003c30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c34:	f002 f858 	bl	8005ce8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01f      	beq.n	8003c84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c48:	f000 fa42 	bl	80040d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	1e5a      	subs	r2, r3, #1
 8003c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00f      	beq.n	8003c7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5e:	3310      	adds	r3, #16
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 ffe5 	bl	8004c30 <xTaskRemoveFromEventList>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8003d60 <xQueueReceive+0x1c0>)
 8003c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c7c:	f002 f866 	bl	8005d4c <vPortExitCritical>
				return pdPASS;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e069      	b.n	8003d58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d103      	bne.n	8003c92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c8a:	f002 f85f 	bl	8005d4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e062      	b.n	8003d58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d106      	bne.n	8003ca6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c98:	f107 0310 	add.w	r3, r7, #16
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f001 f82b 	bl	8004cf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ca6:	f002 f851 	bl	8005d4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003caa:	f000 fd95 	bl	80047d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cae:	f002 f81b 	bl	8005ce8 <vPortEnterCritical>
 8003cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cb8:	b25b      	sxtb	r3, r3
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbe:	d103      	bne.n	8003cc8 <xQueueReceive+0x128>
 8003cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cce:	b25b      	sxtb	r3, r3
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd4:	d103      	bne.n	8003cde <xQueueReceive+0x13e>
 8003cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cde:	f002 f835 	bl	8005d4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ce2:	1d3a      	adds	r2, r7, #4
 8003ce4:	f107 0310 	add.w	r3, r7, #16
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f001 f81a 	bl	8004d24 <xTaskCheckForTimeOut>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d123      	bne.n	8003d3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cf8:	f000 fa62 	bl	80041c0 <prvIsQueueEmpty>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d017      	beq.n	8003d32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d04:	3324      	adds	r3, #36	@ 0x24
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 ff3e 	bl	8004b8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d12:	f000 fa03 	bl	800411c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d16:	f000 fd6d 	bl	80047f4 <xTaskResumeAll>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d189      	bne.n	8003c34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003d20:	4b0f      	ldr	r3, [pc, #60]	@ (8003d60 <xQueueReceive+0x1c0>)
 8003d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	e780      	b.n	8003c34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d34:	f000 f9f2 	bl	800411c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d38:	f000 fd5c 	bl	80047f4 <xTaskResumeAll>
 8003d3c:	e77a      	b.n	8003c34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d40:	f000 f9ec 	bl	800411c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d44:	f000 fd56 	bl	80047f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d4a:	f000 fa39 	bl	80041c0 <prvIsQueueEmpty>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f43f af6f 	beq.w	8003c34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3730      	adds	r7, #48	@ 0x30
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	e000ed04 	.word	0xe000ed04

08003d64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08e      	sub	sp, #56	@ 0x38
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10b      	bne.n	8003d98 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	623b      	str	r3, [r7, #32]
}
 8003d92:	bf00      	nop
 8003d94:	bf00      	nop
 8003d96:	e7fd      	b.n	8003d94 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00b      	beq.n	8003db8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	61fb      	str	r3, [r7, #28]
}
 8003db2:	bf00      	nop
 8003db4:	bf00      	nop
 8003db6:	e7fd      	b.n	8003db4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003db8:	f001 f900 	bl	8004fbc <xTaskGetSchedulerState>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <xQueueSemaphoreTake+0x64>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <xQueueSemaphoreTake+0x68>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <xQueueSemaphoreTake+0x6a>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	61bb      	str	r3, [r7, #24]
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	e7fd      	b.n	8003de6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dea:	f001 ff7d 	bl	8005ce8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d024      	beq.n	8003e44 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfc:	1e5a      	subs	r2, r3, #1
 8003dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e00:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e0a:	f001 fa83 	bl	8005314 <pvTaskIncrementMutexHeldCount>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e12:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00f      	beq.n	8003e3c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1e:	3310      	adds	r3, #16
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 ff05 	bl	8004c30 <xTaskRemoveFromEventList>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d007      	beq.n	8003e3c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e2c:	4b54      	ldr	r3, [pc, #336]	@ (8003f80 <xQueueSemaphoreTake+0x21c>)
 8003e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e3c:	f001 ff86 	bl	8005d4c <vPortExitCritical>
				return pdPASS;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e098      	b.n	8003f76 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d112      	bne.n	8003e70 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00b      	beq.n	8003e68 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	617b      	str	r3, [r7, #20]
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e68:	f001 ff70 	bl	8005d4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e082      	b.n	8003f76 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e76:	f107 030c 	add.w	r3, r7, #12
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 ff3c 	bl	8004cf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e84:	f001 ff62 	bl	8005d4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e88:	f000 fca6 	bl	80047d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e8c:	f001 ff2c 	bl	8005ce8 <vPortEnterCritical>
 8003e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e96:	b25b      	sxtb	r3, r3
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9c:	d103      	bne.n	8003ea6 <xQueueSemaphoreTake+0x142>
 8003e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003eac:	b25b      	sxtb	r3, r3
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d103      	bne.n	8003ebc <xQueueSemaphoreTake+0x158>
 8003eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ebc:	f001 ff46 	bl	8005d4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ec0:	463a      	mov	r2, r7
 8003ec2:	f107 030c 	add.w	r3, r7, #12
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 ff2b 	bl	8004d24 <xTaskCheckForTimeOut>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d132      	bne.n	8003f3a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ed4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ed6:	f000 f973 	bl	80041c0 <prvIsQueueEmpty>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d026      	beq.n	8003f2e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d109      	bne.n	8003efc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003ee8:	f001 fefe 	bl	8005ce8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f001 f881 	bl	8004ff8 <xTaskPriorityInherit>
 8003ef6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003ef8:	f001 ff28 	bl	8005d4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003efe:	3324      	adds	r3, #36	@ 0x24
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	4611      	mov	r1, r2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fe41 	bl	8004b8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f0c:	f000 f906 	bl	800411c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f10:	f000 fc70 	bl	80047f4 <xTaskResumeAll>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f47f af67 	bne.w	8003dea <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003f1c:	4b18      	ldr	r3, [pc, #96]	@ (8003f80 <xQueueSemaphoreTake+0x21c>)
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	e75d      	b.n	8003dea <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f30:	f000 f8f4 	bl	800411c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f34:	f000 fc5e 	bl	80047f4 <xTaskResumeAll>
 8003f38:	e757      	b.n	8003dea <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f3c:	f000 f8ee 	bl	800411c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f40:	f000 fc58 	bl	80047f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f46:	f000 f93b 	bl	80041c0 <prvIsQueueEmpty>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f43f af4c 	beq.w	8003dea <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00d      	beq.n	8003f74 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003f58:	f001 fec6 	bl	8005ce8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f5e:	f000 f835 	bl	8003fcc <prvGetDisinheritPriorityAfterTimeout>
 8003f62:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 f942 	bl	80051f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f70:	f001 feec 	bl	8005d4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3738      	adds	r7, #56	@ 0x38
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	e000ed04 	.word	0xe000ed04

08003f84 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10b      	bne.n	8003fae <vQueueDelete+0x2a>
	__asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	60bb      	str	r3, [r7, #8]
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	e7fd      	b.n	8003faa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f95e 	bl	8004270 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d102      	bne.n	8003fc4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f002 f882 	bl	80060c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d006      	beq.n	8003fea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f1c3 0307 	rsb	r3, r3, #7
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e001      	b.n	8003fee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003fee:	68fb      	ldr	r3, [r7, #12]
	}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10d      	bne.n	8004036 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d14d      	bne.n	80040be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	4618      	mov	r0, r3
 8004028:	f001 f85c 	bl	80050e4 <xTaskPriorityDisinherit>
 800402c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	e043      	b.n	80040be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d119      	bne.n	8004070 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6858      	ldr	r0, [r3, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	461a      	mov	r2, r3
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	f003 f9fe 	bl	8007448 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004054:	441a      	add	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	429a      	cmp	r2, r3
 8004064:	d32b      	bcc.n	80040be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	e026      	b.n	80040be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	68d8      	ldr	r0, [r3, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	461a      	mov	r2, r3
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	f003 f9e4 	bl	8007448 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	425b      	negs	r3, r3
 800408a:	441a      	add	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d207      	bcs.n	80040ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a4:	425b      	negs	r3, r3
 80040a6:	441a      	add	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d105      	bne.n	80040be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80040c6:	697b      	ldr	r3, [r7, #20]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d018      	beq.n	8004114 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	441a      	add	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d303      	bcc.n	8004104 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68d9      	ldr	r1, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	461a      	mov	r2, r3
 800410e:	6838      	ldr	r0, [r7, #0]
 8004110:	f003 f99a 	bl	8007448 <memcpy>
	}
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004124:	f001 fde0 	bl	8005ce8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800412e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004130:	e011      	b.n	8004156 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	2b00      	cmp	r3, #0
 8004138:	d012      	beq.n	8004160 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3324      	adds	r3, #36	@ 0x24
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fd76 	bl	8004c30 <xTaskRemoveFromEventList>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800414a:	f000 fe4f 	bl	8004dec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	3b01      	subs	r3, #1
 8004152:	b2db      	uxtb	r3, r3
 8004154:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	dce9      	bgt.n	8004132 <prvUnlockQueue+0x16>
 800415e:	e000      	b.n	8004162 <prvUnlockQueue+0x46>
					break;
 8004160:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	22ff      	movs	r2, #255	@ 0xff
 8004166:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800416a:	f001 fdef 	bl	8005d4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800416e:	f001 fdbb 	bl	8005ce8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004178:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800417a:	e011      	b.n	80041a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d012      	beq.n	80041aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3310      	adds	r3, #16
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fd51 	bl	8004c30 <xTaskRemoveFromEventList>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004194:	f000 fe2a 	bl	8004dec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004198:	7bbb      	ldrb	r3, [r7, #14]
 800419a:	3b01      	subs	r3, #1
 800419c:	b2db      	uxtb	r3, r3
 800419e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	dce9      	bgt.n	800417c <prvUnlockQueue+0x60>
 80041a8:	e000      	b.n	80041ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	22ff      	movs	r2, #255	@ 0xff
 80041b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80041b4:	f001 fdca 	bl	8005d4c <vPortExitCritical>
}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041c8:	f001 fd8e 	bl	8005ce8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d102      	bne.n	80041da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041d4:	2301      	movs	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	e001      	b.n	80041de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041de:	f001 fdb5 	bl	8005d4c <vPortExitCritical>

	return xReturn;
 80041e2:	68fb      	ldr	r3, [r7, #12]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041f4:	f001 fd78 	bl	8005ce8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004200:	429a      	cmp	r2, r3
 8004202:	d102      	bne.n	800420a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004204:	2301      	movs	r3, #1
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	e001      	b.n	800420e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800420e:	f001 fd9d 	bl	8005d4c <vPortExitCritical>

	return xReturn;
 8004212:	68fb      	ldr	r3, [r7, #12]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	e014      	b.n	8004256 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800422c:	4a0f      	ldr	r2, [pc, #60]	@ (800426c <vQueueAddToRegistry+0x50>)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10b      	bne.n	8004250 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004238:	490c      	ldr	r1, [pc, #48]	@ (800426c <vQueueAddToRegistry+0x50>)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004242:	4a0a      	ldr	r2, [pc, #40]	@ (800426c <vQueueAddToRegistry+0x50>)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800424e:	e006      	b.n	800425e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3301      	adds	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b07      	cmp	r3, #7
 800425a:	d9e7      	bls.n	800422c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800425c:	bf00      	nop
 800425e:	bf00      	nop
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000b7c 	.word	0x20000b7c

08004270 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e016      	b.n	80042ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800427e:	4a10      	ldr	r2, [pc, #64]	@ (80042c0 <vQueueUnregisterQueue+0x50>)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	429a      	cmp	r2, r3
 800428c:	d10b      	bne.n	80042a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800428e:	4a0c      	ldr	r2, [pc, #48]	@ (80042c0 <vQueueUnregisterQueue+0x50>)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2100      	movs	r1, #0
 8004294:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004298:	4a09      	ldr	r2, [pc, #36]	@ (80042c0 <vQueueUnregisterQueue+0x50>)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4413      	add	r3, r2
 80042a0:	2200      	movs	r2, #0
 80042a2:	605a      	str	r2, [r3, #4]
				break;
 80042a4:	e006      	b.n	80042b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3301      	adds	r3, #1
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b07      	cmp	r3, #7
 80042b0:	d9e5      	bls.n	800427e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	20000b7c 	.word	0x20000b7c

080042c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042d4:	f001 fd08 	bl	8005ce8 <vPortEnterCritical>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042de:	b25b      	sxtb	r3, r3
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e4:	d103      	bne.n	80042ee <vQueueWaitForMessageRestricted+0x2a>
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042f4:	b25b      	sxtb	r3, r3
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d103      	bne.n	8004304 <vQueueWaitForMessageRestricted+0x40>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004304:	f001 fd22 	bl	8005d4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430c:	2b00      	cmp	r3, #0
 800430e:	d106      	bne.n	800431e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	3324      	adds	r3, #36	@ 0x24
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fc5d 	bl	8004bd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800431e:	6978      	ldr	r0, [r7, #20]
 8004320:	f7ff fefc 	bl	800411c <prvUnlockQueue>
	}
 8004324:	bf00      	nop
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08e      	sub	sp, #56	@ 0x38
 8004330:	af04      	add	r7, sp, #16
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800433a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10b      	bne.n	8004358 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	623b      	str	r3, [r7, #32]
}
 8004352:	bf00      	nop
 8004354:	bf00      	nop
 8004356:	e7fd      	b.n	8004354 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <xTaskCreateStatic+0x4a>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	61fb      	str	r3, [r7, #28]
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	e7fd      	b.n	8004372 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004376:	23a0      	movs	r3, #160	@ 0xa0
 8004378:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2ba0      	cmp	r3, #160	@ 0xa0
 800437e:	d00b      	beq.n	8004398 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	61bb      	str	r3, [r7, #24]
}
 8004392:	bf00      	nop
 8004394:	bf00      	nop
 8004396:	e7fd      	b.n	8004394 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004398:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800439a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01e      	beq.n	80043de <xTaskCreateStatic+0xb2>
 80043a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d01b      	beq.n	80043de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043b8:	2300      	movs	r3, #0
 80043ba:	9303      	str	r3, [sp, #12]
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	9302      	str	r3, [sp, #8]
 80043c0:	f107 0314 	add.w	r3, r7, #20
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f851 	bl	8004478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043d8:	f000 f8ee 	bl	80045b8 <prvAddNewTaskToReadyList>
 80043dc:	e001      	b.n	80043e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043e2:	697b      	ldr	r3, [r7, #20]
	}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3728      	adds	r7, #40	@ 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08c      	sub	sp, #48	@ 0x30
 80043f0:	af04      	add	r7, sp, #16
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4618      	mov	r0, r3
 8004402:	f001 fd93 	bl	8005f2c <pvPortMalloc>
 8004406:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00e      	beq.n	800442c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800440e:	20a0      	movs	r0, #160	@ 0xa0
 8004410:	f001 fd8c 	bl	8005f2c <pvPortMalloc>
 8004414:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	631a      	str	r2, [r3, #48]	@ 0x30
 8004422:	e005      	b.n	8004430 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004424:	6978      	ldr	r0, [r7, #20]
 8004426:	f001 fe4f 	bl	80060c8 <vPortFree>
 800442a:	e001      	b.n	8004430 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d017      	beq.n	8004466 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800443e:	88fa      	ldrh	r2, [r7, #6]
 8004440:	2300      	movs	r3, #0
 8004442:	9303      	str	r3, [sp, #12]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	9302      	str	r3, [sp, #8]
 8004448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f80f 	bl	8004478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800445a:	69f8      	ldr	r0, [r7, #28]
 800445c:	f000 f8ac 	bl	80045b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004460:	2301      	movs	r3, #1
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	e002      	b.n	800446c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800446c:	69bb      	ldr	r3, [r7, #24]
	}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004490:	3b01      	subs	r3, #1
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	f023 0307 	bic.w	r3, r3, #7
 800449e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	617b      	str	r3, [r7, #20]
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	e7fd      	b.n	80044be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01f      	beq.n	8004508 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	e012      	b.n	80044f4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	4413      	add	r3, r2
 80044d4:	7819      	ldrb	r1, [r3, #0]
 80044d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	4413      	add	r3, r2
 80044dc:	3334      	adds	r3, #52	@ 0x34
 80044de:	460a      	mov	r2, r1
 80044e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	4413      	add	r3, r2
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d006      	beq.n	80044fc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3301      	adds	r3, #1
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	2b0f      	cmp	r3, #15
 80044f8:	d9e9      	bls.n	80044ce <prvInitialiseNewTask+0x56>
 80044fa:	e000      	b.n	80044fe <prvInitialiseNewTask+0x86>
			{
				break;
 80044fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004506:	e003      	b.n	8004510 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004512:	2b06      	cmp	r3, #6
 8004514:	d901      	bls.n	800451a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004516:	2306      	movs	r3, #6
 8004518:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800451e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004524:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	2200      	movs	r2, #0
 800452a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452e:	3304      	adds	r3, #4
 8004530:	4618      	mov	r0, r3
 8004532:	f7fe ff8c 	bl	800344e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004538:	3318      	adds	r3, #24
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe ff87 	bl	800344e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004544:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004548:	f1c3 0207 	rsb	r2, r3, #7
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004554:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	2200      	movs	r2, #0
 800455a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800455e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004560:	2200      	movs	r2, #0
 8004562:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	334c      	adds	r3, #76	@ 0x4c
 800456a:	224c      	movs	r2, #76	@ 0x4c
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f002 fee0 	bl	8007334 <memset>
 8004574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004576:	4a0d      	ldr	r2, [pc, #52]	@ (80045ac <prvInitialiseNewTask+0x134>)
 8004578:	651a      	str	r2, [r3, #80]	@ 0x50
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	4a0c      	ldr	r2, [pc, #48]	@ (80045b0 <prvInitialiseNewTask+0x138>)
 800457e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004582:	4a0c      	ldr	r2, [pc, #48]	@ (80045b4 <prvInitialiseNewTask+0x13c>)
 8004584:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	68f9      	ldr	r1, [r7, #12]
 800458a:	69b8      	ldr	r0, [r7, #24]
 800458c:	f001 fa7a 	bl	8005a84 <pxPortInitialiseStack>
 8004590:	4602      	mov	r2, r0
 8004592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004594:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800459c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800459e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045a2:	bf00      	nop
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	2000aa54 	.word	0x2000aa54
 80045b0:	2000aabc 	.word	0x2000aabc
 80045b4:	2000ab24 	.word	0x2000ab24

080045b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045c0:	f001 fb92 	bl	8005ce8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004670 <prvAddNewTaskToReadyList+0xb8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	4a29      	ldr	r2, [pc, #164]	@ (8004670 <prvAddNewTaskToReadyList+0xb8>)
 80045cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045ce:	4b29      	ldr	r3, [pc, #164]	@ (8004674 <prvAddNewTaskToReadyList+0xbc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045d6:	4a27      	ldr	r2, [pc, #156]	@ (8004674 <prvAddNewTaskToReadyList+0xbc>)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045dc:	4b24      	ldr	r3, [pc, #144]	@ (8004670 <prvAddNewTaskToReadyList+0xb8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d110      	bne.n	8004606 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045e4:	f000 fc26 	bl	8004e34 <prvInitialiseTaskLists>
 80045e8:	e00d      	b.n	8004606 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045ea:	4b23      	ldr	r3, [pc, #140]	@ (8004678 <prvAddNewTaskToReadyList+0xc0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045f2:	4b20      	ldr	r3, [pc, #128]	@ (8004674 <prvAddNewTaskToReadyList+0xbc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d802      	bhi.n	8004606 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004600:	4a1c      	ldr	r2, [pc, #112]	@ (8004674 <prvAddNewTaskToReadyList+0xbc>)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004606:	4b1d      	ldr	r3, [pc, #116]	@ (800467c <prvAddNewTaskToReadyList+0xc4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3301      	adds	r3, #1
 800460c:	4a1b      	ldr	r2, [pc, #108]	@ (800467c <prvAddNewTaskToReadyList+0xc4>)
 800460e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	2201      	movs	r2, #1
 8004616:	409a      	lsls	r2, r3
 8004618:	4b19      	ldr	r3, [pc, #100]	@ (8004680 <prvAddNewTaskToReadyList+0xc8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4313      	orrs	r3, r2
 800461e:	4a18      	ldr	r2, [pc, #96]	@ (8004680 <prvAddNewTaskToReadyList+0xc8>)
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4a15      	ldr	r2, [pc, #84]	@ (8004684 <prvAddNewTaskToReadyList+0xcc>)
 8004630:	441a      	add	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3304      	adds	r3, #4
 8004636:	4619      	mov	r1, r3
 8004638:	4610      	mov	r0, r2
 800463a:	f7fe ff15 	bl	8003468 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800463e:	f001 fb85 	bl	8005d4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004642:	4b0d      	ldr	r3, [pc, #52]	@ (8004678 <prvAddNewTaskToReadyList+0xc0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00e      	beq.n	8004668 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800464a:	4b0a      	ldr	r3, [pc, #40]	@ (8004674 <prvAddNewTaskToReadyList+0xbc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	429a      	cmp	r2, r3
 8004656:	d207      	bcs.n	8004668 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004658:	4b0b      	ldr	r3, [pc, #44]	@ (8004688 <prvAddNewTaskToReadyList+0xd0>)
 800465a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000cbc 	.word	0x20000cbc
 8004674:	20000bbc 	.word	0x20000bbc
 8004678:	20000cc8 	.word	0x20000cc8
 800467c:	20000cd8 	.word	0x20000cd8
 8004680:	20000cc4 	.word	0x20000cc4
 8004684:	20000bc0 	.word	0x20000bc0
 8004688:	e000ed04 	.word	0xe000ed04

0800468c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d018      	beq.n	80046d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800469e:	4b14      	ldr	r3, [pc, #80]	@ (80046f0 <vTaskDelay+0x64>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <vTaskDelay+0x32>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	60bb      	str	r3, [r7, #8]
}
 80046b8:	bf00      	nop
 80046ba:	bf00      	nop
 80046bc:	e7fd      	b.n	80046ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046be:	f000 f88b 	bl	80047d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046c2:	2100      	movs	r1, #0
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fe39 	bl	800533c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046ca:	f000 f893 	bl	80047f4 <xTaskResumeAll>
 80046ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d107      	bne.n	80046e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80046d6:	4b07      	ldr	r3, [pc, #28]	@ (80046f4 <vTaskDelay+0x68>)
 80046d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000ce4 	.word	0x20000ce4
 80046f4:	e000ed04 	.word	0xe000ed04

080046f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	@ 0x28
 80046fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004706:	463a      	mov	r2, r7
 8004708:	1d39      	adds	r1, r7, #4
 800470a:	f107 0308 	add.w	r3, r7, #8
 800470e:	4618      	mov	r0, r3
 8004710:	f7fb fed0 	bl	80004b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004714:	6839      	ldr	r1, [r7, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	9202      	str	r2, [sp, #8]
 800471c:	9301      	str	r3, [sp, #4]
 800471e:	2300      	movs	r3, #0
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	2300      	movs	r3, #0
 8004724:	460a      	mov	r2, r1
 8004726:	4924      	ldr	r1, [pc, #144]	@ (80047b8 <vTaskStartScheduler+0xc0>)
 8004728:	4824      	ldr	r0, [pc, #144]	@ (80047bc <vTaskStartScheduler+0xc4>)
 800472a:	f7ff fdff 	bl	800432c <xTaskCreateStatic>
 800472e:	4603      	mov	r3, r0
 8004730:	4a23      	ldr	r2, [pc, #140]	@ (80047c0 <vTaskStartScheduler+0xc8>)
 8004732:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004734:	4b22      	ldr	r3, [pc, #136]	@ (80047c0 <vTaskStartScheduler+0xc8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800473c:	2301      	movs	r3, #1
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	e001      	b.n	8004746 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d102      	bne.n	8004752 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800474c:	f000 fe5c 	bl	8005408 <xTimerCreateTimerTask>
 8004750:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d11b      	bne.n	8004790 <vTaskStartScheduler+0x98>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	613b      	str	r3, [r7, #16]
}
 800476a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800476c:	4b15      	ldr	r3, [pc, #84]	@ (80047c4 <vTaskStartScheduler+0xcc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	334c      	adds	r3, #76	@ 0x4c
 8004772:	4a15      	ldr	r2, [pc, #84]	@ (80047c8 <vTaskStartScheduler+0xd0>)
 8004774:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004776:	4b15      	ldr	r3, [pc, #84]	@ (80047cc <vTaskStartScheduler+0xd4>)
 8004778:	f04f 32ff 	mov.w	r2, #4294967295
 800477c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800477e:	4b14      	ldr	r3, [pc, #80]	@ (80047d0 <vTaskStartScheduler+0xd8>)
 8004780:	2201      	movs	r2, #1
 8004782:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004784:	4b13      	ldr	r3, [pc, #76]	@ (80047d4 <vTaskStartScheduler+0xdc>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800478a:	f001 fa09 	bl	8005ba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800478e:	e00f      	b.n	80047b0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d10b      	bne.n	80047b0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	60fb      	str	r3, [r7, #12]
}
 80047aa:	bf00      	nop
 80047ac:	bf00      	nop
 80047ae:	e7fd      	b.n	80047ac <vTaskStartScheduler+0xb4>
}
 80047b0:	bf00      	nop
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	08007dac 	.word	0x08007dac
 80047bc:	08004e05 	.word	0x08004e05
 80047c0:	20000ce0 	.word	0x20000ce0
 80047c4:	20000bbc 	.word	0x20000bbc
 80047c8:	20000010 	.word	0x20000010
 80047cc:	20000cdc 	.word	0x20000cdc
 80047d0:	20000cc8 	.word	0x20000cc8
 80047d4:	20000cc0 	.word	0x20000cc0

080047d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80047dc:	4b04      	ldr	r3, [pc, #16]	@ (80047f0 <vTaskSuspendAll+0x18>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3301      	adds	r3, #1
 80047e2:	4a03      	ldr	r2, [pc, #12]	@ (80047f0 <vTaskSuspendAll+0x18>)
 80047e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80047e6:	bf00      	nop
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	20000ce4 	.word	0x20000ce4

080047f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047fe:	2300      	movs	r3, #0
 8004800:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004802:	4b42      	ldr	r3, [pc, #264]	@ (800490c <xTaskResumeAll+0x118>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10b      	bne.n	8004822 <xTaskResumeAll+0x2e>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	603b      	str	r3, [r7, #0]
}
 800481c:	bf00      	nop
 800481e:	bf00      	nop
 8004820:	e7fd      	b.n	800481e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004822:	f001 fa61 	bl	8005ce8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004826:	4b39      	ldr	r3, [pc, #228]	@ (800490c <xTaskResumeAll+0x118>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3b01      	subs	r3, #1
 800482c:	4a37      	ldr	r2, [pc, #220]	@ (800490c <xTaskResumeAll+0x118>)
 800482e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004830:	4b36      	ldr	r3, [pc, #216]	@ (800490c <xTaskResumeAll+0x118>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d161      	bne.n	80048fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004838:	4b35      	ldr	r3, [pc, #212]	@ (8004910 <xTaskResumeAll+0x11c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d05d      	beq.n	80048fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004840:	e02e      	b.n	80048a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004842:	4b34      	ldr	r3, [pc, #208]	@ (8004914 <xTaskResumeAll+0x120>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3318      	adds	r3, #24
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe fe67 	bl	8003522 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3304      	adds	r3, #4
 8004858:	4618      	mov	r0, r3
 800485a:	f7fe fe62 	bl	8003522 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004862:	2201      	movs	r2, #1
 8004864:	409a      	lsls	r2, r3
 8004866:	4b2c      	ldr	r3, [pc, #176]	@ (8004918 <xTaskResumeAll+0x124>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4313      	orrs	r3, r2
 800486c:	4a2a      	ldr	r2, [pc, #168]	@ (8004918 <xTaskResumeAll+0x124>)
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4a27      	ldr	r2, [pc, #156]	@ (800491c <xTaskResumeAll+0x128>)
 800487e:	441a      	add	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3304      	adds	r3, #4
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f7fe fdee 	bl	8003468 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004890:	4b23      	ldr	r3, [pc, #140]	@ (8004920 <xTaskResumeAll+0x12c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800489a:	4b22      	ldr	r3, [pc, #136]	@ (8004924 <xTaskResumeAll+0x130>)
 800489c:	2201      	movs	r2, #1
 800489e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004914 <xTaskResumeAll+0x120>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1cc      	bne.n	8004842 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048ae:	f000 fb65 	bl	8004f7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004928 <xTaskResumeAll+0x134>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d010      	beq.n	80048e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048be:	f000 f847 	bl	8004950 <xTaskIncrementTick>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80048c8:	4b16      	ldr	r3, [pc, #88]	@ (8004924 <xTaskResumeAll+0x130>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f1      	bne.n	80048be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80048da:	4b13      	ldr	r3, [pc, #76]	@ (8004928 <xTaskResumeAll+0x134>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048e0:	4b10      	ldr	r3, [pc, #64]	@ (8004924 <xTaskResumeAll+0x130>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d009      	beq.n	80048fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048e8:	2301      	movs	r3, #1
 80048ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048ec:	4b0f      	ldr	r3, [pc, #60]	@ (800492c <xTaskResumeAll+0x138>)
 80048ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048fc:	f001 fa26 	bl	8005d4c <vPortExitCritical>

	return xAlreadyYielded;
 8004900:	68bb      	ldr	r3, [r7, #8]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000ce4 	.word	0x20000ce4
 8004910:	20000cbc 	.word	0x20000cbc
 8004914:	20000c7c 	.word	0x20000c7c
 8004918:	20000cc4 	.word	0x20000cc4
 800491c:	20000bc0 	.word	0x20000bc0
 8004920:	20000bbc 	.word	0x20000bbc
 8004924:	20000cd0 	.word	0x20000cd0
 8004928:	20000ccc 	.word	0x20000ccc
 800492c:	e000ed04 	.word	0xe000ed04

08004930 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004936:	4b05      	ldr	r3, [pc, #20]	@ (800494c <xTaskGetTickCount+0x1c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800493c:	687b      	ldr	r3, [r7, #4]
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000cc0 	.word	0x20000cc0

08004950 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800495a:	4b4f      	ldr	r3, [pc, #316]	@ (8004a98 <xTaskIncrementTick+0x148>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	f040 808f 	bne.w	8004a82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004964:	4b4d      	ldr	r3, [pc, #308]	@ (8004a9c <xTaskIncrementTick+0x14c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3301      	adds	r3, #1
 800496a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800496c:	4a4b      	ldr	r2, [pc, #300]	@ (8004a9c <xTaskIncrementTick+0x14c>)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d121      	bne.n	80049bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004978:	4b49      	ldr	r3, [pc, #292]	@ (8004aa0 <xTaskIncrementTick+0x150>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	603b      	str	r3, [r7, #0]
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	e7fd      	b.n	8004996 <xTaskIncrementTick+0x46>
 800499a:	4b41      	ldr	r3, [pc, #260]	@ (8004aa0 <xTaskIncrementTick+0x150>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	4b40      	ldr	r3, [pc, #256]	@ (8004aa4 <xTaskIncrementTick+0x154>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a3e      	ldr	r2, [pc, #248]	@ (8004aa0 <xTaskIncrementTick+0x150>)
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	4a3e      	ldr	r2, [pc, #248]	@ (8004aa4 <xTaskIncrementTick+0x154>)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	4b3e      	ldr	r3, [pc, #248]	@ (8004aa8 <xTaskIncrementTick+0x158>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3301      	adds	r3, #1
 80049b4:	4a3c      	ldr	r2, [pc, #240]	@ (8004aa8 <xTaskIncrementTick+0x158>)
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	f000 fae0 	bl	8004f7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049bc:	4b3b      	ldr	r3, [pc, #236]	@ (8004aac <xTaskIncrementTick+0x15c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d348      	bcc.n	8004a58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049c6:	4b36      	ldr	r3, [pc, #216]	@ (8004aa0 <xTaskIncrementTick+0x150>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d104      	bne.n	80049da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049d0:	4b36      	ldr	r3, [pc, #216]	@ (8004aac <xTaskIncrementTick+0x15c>)
 80049d2:	f04f 32ff 	mov.w	r2, #4294967295
 80049d6:	601a      	str	r2, [r3, #0]
					break;
 80049d8:	e03e      	b.n	8004a58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049da:	4b31      	ldr	r3, [pc, #196]	@ (8004aa0 <xTaskIncrementTick+0x150>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d203      	bcs.n	80049fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049f2:	4a2e      	ldr	r2, [pc, #184]	@ (8004aac <xTaskIncrementTick+0x15c>)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049f8:	e02e      	b.n	8004a58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	3304      	adds	r3, #4
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe fd8f 	bl	8003522 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	3318      	adds	r3, #24
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe fd86 	bl	8003522 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	4b24      	ldr	r3, [pc, #144]	@ (8004ab0 <xTaskIncrementTick+0x160>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	4a22      	ldr	r2, [pc, #136]	@ (8004ab0 <xTaskIncrementTick+0x160>)
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab4 <xTaskIncrementTick+0x164>)
 8004a36:	441a      	add	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f7fe fd12 	bl	8003468 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a48:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab8 <xTaskIncrementTick+0x168>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d3b9      	bcc.n	80049c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a52:	2301      	movs	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a56:	e7b6      	b.n	80049c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a58:	4b17      	ldr	r3, [pc, #92]	@ (8004ab8 <xTaskIncrementTick+0x168>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a5e:	4915      	ldr	r1, [pc, #84]	@ (8004ab4 <xTaskIncrementTick+0x164>)
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d901      	bls.n	8004a74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a70:	2301      	movs	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a74:	4b11      	ldr	r3, [pc, #68]	@ (8004abc <xTaskIncrementTick+0x16c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	e004      	b.n	8004a8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a82:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac0 <xTaskIncrementTick+0x170>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3301      	adds	r3, #1
 8004a88:	4a0d      	ldr	r2, [pc, #52]	@ (8004ac0 <xTaskIncrementTick+0x170>)
 8004a8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a8c:	697b      	ldr	r3, [r7, #20]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000ce4 	.word	0x20000ce4
 8004a9c:	20000cc0 	.word	0x20000cc0
 8004aa0:	20000c74 	.word	0x20000c74
 8004aa4:	20000c78 	.word	0x20000c78
 8004aa8:	20000cd4 	.word	0x20000cd4
 8004aac:	20000cdc 	.word	0x20000cdc
 8004ab0:	20000cc4 	.word	0x20000cc4
 8004ab4:	20000bc0 	.word	0x20000bc0
 8004ab8:	20000bbc 	.word	0x20000bbc
 8004abc:	20000cd0 	.word	0x20000cd0
 8004ac0:	20000ccc 	.word	0x20000ccc

08004ac4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004aca:	4b2a      	ldr	r3, [pc, #168]	@ (8004b74 <vTaskSwitchContext+0xb0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ad2:	4b29      	ldr	r3, [pc, #164]	@ (8004b78 <vTaskSwitchContext+0xb4>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ad8:	e045      	b.n	8004b66 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004ada:	4b27      	ldr	r3, [pc, #156]	@ (8004b78 <vTaskSwitchContext+0xb4>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ae0:	4b26      	ldr	r3, [pc, #152]	@ (8004b7c <vTaskSwitchContext+0xb8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	fab3 f383 	clz	r3, r3
 8004aec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004aee:	7afb      	ldrb	r3, [r7, #11]
 8004af0:	f1c3 031f 	rsb	r3, r3, #31
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	4922      	ldr	r1, [pc, #136]	@ (8004b80 <vTaskSwitchContext+0xbc>)
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	607b      	str	r3, [r7, #4]
}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	e7fd      	b.n	8004b1e <vTaskSwitchContext+0x5a>
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4a14      	ldr	r2, [pc, #80]	@ (8004b80 <vTaskSwitchContext+0xbc>)
 8004b2e:	4413      	add	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	605a      	str	r2, [r3, #4]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	3308      	adds	r3, #8
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d104      	bne.n	8004b52 <vTaskSwitchContext+0x8e>
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4a0a      	ldr	r2, [pc, #40]	@ (8004b84 <vTaskSwitchContext+0xc0>)
 8004b5a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b5c:	4b09      	ldr	r3, [pc, #36]	@ (8004b84 <vTaskSwitchContext+0xc0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	334c      	adds	r3, #76	@ 0x4c
 8004b62:	4a09      	ldr	r2, [pc, #36]	@ (8004b88 <vTaskSwitchContext+0xc4>)
 8004b64:	6013      	str	r3, [r2, #0]
}
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20000ce4 	.word	0x20000ce4
 8004b78:	20000cd0 	.word	0x20000cd0
 8004b7c:	20000cc4 	.word	0x20000cc4
 8004b80:	20000bc0 	.word	0x20000bc0
 8004b84:	20000bbc 	.word	0x20000bbc
 8004b88:	20000010 	.word	0x20000010

08004b8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10b      	bne.n	8004bb4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	60fb      	str	r3, [r7, #12]
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	e7fd      	b.n	8004bb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bb4:	4b07      	ldr	r3, [pc, #28]	@ (8004bd4 <vTaskPlaceOnEventList+0x48>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3318      	adds	r3, #24
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7fe fc77 	bl	80034b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	6838      	ldr	r0, [r7, #0]
 8004bc6:	f000 fbb9 	bl	800533c <prvAddCurrentTaskToDelayedList>
}
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000bbc 	.word	0x20000bbc

08004bd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10b      	bne.n	8004c02 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	617b      	str	r3, [r7, #20]
}
 8004bfc:	bf00      	nop
 8004bfe:	bf00      	nop
 8004c00:	e7fd      	b.n	8004bfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c02:	4b0a      	ldr	r3, [pc, #40]	@ (8004c2c <vTaskPlaceOnEventListRestricted+0x54>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3318      	adds	r3, #24
 8004c08:	4619      	mov	r1, r3
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7fe fc2c 	bl	8003468 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	68b8      	ldr	r0, [r7, #8]
 8004c20:	f000 fb8c 	bl	800533c <prvAddCurrentTaskToDelayedList>
	}
 8004c24:	bf00      	nop
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20000bbc 	.word	0x20000bbc

08004c30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10b      	bne.n	8004c5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	60fb      	str	r3, [r7, #12]
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	e7fd      	b.n	8004c5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	3318      	adds	r3, #24
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe fc5d 	bl	8003522 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c68:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <xTaskRemoveFromEventList+0xb0>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d11c      	bne.n	8004caa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fe fc54 	bl	8003522 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	2201      	movs	r2, #1
 8004c80:	409a      	lsls	r2, r3
 8004c82:	4b18      	ldr	r3, [pc, #96]	@ (8004ce4 <xTaskRemoveFromEventList+0xb4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	4a16      	ldr	r2, [pc, #88]	@ (8004ce4 <xTaskRemoveFromEventList+0xb4>)
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4a13      	ldr	r2, [pc, #76]	@ (8004ce8 <xTaskRemoveFromEventList+0xb8>)
 8004c9a:	441a      	add	r2, r3
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f7fe fbe0 	bl	8003468 <vListInsertEnd>
 8004ca8:	e005      	b.n	8004cb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	3318      	adds	r3, #24
 8004cae:	4619      	mov	r1, r3
 8004cb0:	480e      	ldr	r0, [pc, #56]	@ (8004cec <xTaskRemoveFromEventList+0xbc>)
 8004cb2:	f7fe fbd9 	bl	8003468 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cba:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf0 <xTaskRemoveFromEventList+0xc0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d905      	bls.n	8004cd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf4 <xTaskRemoveFromEventList+0xc4>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e001      	b.n	8004cd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004cd4:	697b      	ldr	r3, [r7, #20]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000ce4 	.word	0x20000ce4
 8004ce4:	20000cc4 	.word	0x20000cc4
 8004ce8:	20000bc0 	.word	0x20000bc0
 8004cec:	20000c7c 	.word	0x20000c7c
 8004cf0:	20000bbc 	.word	0x20000bbc
 8004cf4:	20000cd0 	.word	0x20000cd0

08004cf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d00:	4b06      	ldr	r3, [pc, #24]	@ (8004d1c <vTaskInternalSetTimeOutState+0x24>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d08:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <vTaskInternalSetTimeOutState+0x28>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	605a      	str	r2, [r3, #4]
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	20000cd4 	.word	0x20000cd4
 8004d20:	20000cc0 	.word	0x20000cc0

08004d24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10b      	bne.n	8004d4c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	613b      	str	r3, [r7, #16]
}
 8004d46:	bf00      	nop
 8004d48:	bf00      	nop
 8004d4a:	e7fd      	b.n	8004d48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10b      	bne.n	8004d6a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	60fb      	str	r3, [r7, #12]
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
 8004d68:	e7fd      	b.n	8004d66 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004d6a:	f000 ffbd 	bl	8005ce8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004de4 <xTaskCheckForTimeOut+0xc0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d86:	d102      	bne.n	8004d8e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	e023      	b.n	8004dd6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4b15      	ldr	r3, [pc, #84]	@ (8004de8 <xTaskCheckForTimeOut+0xc4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d007      	beq.n	8004daa <xTaskCheckForTimeOut+0x86>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d302      	bcc.n	8004daa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004da4:	2301      	movs	r3, #1
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	e015      	b.n	8004dd6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d20b      	bcs.n	8004dcc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	1ad2      	subs	r2, r2, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff ff99 	bl	8004cf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61fb      	str	r3, [r7, #28]
 8004dca:	e004      	b.n	8004dd6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004dd6:	f000 ffb9 	bl	8005d4c <vPortExitCritical>

	return xReturn;
 8004dda:	69fb      	ldr	r3, [r7, #28]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3720      	adds	r7, #32
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000cc0 	.word	0x20000cc0
 8004de8:	20000cd4 	.word	0x20000cd4

08004dec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004df0:	4b03      	ldr	r3, [pc, #12]	@ (8004e00 <vTaskMissedYield+0x14>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	601a      	str	r2, [r3, #0]
}
 8004df6:	bf00      	nop
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	20000cd0 	.word	0x20000cd0

08004e04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e0c:	f000 f852 	bl	8004eb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e10:	4b06      	ldr	r3, [pc, #24]	@ (8004e2c <prvIdleTask+0x28>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d9f9      	bls.n	8004e0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e18:	4b05      	ldr	r3, [pc, #20]	@ (8004e30 <prvIdleTask+0x2c>)
 8004e1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e28:	e7f0      	b.n	8004e0c <prvIdleTask+0x8>
 8004e2a:	bf00      	nop
 8004e2c:	20000bc0 	.word	0x20000bc0
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	607b      	str	r3, [r7, #4]
 8004e3e:	e00c      	b.n	8004e5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4a12      	ldr	r2, [pc, #72]	@ (8004e94 <prvInitialiseTaskLists+0x60>)
 8004e4c:	4413      	add	r3, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe fadd 	bl	800340e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3301      	adds	r3, #1
 8004e58:	607b      	str	r3, [r7, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b06      	cmp	r3, #6
 8004e5e:	d9ef      	bls.n	8004e40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e60:	480d      	ldr	r0, [pc, #52]	@ (8004e98 <prvInitialiseTaskLists+0x64>)
 8004e62:	f7fe fad4 	bl	800340e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e66:	480d      	ldr	r0, [pc, #52]	@ (8004e9c <prvInitialiseTaskLists+0x68>)
 8004e68:	f7fe fad1 	bl	800340e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e6c:	480c      	ldr	r0, [pc, #48]	@ (8004ea0 <prvInitialiseTaskLists+0x6c>)
 8004e6e:	f7fe face 	bl	800340e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e72:	480c      	ldr	r0, [pc, #48]	@ (8004ea4 <prvInitialiseTaskLists+0x70>)
 8004e74:	f7fe facb 	bl	800340e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e78:	480b      	ldr	r0, [pc, #44]	@ (8004ea8 <prvInitialiseTaskLists+0x74>)
 8004e7a:	f7fe fac8 	bl	800340e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004eac <prvInitialiseTaskLists+0x78>)
 8004e80:	4a05      	ldr	r2, [pc, #20]	@ (8004e98 <prvInitialiseTaskLists+0x64>)
 8004e82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e84:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <prvInitialiseTaskLists+0x7c>)
 8004e86:	4a05      	ldr	r2, [pc, #20]	@ (8004e9c <prvInitialiseTaskLists+0x68>)
 8004e88:	601a      	str	r2, [r3, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000bc0 	.word	0x20000bc0
 8004e98:	20000c4c 	.word	0x20000c4c
 8004e9c:	20000c60 	.word	0x20000c60
 8004ea0:	20000c7c 	.word	0x20000c7c
 8004ea4:	20000c90 	.word	0x20000c90
 8004ea8:	20000ca8 	.word	0x20000ca8
 8004eac:	20000c74 	.word	0x20000c74
 8004eb0:	20000c78 	.word	0x20000c78

08004eb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eba:	e019      	b.n	8004ef0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ebc:	f000 ff14 	bl	8005ce8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ec0:	4b10      	ldr	r3, [pc, #64]	@ (8004f04 <prvCheckTasksWaitingTermination+0x50>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fe fb28 	bl	8003522 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8004f08 <prvCheckTasksWaitingTermination+0x54>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8004f08 <prvCheckTasksWaitingTermination+0x54>)
 8004eda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004edc:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <prvCheckTasksWaitingTermination+0x58>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8004f0c <prvCheckTasksWaitingTermination+0x58>)
 8004ee4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ee6:	f000 ff31 	bl	8005d4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f810 	bl	8004f10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ef0:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <prvCheckTasksWaitingTermination+0x58>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e1      	bne.n	8004ebc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ef8:	bf00      	nop
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000c90 	.word	0x20000c90
 8004f08:	20000cbc 	.word	0x20000cbc
 8004f0c:	20000ca4 	.word	0x20000ca4

08004f10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	334c      	adds	r3, #76	@ 0x4c
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f002 fa11 	bl	8007344 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d108      	bne.n	8004f3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f30:	4618      	mov	r0, r3
 8004f32:	f001 f8c9 	bl	80060c8 <vPortFree>
				vPortFree( pxTCB );
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f001 f8c6 	bl	80060c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f3c:	e019      	b.n	8004f72 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d103      	bne.n	8004f50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 f8bd 	bl	80060c8 <vPortFree>
	}
 8004f4e:	e010      	b.n	8004f72 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d00b      	beq.n	8004f72 <prvDeleteTCB+0x62>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	60fb      	str	r3, [r7, #12]
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	e7fd      	b.n	8004f6e <prvDeleteTCB+0x5e>
	}
 8004f72:	bf00      	nop
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f82:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb4 <prvResetNextTaskUnblockTime+0x38>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d104      	bne.n	8004f96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8004f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f94:	e008      	b.n	8004fa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f96:	4b07      	ldr	r3, [pc, #28]	@ (8004fb4 <prvResetNextTaskUnblockTime+0x38>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	4a04      	ldr	r2, [pc, #16]	@ (8004fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8004fa6:	6013      	str	r3, [r2, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	20000c74 	.word	0x20000c74
 8004fb8:	20000cdc 	.word	0x20000cdc

08004fbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff0 <xTaskGetSchedulerState+0x34>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	607b      	str	r3, [r7, #4]
 8004fce:	e008      	b.n	8004fe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fd0:	4b08      	ldr	r3, [pc, #32]	@ (8004ff4 <xTaskGetSchedulerState+0x38>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	607b      	str	r3, [r7, #4]
 8004fdc:	e001      	b.n	8004fe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fe2:	687b      	ldr	r3, [r7, #4]
	}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20000cc8 	.word	0x20000cc8
 8004ff4:	20000ce4 	.word	0x20000ce4

08004ff8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d05e      	beq.n	80050cc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005012:	4b31      	ldr	r3, [pc, #196]	@ (80050d8 <xTaskPriorityInherit+0xe0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005018:	429a      	cmp	r2, r3
 800501a:	d24e      	bcs.n	80050ba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	db06      	blt.n	8005032 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005024:	4b2c      	ldr	r3, [pc, #176]	@ (80050d8 <xTaskPriorityInherit+0xe0>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502a:	f1c3 0207 	rsb	r2, r3, #7
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	6959      	ldr	r1, [r3, #20]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4a26      	ldr	r2, [pc, #152]	@ (80050dc <xTaskPriorityInherit+0xe4>)
 8005044:	4413      	add	r3, r2
 8005046:	4299      	cmp	r1, r3
 8005048:	d12f      	bne.n	80050aa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	3304      	adds	r3, #4
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe fa67 	bl	8003522 <uxListRemove>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505e:	2201      	movs	r2, #1
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	43da      	mvns	r2, r3
 8005066:	4b1e      	ldr	r3, [pc, #120]	@ (80050e0 <xTaskPriorityInherit+0xe8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4013      	ands	r3, r2
 800506c:	4a1c      	ldr	r2, [pc, #112]	@ (80050e0 <xTaskPriorityInherit+0xe8>)
 800506e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005070:	4b19      	ldr	r3, [pc, #100]	@ (80050d8 <xTaskPriorityInherit+0xe0>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	2201      	movs	r2, #1
 8005080:	409a      	lsls	r2, r3
 8005082:	4b17      	ldr	r3, [pc, #92]	@ (80050e0 <xTaskPriorityInherit+0xe8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4313      	orrs	r3, r2
 8005088:	4a15      	ldr	r2, [pc, #84]	@ (80050e0 <xTaskPriorityInherit+0xe8>)
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4a10      	ldr	r2, [pc, #64]	@ (80050dc <xTaskPriorityInherit+0xe4>)
 800509a:	441a      	add	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f7fe f9e0 	bl	8003468 <vListInsertEnd>
 80050a8:	e004      	b.n	80050b4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80050aa:	4b0b      	ldr	r3, [pc, #44]	@ (80050d8 <xTaskPriorityInherit+0xe0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80050b4:	2301      	movs	r3, #1
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	e008      	b.n	80050cc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050be:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <xTaskPriorityInherit+0xe0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d201      	bcs.n	80050cc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80050c8:	2301      	movs	r3, #1
 80050ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050cc:	68fb      	ldr	r3, [r7, #12]
	}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000bbc 	.word	0x20000bbc
 80050dc:	20000bc0 	.word	0x20000bc0
 80050e0:	20000cc4 	.word	0x20000cc4

080050e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d070      	beq.n	80051dc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050fa:	4b3b      	ldr	r3, [pc, #236]	@ (80051e8 <xTaskPriorityDisinherit+0x104>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	429a      	cmp	r2, r3
 8005102:	d00b      	beq.n	800511c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	60fb      	str	r3, [r7, #12]
}
 8005116:	bf00      	nop
 8005118:	bf00      	nop
 800511a:	e7fd      	b.n	8005118 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	60bb      	str	r3, [r7, #8]
}
 8005136:	bf00      	nop
 8005138:	bf00      	nop
 800513a:	e7fd      	b.n	8005138 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005140:	1e5a      	subs	r2, r3, #1
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514e:	429a      	cmp	r2, r3
 8005150:	d044      	beq.n	80051dc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005156:	2b00      	cmp	r3, #0
 8005158:	d140      	bne.n	80051dc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	3304      	adds	r3, #4
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe f9df 	bl	8003522 <uxListRemove>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d115      	bne.n	8005196 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516e:	491f      	ldr	r1, [pc, #124]	@ (80051ec <xTaskPriorityDisinherit+0x108>)
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <xTaskPriorityDisinherit+0xb2>
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005184:	2201      	movs	r2, #1
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	43da      	mvns	r2, r3
 800518c:	4b18      	ldr	r3, [pc, #96]	@ (80051f0 <xTaskPriorityDisinherit+0x10c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4013      	ands	r3, r2
 8005192:	4a17      	ldr	r2, [pc, #92]	@ (80051f0 <xTaskPriorityDisinherit+0x10c>)
 8005194:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	f1c3 0207 	rsb	r2, r3, #7
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ae:	2201      	movs	r2, #1
 80051b0:	409a      	lsls	r2, r3
 80051b2:	4b0f      	ldr	r3, [pc, #60]	@ (80051f0 <xTaskPriorityDisinherit+0x10c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	4a0d      	ldr	r2, [pc, #52]	@ (80051f0 <xTaskPriorityDisinherit+0x10c>)
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4a08      	ldr	r2, [pc, #32]	@ (80051ec <xTaskPriorityDisinherit+0x108>)
 80051ca:	441a      	add	r2, r3
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4619      	mov	r1, r3
 80051d2:	4610      	mov	r0, r2
 80051d4:	f7fe f948 	bl	8003468 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80051d8:	2301      	movs	r3, #1
 80051da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051dc:	697b      	ldr	r3, [r7, #20]
	}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000bbc 	.word	0x20000bbc
 80051ec:	20000bc0 	.word	0x20000bc0
 80051f0:	20000cc4 	.word	0x20000cc4

080051f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005202:	2301      	movs	r3, #1
 8005204:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d079      	beq.n	8005300 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10b      	bne.n	800522c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	60fb      	str	r3, [r7, #12]
}
 8005226:	bf00      	nop
 8005228:	bf00      	nop
 800522a:	e7fd      	b.n	8005228 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d902      	bls.n	800523c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	e002      	b.n	8005242 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005240:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	429a      	cmp	r2, r3
 800524a:	d059      	beq.n	8005300 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	429a      	cmp	r2, r3
 8005254:	d154      	bne.n	8005300 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005256:	4b2c      	ldr	r3, [pc, #176]	@ (8005308 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	429a      	cmp	r2, r3
 800525e:	d10b      	bne.n	8005278 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	60bb      	str	r3, [r7, #8]
}
 8005272:	bf00      	nop
 8005274:	bf00      	nop
 8005276:	e7fd      	b.n	8005274 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	db04      	blt.n	8005296 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f1c3 0207 	rsb	r2, r3, #7
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	6959      	ldr	r1, [r3, #20]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4a19      	ldr	r2, [pc, #100]	@ (800530c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80052a6:	4413      	add	r3, r2
 80052a8:	4299      	cmp	r1, r3
 80052aa:	d129      	bne.n	8005300 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fe f936 	bl	8003522 <uxListRemove>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c0:	2201      	movs	r2, #1
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	43da      	mvns	r2, r3
 80052c8:	4b11      	ldr	r3, [pc, #68]	@ (8005310 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4013      	ands	r3, r2
 80052ce:	4a10      	ldr	r2, [pc, #64]	@ (8005310 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80052d0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d6:	2201      	movs	r2, #1
 80052d8:	409a      	lsls	r2, r3
 80052da:	4b0d      	ldr	r3, [pc, #52]	@ (8005310 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4313      	orrs	r3, r2
 80052e0:	4a0b      	ldr	r2, [pc, #44]	@ (8005310 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4a06      	ldr	r2, [pc, #24]	@ (800530c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80052f2:	441a      	add	r2, r3
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	3304      	adds	r3, #4
 80052f8:	4619      	mov	r1, r3
 80052fa:	4610      	mov	r0, r2
 80052fc:	f7fe f8b4 	bl	8003468 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005300:	bf00      	nop
 8005302:	3720      	adds	r7, #32
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20000bbc 	.word	0x20000bbc
 800530c:	20000bc0 	.word	0x20000bc0
 8005310:	20000cc4 	.word	0x20000cc4

08005314 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005318:	4b07      	ldr	r3, [pc, #28]	@ (8005338 <pvTaskIncrementMutexHeldCount+0x24>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d004      	beq.n	800532a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005320:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <pvTaskIncrementMutexHeldCount+0x24>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005326:	3201      	adds	r2, #1
 8005328:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800532a:	4b03      	ldr	r3, [pc, #12]	@ (8005338 <pvTaskIncrementMutexHeldCount+0x24>)
 800532c:	681b      	ldr	r3, [r3, #0]
	}
 800532e:	4618      	mov	r0, r3
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	20000bbc 	.word	0x20000bbc

0800533c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005346:	4b29      	ldr	r3, [pc, #164]	@ (80053ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800534c:	4b28      	ldr	r3, [pc, #160]	@ (80053f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3304      	adds	r3, #4
 8005352:	4618      	mov	r0, r3
 8005354:	f7fe f8e5 	bl	8003522 <uxListRemove>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10b      	bne.n	8005376 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800535e:	4b24      	ldr	r3, [pc, #144]	@ (80053f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005364:	2201      	movs	r2, #1
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43da      	mvns	r2, r3
 800536c:	4b21      	ldr	r3, [pc, #132]	@ (80053f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4013      	ands	r3, r2
 8005372:	4a20      	ldr	r2, [pc, #128]	@ (80053f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005374:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d10a      	bne.n	8005394 <prvAddCurrentTaskToDelayedList+0x58>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d007      	beq.n	8005394 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005384:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3304      	adds	r3, #4
 800538a:	4619      	mov	r1, r3
 800538c:	481a      	ldr	r0, [pc, #104]	@ (80053f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800538e:	f7fe f86b 	bl	8003468 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005392:	e026      	b.n	80053e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4413      	add	r3, r2
 800539a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800539c:	4b14      	ldr	r3, [pc, #80]	@ (80053f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d209      	bcs.n	80053c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053ac:	4b13      	ldr	r3, [pc, #76]	@ (80053fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4b0f      	ldr	r3, [pc, #60]	@ (80053f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3304      	adds	r3, #4
 80053b6:	4619      	mov	r1, r3
 80053b8:	4610      	mov	r0, r2
 80053ba:	f7fe f879 	bl	80034b0 <vListInsert>
}
 80053be:	e010      	b.n	80053e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005400 <prvAddCurrentTaskToDelayedList+0xc4>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f7fe f86f 	bl	80034b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005404 <prvAddCurrentTaskToDelayedList+0xc8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d202      	bcs.n	80053e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80053dc:	4a09      	ldr	r2, [pc, #36]	@ (8005404 <prvAddCurrentTaskToDelayedList+0xc8>)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	6013      	str	r3, [r2, #0]
}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000cc0 	.word	0x20000cc0
 80053f0:	20000bbc 	.word	0x20000bbc
 80053f4:	20000cc4 	.word	0x20000cc4
 80053f8:	20000ca8 	.word	0x20000ca8
 80053fc:	20000c78 	.word	0x20000c78
 8005400:	20000c74 	.word	0x20000c74
 8005404:	20000cdc 	.word	0x20000cdc

08005408 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	@ 0x28
 800540c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005412:	f000 faf7 	bl	8005a04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005416:	4b1d      	ldr	r3, [pc, #116]	@ (800548c <xTimerCreateTimerTask+0x84>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d021      	beq.n	8005462 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005426:	1d3a      	adds	r2, r7, #4
 8005428:	f107 0108 	add.w	r1, r7, #8
 800542c:	f107 030c 	add.w	r3, r7, #12
 8005430:	4618      	mov	r0, r3
 8005432:	f7fb f859 	bl	80004e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	9202      	str	r2, [sp, #8]
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	2302      	movs	r3, #2
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	2300      	movs	r3, #0
 8005446:	460a      	mov	r2, r1
 8005448:	4911      	ldr	r1, [pc, #68]	@ (8005490 <xTimerCreateTimerTask+0x88>)
 800544a:	4812      	ldr	r0, [pc, #72]	@ (8005494 <xTimerCreateTimerTask+0x8c>)
 800544c:	f7fe ff6e 	bl	800432c <xTaskCreateStatic>
 8005450:	4603      	mov	r3, r0
 8005452:	4a11      	ldr	r2, [pc, #68]	@ (8005498 <xTimerCreateTimerTask+0x90>)
 8005454:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005456:	4b10      	ldr	r3, [pc, #64]	@ (8005498 <xTimerCreateTimerTask+0x90>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800545e:	2301      	movs	r3, #1
 8005460:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10b      	bne.n	8005480 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	613b      	str	r3, [r7, #16]
}
 800547a:	bf00      	nop
 800547c:	bf00      	nop
 800547e:	e7fd      	b.n	800547c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005480:	697b      	ldr	r3, [r7, #20]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000d18 	.word	0x20000d18
 8005490:	08007db4 	.word	0x08007db4
 8005494:	080055d5 	.word	0x080055d5
 8005498:	20000d1c 	.word	0x20000d1c

0800549c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08a      	sub	sp, #40	@ 0x28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10b      	bne.n	80054cc <xTimerGenericCommand+0x30>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	623b      	str	r3, [r7, #32]
}
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	e7fd      	b.n	80054c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80054cc:	4b19      	ldr	r3, [pc, #100]	@ (8005534 <xTimerGenericCommand+0x98>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d02a      	beq.n	800552a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b05      	cmp	r3, #5
 80054e4:	dc18      	bgt.n	8005518 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054e6:	f7ff fd69 	bl	8004fbc <xTaskGetSchedulerState>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d109      	bne.n	8005504 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054f0:	4b10      	ldr	r3, [pc, #64]	@ (8005534 <xTimerGenericCommand+0x98>)
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	f107 0114 	add.w	r1, r7, #20
 80054f8:	2300      	movs	r3, #0
 80054fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054fc:	f7fe f9b0 	bl	8003860 <xQueueGenericSend>
 8005500:	6278      	str	r0, [r7, #36]	@ 0x24
 8005502:	e012      	b.n	800552a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005504:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <xTimerGenericCommand+0x98>)
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	f107 0114 	add.w	r1, r7, #20
 800550c:	2300      	movs	r3, #0
 800550e:	2200      	movs	r2, #0
 8005510:	f7fe f9a6 	bl	8003860 <xQueueGenericSend>
 8005514:	6278      	str	r0, [r7, #36]	@ 0x24
 8005516:	e008      	b.n	800552a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005518:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <xTimerGenericCommand+0x98>)
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	f107 0114 	add.w	r1, r7, #20
 8005520:	2300      	movs	r3, #0
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	f7fe fa9e 	bl	8003a64 <xQueueGenericSendFromISR>
 8005528:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800552c:	4618      	mov	r0, r3
 800552e:	3728      	adds	r7, #40	@ 0x28
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000d18 	.word	0x20000d18

08005538 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af02      	add	r7, sp, #8
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005542:	4b23      	ldr	r3, [pc, #140]	@ (80055d0 <prvProcessExpiredTimer+0x98>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	3304      	adds	r3, #4
 8005550:	4618      	mov	r0, r3
 8005552:	f7fd ffe6 	bl	8003522 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d023      	beq.n	80055ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	699a      	ldr	r2, [r3, #24]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	18d1      	adds	r1, r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	6978      	ldr	r0, [r7, #20]
 8005572:	f000 f8d5 	bl	8005720 <prvInsertTimerInActiveList>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d020      	beq.n	80055be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800557c:	2300      	movs	r3, #0
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	2300      	movs	r3, #0
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	2100      	movs	r1, #0
 8005586:	6978      	ldr	r0, [r7, #20]
 8005588:	f7ff ff88 	bl	800549c <xTimerGenericCommand>
 800558c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d114      	bne.n	80055be <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	60fb      	str	r3, [r7, #12]
}
 80055a6:	bf00      	nop
 80055a8:	bf00      	nop
 80055aa:	e7fd      	b.n	80055a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	6978      	ldr	r0, [r7, #20]
 80055c4:	4798      	blx	r3
}
 80055c6:	bf00      	nop
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000d10 	.word	0x20000d10

080055d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055dc:	f107 0308 	add.w	r3, r7, #8
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 f859 	bl	8005698 <prvGetNextExpireTime>
 80055e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4619      	mov	r1, r3
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 f805 	bl	80055fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80055f2:	f000 f8d7 	bl	80057a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055f6:	bf00      	nop
 80055f8:	e7f0      	b.n	80055dc <prvTimerTask+0x8>
	...

080055fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005606:	f7ff f8e7 	bl	80047d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800560a:	f107 0308 	add.w	r3, r7, #8
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f866 	bl	80056e0 <prvSampleTimeNow>
 8005614:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d130      	bne.n	800567e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10a      	bne.n	8005638 <prvProcessTimerOrBlockTask+0x3c>
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	429a      	cmp	r2, r3
 8005628:	d806      	bhi.n	8005638 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800562a:	f7ff f8e3 	bl	80047f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800562e:	68f9      	ldr	r1, [r7, #12]
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff ff81 	bl	8005538 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005636:	e024      	b.n	8005682 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800563e:	4b13      	ldr	r3, [pc, #76]	@ (800568c <prvProcessTimerOrBlockTask+0x90>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <prvProcessTimerOrBlockTask+0x50>
 8005648:	2301      	movs	r3, #1
 800564a:	e000      	b.n	800564e <prvProcessTimerOrBlockTask+0x52>
 800564c:	2300      	movs	r3, #0
 800564e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005650:	4b0f      	ldr	r3, [pc, #60]	@ (8005690 <prvProcessTimerOrBlockTask+0x94>)
 8005652:	6818      	ldr	r0, [r3, #0]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	4619      	mov	r1, r3
 800565e:	f7fe fe31 	bl	80042c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005662:	f7ff f8c7 	bl	80047f4 <xTaskResumeAll>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10a      	bne.n	8005682 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800566c:	4b09      	ldr	r3, [pc, #36]	@ (8005694 <prvProcessTimerOrBlockTask+0x98>)
 800566e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	f3bf 8f6f 	isb	sy
}
 800567c:	e001      	b.n	8005682 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800567e:	f7ff f8b9 	bl	80047f4 <xTaskResumeAll>
}
 8005682:	bf00      	nop
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000d14 	.word	0x20000d14
 8005690:	20000d18 	.word	0x20000d18
 8005694:	e000ed04 	.word	0xe000ed04

08005698 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80056a0:	4b0e      	ldr	r3, [pc, #56]	@ (80056dc <prvGetNextExpireTime+0x44>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <prvGetNextExpireTime+0x16>
 80056aa:	2201      	movs	r2, #1
 80056ac:	e000      	b.n	80056b0 <prvGetNextExpireTime+0x18>
 80056ae:	2200      	movs	r2, #0
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d105      	bne.n	80056c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056bc:	4b07      	ldr	r3, [pc, #28]	@ (80056dc <prvGetNextExpireTime+0x44>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	e001      	b.n	80056cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80056cc:	68fb      	ldr	r3, [r7, #12]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	20000d10 	.word	0x20000d10

080056e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80056e8:	f7ff f922 	bl	8004930 <xTaskGetTickCount>
 80056ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80056ee:	4b0b      	ldr	r3, [pc, #44]	@ (800571c <prvSampleTimeNow+0x3c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d205      	bcs.n	8005704 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80056f8:	f000 f91e 	bl	8005938 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	e002      	b.n	800570a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800570a:	4a04      	ldr	r2, [pc, #16]	@ (800571c <prvSampleTimeNow+0x3c>)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005710:	68fb      	ldr	r3, [r7, #12]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000d20 	.word	0x20000d20

08005720 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	429a      	cmp	r2, r3
 8005744:	d812      	bhi.n	800576c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	1ad2      	subs	r2, r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	429a      	cmp	r2, r3
 8005752:	d302      	bcc.n	800575a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005754:	2301      	movs	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	e01b      	b.n	8005792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800575a:	4b10      	ldr	r3, [pc, #64]	@ (800579c <prvInsertTimerInActiveList+0x7c>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3304      	adds	r3, #4
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f7fd fea3 	bl	80034b0 <vListInsert>
 800576a:	e012      	b.n	8005792 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d206      	bcs.n	8005782 <prvInsertTimerInActiveList+0x62>
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d302      	bcc.n	8005782 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800577c:	2301      	movs	r3, #1
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	e007      	b.n	8005792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005782:	4b07      	ldr	r3, [pc, #28]	@ (80057a0 <prvInsertTimerInActiveList+0x80>)
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3304      	adds	r3, #4
 800578a:	4619      	mov	r1, r3
 800578c:	4610      	mov	r0, r2
 800578e:	f7fd fe8f 	bl	80034b0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005792:	697b      	ldr	r3, [r7, #20]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	20000d14 	.word	0x20000d14
 80057a0:	20000d10 	.word	0x20000d10

080057a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08c      	sub	sp, #48	@ 0x30
 80057a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057aa:	e0b2      	b.n	8005912 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f2c0 80af 	blt.w	8005912 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80057b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d004      	beq.n	80057ca <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c2:	3304      	adds	r3, #4
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fd feac 	bl	8003522 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057ca:	1d3b      	adds	r3, r7, #4
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff ff87 	bl	80056e0 <prvSampleTimeNow>
 80057d2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b09      	cmp	r3, #9
 80057d8:	f200 8098 	bhi.w	800590c <prvProcessReceivedCommands+0x168>
 80057dc:	a201      	add	r2, pc, #4	@ (adr r2, 80057e4 <prvProcessReceivedCommands+0x40>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	0800580d 	.word	0x0800580d
 80057e8:	0800580d 	.word	0x0800580d
 80057ec:	0800580d 	.word	0x0800580d
 80057f0:	08005883 	.word	0x08005883
 80057f4:	08005897 	.word	0x08005897
 80057f8:	080058e3 	.word	0x080058e3
 80057fc:	0800580d 	.word	0x0800580d
 8005800:	0800580d 	.word	0x0800580d
 8005804:	08005883 	.word	0x08005883
 8005808:	08005897 	.word	0x08005897
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	b2da      	uxtb	r2, r3
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	18d1      	adds	r1, r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a3a      	ldr	r2, [r7, #32]
 800582a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800582c:	f7ff ff78 	bl	8005720 <prvInsertTimerInActiveList>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d06c      	beq.n	8005910 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800583c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d061      	beq.n	8005910 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	441a      	add	r2, r3
 8005854:	2300      	movs	r3, #0
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	2300      	movs	r3, #0
 800585a:	2100      	movs	r1, #0
 800585c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800585e:	f7ff fe1d 	bl	800549c <xTimerGenericCommand>
 8005862:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d152      	bne.n	8005910 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	61bb      	str	r3, [r7, #24]
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	e7fd      	b.n	800587e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005888:	f023 0301 	bic.w	r3, r3, #1
 800588c:	b2da      	uxtb	r2, r3
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8005894:	e03d      	b.n	8005912 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005898:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800589c:	f043 0301 	orr.w	r3, r3, #1
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10b      	bne.n	80058ce <prvProcessReceivedCommands+0x12a>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	617b      	str	r3, [r7, #20]
}
 80058c8:	bf00      	nop
 80058ca:	bf00      	nop
 80058cc:	e7fd      	b.n	80058ca <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	18d1      	adds	r1, r2, r3
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	6a3a      	ldr	r2, [r7, #32]
 80058da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058dc:	f7ff ff20 	bl	8005720 <prvInsertTimerInActiveList>
					break;
 80058e0:	e017      	b.n	8005912 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d103      	bne.n	80058f8 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 80058f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058f2:	f000 fbe9 	bl	80060c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058f6:	e00c      	b.n	8005912 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	b2da      	uxtb	r2, r3
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800590a:	e002      	b.n	8005912 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800590c:	bf00      	nop
 800590e:	e000      	b.n	8005912 <prvProcessReceivedCommands+0x16e>
					break;
 8005910:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005912:	4b08      	ldr	r3, [pc, #32]	@ (8005934 <prvProcessReceivedCommands+0x190>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f107 0108 	add.w	r1, r7, #8
 800591a:	2200      	movs	r2, #0
 800591c:	4618      	mov	r0, r3
 800591e:	f7fe f93f 	bl	8003ba0 <xQueueReceive>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	f47f af41 	bne.w	80057ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800592a:	bf00      	nop
 800592c:	bf00      	nop
 800592e:	3728      	adds	r7, #40	@ 0x28
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000d18 	.word	0x20000d18

08005938 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800593e:	e049      	b.n	80059d4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005940:	4b2e      	ldr	r3, [pc, #184]	@ (80059fc <prvSwitchTimerLists+0xc4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800594a:	4b2c      	ldr	r3, [pc, #176]	@ (80059fc <prvSwitchTimerLists+0xc4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3304      	adds	r3, #4
 8005958:	4618      	mov	r0, r3
 800595a:	f7fd fde2 	bl	8003522 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d02f      	beq.n	80059d4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4413      	add	r3, r2
 800597c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	429a      	cmp	r2, r3
 8005984:	d90e      	bls.n	80059a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005992:	4b1a      	ldr	r3, [pc, #104]	@ (80059fc <prvSwitchTimerLists+0xc4>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3304      	adds	r3, #4
 800599a:	4619      	mov	r1, r3
 800599c:	4610      	mov	r0, r2
 800599e:	f7fd fd87 	bl	80034b0 <vListInsert>
 80059a2:	e017      	b.n	80059d4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059a4:	2300      	movs	r3, #0
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	2300      	movs	r3, #0
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	2100      	movs	r1, #0
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7ff fd74 	bl	800549c <xTimerGenericCommand>
 80059b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10b      	bne.n	80059d4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	603b      	str	r3, [r7, #0]
}
 80059ce:	bf00      	nop
 80059d0:	bf00      	nop
 80059d2:	e7fd      	b.n	80059d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059d4:	4b09      	ldr	r3, [pc, #36]	@ (80059fc <prvSwitchTimerLists+0xc4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1b0      	bne.n	8005940 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80059de:	4b07      	ldr	r3, [pc, #28]	@ (80059fc <prvSwitchTimerLists+0xc4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80059e4:	4b06      	ldr	r3, [pc, #24]	@ (8005a00 <prvSwitchTimerLists+0xc8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a04      	ldr	r2, [pc, #16]	@ (80059fc <prvSwitchTimerLists+0xc4>)
 80059ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80059ec:	4a04      	ldr	r2, [pc, #16]	@ (8005a00 <prvSwitchTimerLists+0xc8>)
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	6013      	str	r3, [r2, #0]
}
 80059f2:	bf00      	nop
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000d10 	.word	0x20000d10
 8005a00:	20000d14 	.word	0x20000d14

08005a04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a0a:	f000 f96d 	bl	8005ce8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a0e:	4b15      	ldr	r3, [pc, #84]	@ (8005a64 <prvCheckForValidListAndQueue+0x60>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d120      	bne.n	8005a58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a16:	4814      	ldr	r0, [pc, #80]	@ (8005a68 <prvCheckForValidListAndQueue+0x64>)
 8005a18:	f7fd fcf9 	bl	800340e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a1c:	4813      	ldr	r0, [pc, #76]	@ (8005a6c <prvCheckForValidListAndQueue+0x68>)
 8005a1e:	f7fd fcf6 	bl	800340e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a22:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <prvCheckForValidListAndQueue+0x6c>)
 8005a24:	4a10      	ldr	r2, [pc, #64]	@ (8005a68 <prvCheckForValidListAndQueue+0x64>)
 8005a26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a28:	4b12      	ldr	r3, [pc, #72]	@ (8005a74 <prvCheckForValidListAndQueue+0x70>)
 8005a2a:	4a10      	ldr	r2, [pc, #64]	@ (8005a6c <prvCheckForValidListAndQueue+0x68>)
 8005a2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a2e:	2300      	movs	r3, #0
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	4b11      	ldr	r3, [pc, #68]	@ (8005a78 <prvCheckForValidListAndQueue+0x74>)
 8005a34:	4a11      	ldr	r2, [pc, #68]	@ (8005a7c <prvCheckForValidListAndQueue+0x78>)
 8005a36:	210c      	movs	r1, #12
 8005a38:	200a      	movs	r0, #10
 8005a3a:	f7fd fe07 	bl	800364c <xQueueGenericCreateStatic>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4a08      	ldr	r2, [pc, #32]	@ (8005a64 <prvCheckForValidListAndQueue+0x60>)
 8005a42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a44:	4b07      	ldr	r3, [pc, #28]	@ (8005a64 <prvCheckForValidListAndQueue+0x60>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a4c:	4b05      	ldr	r3, [pc, #20]	@ (8005a64 <prvCheckForValidListAndQueue+0x60>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	490b      	ldr	r1, [pc, #44]	@ (8005a80 <prvCheckForValidListAndQueue+0x7c>)
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe fbe2 	bl	800421c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a58:	f000 f978 	bl	8005d4c <vPortExitCritical>
}
 8005a5c:	bf00      	nop
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000d18 	.word	0x20000d18
 8005a68:	20000ce8 	.word	0x20000ce8
 8005a6c:	20000cfc 	.word	0x20000cfc
 8005a70:	20000d10 	.word	0x20000d10
 8005a74:	20000d14 	.word	0x20000d14
 8005a78:	20000d9c 	.word	0x20000d9c
 8005a7c:	20000d24 	.word	0x20000d24
 8005a80:	08007dbc 	.word	0x08007dbc

08005a84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3b04      	subs	r3, #4
 8005a94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3b04      	subs	r3, #4
 8005aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f023 0201 	bic.w	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3b04      	subs	r3, #4
 8005ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8005ae8 <pxPortInitialiseStack+0x64>)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3b14      	subs	r3, #20
 8005abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3b04      	subs	r3, #4
 8005aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f06f 0202 	mvn.w	r2, #2
 8005ad2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	3b20      	subs	r3, #32
 8005ad8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ada:	68fb      	ldr	r3, [r7, #12]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	08005aed 	.word	0x08005aed

08005aec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005af6:	4b13      	ldr	r3, [pc, #76]	@ (8005b44 <prvTaskExitError+0x58>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afe:	d00b      	beq.n	8005b18 <prvTaskExitError+0x2c>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	60fb      	str	r3, [r7, #12]
}
 8005b12:	bf00      	nop
 8005b14:	bf00      	nop
 8005b16:	e7fd      	b.n	8005b14 <prvTaskExitError+0x28>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	60bb      	str	r3, [r7, #8]
}
 8005b2a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b2c:	bf00      	nop
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0fc      	beq.n	8005b2e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	2000000c 	.word	0x2000000c
	...

08005b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b50:	4b07      	ldr	r3, [pc, #28]	@ (8005b70 <pxCurrentTCBConst2>)
 8005b52:	6819      	ldr	r1, [r3, #0]
 8005b54:	6808      	ldr	r0, [r1, #0]
 8005b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5a:	f380 8809 	msr	PSP, r0
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f04f 0000 	mov.w	r0, #0
 8005b66:	f380 8811 	msr	BASEPRI, r0
 8005b6a:	4770      	bx	lr
 8005b6c:	f3af 8000 	nop.w

08005b70 <pxCurrentTCBConst2>:
 8005b70:	20000bbc 	.word	0x20000bbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop

08005b78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b78:	4808      	ldr	r0, [pc, #32]	@ (8005b9c <prvPortStartFirstTask+0x24>)
 8005b7a:	6800      	ldr	r0, [r0, #0]
 8005b7c:	6800      	ldr	r0, [r0, #0]
 8005b7e:	f380 8808 	msr	MSP, r0
 8005b82:	f04f 0000 	mov.w	r0, #0
 8005b86:	f380 8814 	msr	CONTROL, r0
 8005b8a:	b662      	cpsie	i
 8005b8c:	b661      	cpsie	f
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	df00      	svc	0
 8005b98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b9a:	bf00      	nop
 8005b9c:	e000ed08 	.word	0xe000ed08

08005ba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ba6:	4b47      	ldr	r3, [pc, #284]	@ (8005cc4 <xPortStartScheduler+0x124>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a47      	ldr	r2, [pc, #284]	@ (8005cc8 <xPortStartScheduler+0x128>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d10b      	bne.n	8005bc8 <xPortStartScheduler+0x28>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	613b      	str	r3, [r7, #16]
}
 8005bc2:	bf00      	nop
 8005bc4:	bf00      	nop
 8005bc6:	e7fd      	b.n	8005bc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8005cc4 <xPortStartScheduler+0x124>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a3f      	ldr	r2, [pc, #252]	@ (8005ccc <xPortStartScheduler+0x12c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d10b      	bne.n	8005bea <xPortStartScheduler+0x4a>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	60fb      	str	r3, [r7, #12]
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	e7fd      	b.n	8005be6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bea:	4b39      	ldr	r3, [pc, #228]	@ (8005cd0 <xPortStartScheduler+0x130>)
 8005bec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	22ff      	movs	r2, #255	@ 0xff
 8005bfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	4b31      	ldr	r3, [pc, #196]	@ (8005cd4 <xPortStartScheduler+0x134>)
 8005c10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c12:	4b31      	ldr	r3, [pc, #196]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c14:	2207      	movs	r2, #7
 8005c16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c18:	e009      	b.n	8005c2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	4a2d      	ldr	r2, [pc, #180]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c36:	2b80      	cmp	r3, #128	@ 0x80
 8005c38:	d0ef      	beq.n	8005c1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c3a:	4b27      	ldr	r3, [pc, #156]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f1c3 0307 	rsb	r3, r3, #7
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d00b      	beq.n	8005c5e <xPortStartScheduler+0xbe>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	60bb      	str	r3, [r7, #8]
}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	e7fd      	b.n	8005c5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c68:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c70:	4a19      	ldr	r2, [pc, #100]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c7c:	4b17      	ldr	r3, [pc, #92]	@ (8005cdc <xPortStartScheduler+0x13c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a16      	ldr	r2, [pc, #88]	@ (8005cdc <xPortStartScheduler+0x13c>)
 8005c82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c88:	4b14      	ldr	r3, [pc, #80]	@ (8005cdc <xPortStartScheduler+0x13c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a13      	ldr	r2, [pc, #76]	@ (8005cdc <xPortStartScheduler+0x13c>)
 8005c8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005c92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c94:	f000 f8da 	bl	8005e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c98:	4b11      	ldr	r3, [pc, #68]	@ (8005ce0 <xPortStartScheduler+0x140>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c9e:	f000 f8f9 	bl	8005e94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ca2:	4b10      	ldr	r3, [pc, #64]	@ (8005ce4 <xPortStartScheduler+0x144>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8005ce4 <xPortStartScheduler+0x144>)
 8005ca8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005cac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005cae:	f7ff ff63 	bl	8005b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cb2:	f7fe ff07 	bl	8004ac4 <vTaskSwitchContext>
	prvTaskExitError();
 8005cb6:	f7ff ff19 	bl	8005aec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	e000ed00 	.word	0xe000ed00
 8005cc8:	410fc271 	.word	0x410fc271
 8005ccc:	410fc270 	.word	0x410fc270
 8005cd0:	e000e400 	.word	0xe000e400
 8005cd4:	20000de4 	.word	0x20000de4
 8005cd8:	20000de8 	.word	0x20000de8
 8005cdc:	e000ed20 	.word	0xe000ed20
 8005ce0:	2000000c 	.word	0x2000000c
 8005ce4:	e000ef34 	.word	0xe000ef34

08005ce8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	607b      	str	r3, [r7, #4]
}
 8005d00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d02:	4b10      	ldr	r3, [pc, #64]	@ (8005d44 <vPortEnterCritical+0x5c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3301      	adds	r3, #1
 8005d08:	4a0e      	ldr	r2, [pc, #56]	@ (8005d44 <vPortEnterCritical+0x5c>)
 8005d0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d44 <vPortEnterCritical+0x5c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d110      	bne.n	8005d36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d14:	4b0c      	ldr	r3, [pc, #48]	@ (8005d48 <vPortEnterCritical+0x60>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <vPortEnterCritical+0x4e>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	603b      	str	r3, [r7, #0]
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	e7fd      	b.n	8005d32 <vPortEnterCritical+0x4a>
	}
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	2000000c 	.word	0x2000000c
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d52:	4b12      	ldr	r3, [pc, #72]	@ (8005d9c <vPortExitCritical+0x50>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10b      	bne.n	8005d72 <vPortExitCritical+0x26>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	607b      	str	r3, [r7, #4]
}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	e7fd      	b.n	8005d6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d72:	4b0a      	ldr	r3, [pc, #40]	@ (8005d9c <vPortExitCritical+0x50>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	4a08      	ldr	r2, [pc, #32]	@ (8005d9c <vPortExitCritical+0x50>)
 8005d7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d7c:	4b07      	ldr	r3, [pc, #28]	@ (8005d9c <vPortExitCritical+0x50>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <vPortExitCritical+0x44>
 8005d84:	2300      	movs	r3, #0
 8005d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f383 8811 	msr	BASEPRI, r3
}
 8005d8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	2000000c 	.word	0x2000000c

08005da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005da0:	f3ef 8009 	mrs	r0, PSP
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	4b15      	ldr	r3, [pc, #84]	@ (8005e00 <pxCurrentTCBConst>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	f01e 0f10 	tst.w	lr, #16
 8005db0:	bf08      	it	eq
 8005db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dba:	6010      	str	r0, [r2, #0]
 8005dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005dc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005dc4:	f380 8811 	msr	BASEPRI, r0
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f7fe fe78 	bl	8004ac4 <vTaskSwitchContext>
 8005dd4:	f04f 0000 	mov.w	r0, #0
 8005dd8:	f380 8811 	msr	BASEPRI, r0
 8005ddc:	bc09      	pop	{r0, r3}
 8005dde:	6819      	ldr	r1, [r3, #0]
 8005de0:	6808      	ldr	r0, [r1, #0]
 8005de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de6:	f01e 0f10 	tst.w	lr, #16
 8005dea:	bf08      	it	eq
 8005dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005df0:	f380 8809 	msr	PSP, r0
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	f3af 8000 	nop.w

08005e00 <pxCurrentTCBConst>:
 8005e00:	20000bbc 	.word	0x20000bbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop

08005e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	607b      	str	r3, [r7, #4]
}
 8005e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e22:	f7fe fd95 	bl	8004950 <xTaskIncrementTick>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e2c:	4b06      	ldr	r3, [pc, #24]	@ (8005e48 <SysTick_Handler+0x40>)
 8005e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	2300      	movs	r3, #0
 8005e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	f383 8811 	msr	BASEPRI, r3
}
 8005e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e50:	4b0b      	ldr	r3, [pc, #44]	@ (8005e80 <vPortSetupTimerInterrupt+0x34>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e56:	4b0b      	ldr	r3, [pc, #44]	@ (8005e84 <vPortSetupTimerInterrupt+0x38>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e88 <vPortSetupTimerInterrupt+0x3c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a0a      	ldr	r2, [pc, #40]	@ (8005e8c <vPortSetupTimerInterrupt+0x40>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	099b      	lsrs	r3, r3, #6
 8005e68:	4a09      	ldr	r2, [pc, #36]	@ (8005e90 <vPortSetupTimerInterrupt+0x44>)
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e6e:	4b04      	ldr	r3, [pc, #16]	@ (8005e80 <vPortSetupTimerInterrupt+0x34>)
 8005e70:	2207      	movs	r2, #7
 8005e72:	601a      	str	r2, [r3, #0]
}
 8005e74:	bf00      	nop
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	e000e010 	.word	0xe000e010
 8005e84:	e000e018 	.word	0xe000e018
 8005e88:	20000000 	.word	0x20000000
 8005e8c:	10624dd3 	.word	0x10624dd3
 8005e90:	e000e014 	.word	0xe000e014

08005e94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005ea4 <vPortEnableVFP+0x10>
 8005e98:	6801      	ldr	r1, [r0, #0]
 8005e9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005e9e:	6001      	str	r1, [r0, #0]
 8005ea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ea2:	bf00      	nop
 8005ea4:	e000ed88 	.word	0xe000ed88

08005ea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005eae:	f3ef 8305 	mrs	r3, IPSR
 8005eb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b0f      	cmp	r3, #15
 8005eb8:	d915      	bls.n	8005ee6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005eba:	4a18      	ldr	r2, [pc, #96]	@ (8005f1c <vPortValidateInterruptPriority+0x74>)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ec4:	4b16      	ldr	r3, [pc, #88]	@ (8005f20 <vPortValidateInterruptPriority+0x78>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	7afa      	ldrb	r2, [r7, #11]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d20b      	bcs.n	8005ee6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	607b      	str	r3, [r7, #4]
}
 8005ee0:	bf00      	nop
 8005ee2:	bf00      	nop
 8005ee4:	e7fd      	b.n	8005ee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f24 <vPortValidateInterruptPriority+0x7c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005eee:	4b0e      	ldr	r3, [pc, #56]	@ (8005f28 <vPortValidateInterruptPriority+0x80>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d90b      	bls.n	8005f0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	603b      	str	r3, [r7, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	bf00      	nop
 8005f0c:	e7fd      	b.n	8005f0a <vPortValidateInterruptPriority+0x62>
	}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	e000e3f0 	.word	0xe000e3f0
 8005f20:	20000de4 	.word	0x20000de4
 8005f24:	e000ed0c 	.word	0xe000ed0c
 8005f28:	20000de8 	.word	0x20000de8

08005f2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	@ 0x28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f38:	f7fe fc4e 	bl	80047d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80060b0 <pvPortMalloc+0x184>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f44:	f000 f93c 	bl	80061c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f48:	4b5a      	ldr	r3, [pc, #360]	@ (80060b4 <pvPortMalloc+0x188>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f040 8095 	bne.w	8006080 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01e      	beq.n	8005f9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005f5c:	2208      	movs	r2, #8
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4413      	add	r3, r2
 8005f62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d015      	beq.n	8005f9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f023 0307 	bic.w	r3, r3, #7
 8005f74:	3308      	adds	r3, #8
 8005f76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <pvPortMalloc+0x6e>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	617b      	str	r3, [r7, #20]
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	e7fd      	b.n	8005f96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d06f      	beq.n	8006080 <pvPortMalloc+0x154>
 8005fa0:	4b45      	ldr	r3, [pc, #276]	@ (80060b8 <pvPortMalloc+0x18c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d86a      	bhi.n	8006080 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005faa:	4b44      	ldr	r3, [pc, #272]	@ (80060bc <pvPortMalloc+0x190>)
 8005fac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fae:	4b43      	ldr	r3, [pc, #268]	@ (80060bc <pvPortMalloc+0x190>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fb4:	e004      	b.n	8005fc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d903      	bls.n	8005fd2 <pvPortMalloc+0xa6>
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f1      	bne.n	8005fb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fd2:	4b37      	ldr	r3, [pc, #220]	@ (80060b0 <pvPortMalloc+0x184>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d051      	beq.n	8006080 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	4413      	add	r3, r2
 8005fe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	1ad2      	subs	r2, r2, r3
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d920      	bls.n	8006040 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4413      	add	r3, r2
 8006004:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00b      	beq.n	8006028 <pvPortMalloc+0xfc>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	613b      	str	r3, [r7, #16]
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	e7fd      	b.n	8006024 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	1ad2      	subs	r2, r2, r3
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800603a:	69b8      	ldr	r0, [r7, #24]
 800603c:	f000 f922 	bl	8006284 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006040:	4b1d      	ldr	r3, [pc, #116]	@ (80060b8 <pvPortMalloc+0x18c>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	4a1b      	ldr	r2, [pc, #108]	@ (80060b8 <pvPortMalloc+0x18c>)
 800604c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800604e:	4b1a      	ldr	r3, [pc, #104]	@ (80060b8 <pvPortMalloc+0x18c>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4b1b      	ldr	r3, [pc, #108]	@ (80060c0 <pvPortMalloc+0x194>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d203      	bcs.n	8006062 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800605a:	4b17      	ldr	r3, [pc, #92]	@ (80060b8 <pvPortMalloc+0x18c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a18      	ldr	r2, [pc, #96]	@ (80060c0 <pvPortMalloc+0x194>)
 8006060:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	4b13      	ldr	r3, [pc, #76]	@ (80060b4 <pvPortMalloc+0x188>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	431a      	orrs	r2, r3
 800606c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006076:	4b13      	ldr	r3, [pc, #76]	@ (80060c4 <pvPortMalloc+0x198>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3301      	adds	r3, #1
 800607c:	4a11      	ldr	r2, [pc, #68]	@ (80060c4 <pvPortMalloc+0x198>)
 800607e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006080:	f7fe fbb8 	bl	80047f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00b      	beq.n	80060a6 <pvPortMalloc+0x17a>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60fb      	str	r3, [r7, #12]
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	e7fd      	b.n	80060a2 <pvPortMalloc+0x176>
	return pvReturn;
 80060a6:	69fb      	ldr	r3, [r7, #28]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3728      	adds	r7, #40	@ 0x28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	2000aa34 	.word	0x2000aa34
 80060b4:	2000aa48 	.word	0x2000aa48
 80060b8:	2000aa38 	.word	0x2000aa38
 80060bc:	2000aa2c 	.word	0x2000aa2c
 80060c0:	2000aa3c 	.word	0x2000aa3c
 80060c4:	2000aa40 	.word	0x2000aa40

080060c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d04f      	beq.n	800617a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060da:	2308      	movs	r3, #8
 80060dc:	425b      	negs	r3, r3
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4413      	add	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	4b25      	ldr	r3, [pc, #148]	@ (8006184 <vPortFree+0xbc>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4013      	ands	r3, r2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <vPortFree+0x46>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	60fb      	str	r3, [r7, #12]
}
 8006108:	bf00      	nop
 800610a:	bf00      	nop
 800610c:	e7fd      	b.n	800610a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00b      	beq.n	800612e <vPortFree+0x66>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	60bb      	str	r3, [r7, #8]
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	e7fd      	b.n	800612a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	4b14      	ldr	r3, [pc, #80]	@ (8006184 <vPortFree+0xbc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4013      	ands	r3, r2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01e      	beq.n	800617a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d11a      	bne.n	800617a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	4b0e      	ldr	r3, [pc, #56]	@ (8006184 <vPortFree+0xbc>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	43db      	mvns	r3, r3
 800614e:	401a      	ands	r2, r3
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006154:	f7fe fb40 	bl	80047d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	4b0a      	ldr	r3, [pc, #40]	@ (8006188 <vPortFree+0xc0>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4413      	add	r3, r2
 8006162:	4a09      	ldr	r2, [pc, #36]	@ (8006188 <vPortFree+0xc0>)
 8006164:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006166:	6938      	ldr	r0, [r7, #16]
 8006168:	f000 f88c 	bl	8006284 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800616c:	4b07      	ldr	r3, [pc, #28]	@ (800618c <vPortFree+0xc4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3301      	adds	r3, #1
 8006172:	4a06      	ldr	r2, [pc, #24]	@ (800618c <vPortFree+0xc4>)
 8006174:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006176:	f7fe fb3d 	bl	80047f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800617a:	bf00      	nop
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	2000aa48 	.word	0x2000aa48
 8006188:	2000aa38 	.word	0x2000aa38
 800618c:	2000aa44 	.word	0x2000aa44

08006190 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8006194:	4b03      	ldr	r3, [pc, #12]	@ (80061a4 <xPortGetFreeHeapSize+0x14>)
 8006196:	681b      	ldr	r3, [r3, #0]
}
 8006198:	4618      	mov	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	2000aa38 	.word	0x2000aa38

080061a8 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 80061ac:	4b03      	ldr	r3, [pc, #12]	@ (80061bc <xPortGetMinimumEverFreeHeapSize+0x14>)
 80061ae:	681b      	ldr	r3, [r3, #0]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	2000aa3c 	.word	0x2000aa3c

080061c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061c6:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80061ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061cc:	4b27      	ldr	r3, [pc, #156]	@ (800626c <prvHeapInit+0xac>)
 80061ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f003 0307 	and.w	r3, r3, #7
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00c      	beq.n	80061f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3307      	adds	r3, #7
 80061de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0307 	bic.w	r3, r3, #7
 80061e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	4a1f      	ldr	r2, [pc, #124]	@ (800626c <prvHeapInit+0xac>)
 80061f0:	4413      	add	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006270 <prvHeapInit+0xb0>)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006270 <prvHeapInit+0xb0>)
 8006200:	2200      	movs	r2, #0
 8006202:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	4413      	add	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800620c:	2208      	movs	r2, #8
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1a9b      	subs	r3, r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0307 	bic.w	r3, r3, #7
 800621a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4a15      	ldr	r2, [pc, #84]	@ (8006274 <prvHeapInit+0xb4>)
 8006220:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006222:	4b14      	ldr	r3, [pc, #80]	@ (8006274 <prvHeapInit+0xb4>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2200      	movs	r2, #0
 8006228:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800622a:	4b12      	ldr	r3, [pc, #72]	@ (8006274 <prvHeapInit+0xb4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	1ad2      	subs	r2, r2, r3
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006240:	4b0c      	ldr	r3, [pc, #48]	@ (8006274 <prvHeapInit+0xb4>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4a0a      	ldr	r2, [pc, #40]	@ (8006278 <prvHeapInit+0xb8>)
 800624e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	4a09      	ldr	r2, [pc, #36]	@ (800627c <prvHeapInit+0xbc>)
 8006256:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006258:	4b09      	ldr	r3, [pc, #36]	@ (8006280 <prvHeapInit+0xc0>)
 800625a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800625e:	601a      	str	r2, [r3, #0]
}
 8006260:	bf00      	nop
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	20000dec 	.word	0x20000dec
 8006270:	2000aa2c 	.word	0x2000aa2c
 8006274:	2000aa34 	.word	0x2000aa34
 8006278:	2000aa3c 	.word	0x2000aa3c
 800627c:	2000aa38 	.word	0x2000aa38
 8006280:	2000aa48 	.word	0x2000aa48

08006284 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800628c:	4b28      	ldr	r3, [pc, #160]	@ (8006330 <prvInsertBlockIntoFreeList+0xac>)
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	e002      	b.n	8006298 <prvInsertBlockIntoFreeList+0x14>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d8f7      	bhi.n	8006292 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	4413      	add	r3, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d108      	bne.n	80062c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	441a      	add	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	441a      	add	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d118      	bne.n	800630c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	4b15      	ldr	r3, [pc, #84]	@ (8006334 <prvInsertBlockIntoFreeList+0xb0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d00d      	beq.n	8006302 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	441a      	add	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	e008      	b.n	8006314 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006302:	4b0c      	ldr	r3, [pc, #48]	@ (8006334 <prvInsertBlockIntoFreeList+0xb0>)
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	e003      	b.n	8006314 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	429a      	cmp	r2, r3
 800631a:	d002      	beq.n	8006322 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	2000aa2c 	.word	0x2000aa2c
 8006334:	2000aa34 	.word	0x2000aa34

08006338 <_ZN9DebugTask7RunTaskEPv>:

  // Interrupt receive callback
  void InterruptRxData(uint8_t errors);

 protected:
  static void RunTask(void* pvParams) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
    DebugTask::Inst().Run(pvParams);
 8006340:	f7fa f806 	bl	8000350 <_ZN9DebugTask4InstEv>
 8006344:	4603      	mov	r3, r0
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4618      	mov	r0, r3
 800634a:	f000 f869 	bl	8006420 <_ZN9DebugTask3RunEPv>
  }  // Static Task Interface, passes control to the instance Run();
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <_ZN9DebugTaskC1Ev>:

/* Functions -----------------------------------------------------------------*/
/**
 * @brief Constructor, sets all member variables
 */
DebugTask::DebugTask()
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
    : Task(TASK_DEBUG_QUEUE_DEPTH_OBJS), kUart_(UART::Debug) {
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	210a      	movs	r1, #10
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fba9 	bl	8006abc <_ZN4TaskC1Et>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	330c      	adds	r3, #12
 800636e:	4618      	mov	r0, r3
 8006370:	f7fa f890 	bl	8000494 <_ZN16UARTReceiverBaseC1Ev>
 8006374:	4a0e      	ldr	r2, [pc, #56]	@ (80063b0 <_ZN9DebugTaskC1Ev+0x58>)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	4a0e      	ldr	r2, [pc, #56]	@ (80063b4 <_ZN9DebugTaskC1Ev+0x5c>)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60da      	str	r2, [r3, #12]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a0d      	ldr	r2, [pc, #52]	@ (80063b8 <_ZN9DebugTaskC1Ev+0x60>)
 8006384:	625a      	str	r2, [r3, #36]	@ 0x24
  memset(debugBuffer, 0, sizeof(debugBuffer));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3310      	adds	r3, #16
 800638a:	2211      	movs	r2, #17
 800638c:	2100      	movs	r1, #0
 800638e:	4618      	mov	r0, r3
 8006390:	f000 ffd0 	bl	8007334 <memset>
  debugMsgIdx = 0;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  isDebugMsgReady = false;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4618      	mov	r0, r3
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	08008290 	.word	0x08008290
 80063b4:	080082a0 	.word	0x080082a0
 80063b8:	200000b8 	.word	0x200000b8

080063bc <_ZN9DebugTask8InitTaskEv>:

/**
 * @brief Init task for RTOS
 */
void DebugTask::InitTask() {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	6078      	str	r0, [r7, #4]
  // Make sure the task is not already initialized
  SOAR_ASSERT(rtTaskHandle == nullptr, "Cannot initialize Debug task twice");
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <_ZN9DebugTask8InitTaskEv+0x1c>
 80063cc:	4b0f      	ldr	r3, [pc, #60]	@ (800640c <_ZN9DebugTask8InitTaskEv+0x50>)
 80063ce:	222e      	movs	r2, #46	@ 0x2e
 80063d0:	490f      	ldr	r1, [pc, #60]	@ (8006410 <_ZN9DebugTask8InitTaskEv+0x54>)
 80063d2:	2000      	movs	r0, #0
 80063d4:	f000 fc06 	bl	8006be4 <_Z17cube_assert_debugbPKctS0_z>

  // Start the task
  BaseType_t rtValue = xTaskCreate(
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3304      	adds	r3, #4
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	2302      	movs	r3, #2
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063e8:	490a      	ldr	r1, [pc, #40]	@ (8006414 <_ZN9DebugTask8InitTaskEv+0x58>)
 80063ea:	480b      	ldr	r0, [pc, #44]	@ (8006418 <_ZN9DebugTask8InitTaskEv+0x5c>)
 80063ec:	f7fd fffe 	bl	80043ec <xTaskCreate>
 80063f0:	60f8      	str	r0, [r7, #12]
      (TaskFunction_t)DebugTask::RunTask, (const char*)"DebugTask",
      (uint16_t)TASK_DEBUG_STACK_DEPTH_WORDS, (void*)this,
      (UBaseType_t)TASK_DEBUG_PRIORITY, (TaskHandle_t*)&rtTaskHandle);

  // Ensure creation succeded
  SOAR_ASSERT(rtValue == pdPASS, "DebugTask::InitTask - xTaskCreate() failed");
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d005      	beq.n	8006404 <_ZN9DebugTask8InitTaskEv+0x48>
 80063f8:	4b08      	ldr	r3, [pc, #32]	@ (800641c <_ZN9DebugTask8InitTaskEv+0x60>)
 80063fa:	2237      	movs	r2, #55	@ 0x37
 80063fc:	4904      	ldr	r1, [pc, #16]	@ (8006410 <_ZN9DebugTask8InitTaskEv+0x54>)
 80063fe:	2000      	movs	r0, #0
 8006400:	f000 fbf0 	bl	8006be4 <_Z17cube_assert_debugbPKctS0_z>
}
 8006404:	bf00      	nop
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	08007dc4 	.word	0x08007dc4
 8006410:	08007de8 	.word	0x08007de8
 8006414:	08007e04 	.word	0x08007e04
 8006418:	08006339 	.word	0x08006339
 800641c:	08007e10 	.word	0x08007e10

08006420 <_ZN9DebugTask3RunEPv>:

// TODO: Only run thread when appropriate GPIO pin pulled HIGH (or by define)
/**
 *    @brief Runcode for the DebugTask
 */
void DebugTask::Run(void* pvParams) {
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  // Arm the interrupt
  ReceiveData();
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f884 	bl	8006538 <_ZN9DebugTask11ReceiveDataEv>

  while (1) {
    Command cm;
 8006430:	f107 030c 	add.w	r3, r7, #12
 8006434:	4618      	mov	r0, r3
 8006436:	f000 f930 	bl	800669a <_ZN7CommandC1Ev>

    // Wait forever for a command
    qEvtQueue->ReceiveWait(cm);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f107 020c 	add.w	r2, r7, #12
 8006442:	4611      	mov	r1, r2
 8006444:	4618      	mov	r0, r3
 8006446:	f000 fb11 	bl	8006a6c <_ZN5Queue11ReceiveWaitER7Command>

    // Process the command
    if (cm.GetCommand() == DATA_COMMAND &&
 800644a:	f107 030c 	add.w	r3, r7, #12
 800644e:	4618      	mov	r0, r3
 8006450:	f7fa f808 	bl	8000464 <_ZNK7Command10GetCommandEv>
 8006454:	4603      	mov	r3, r0
 8006456:	2b02      	cmp	r3, #2
 8006458:	d109      	bne.n	800646e <_ZN9DebugTask3RunEPv+0x4e>
        cm.GetTaskCommand() == EVENT_DEBUG_RX_COMPLETE) {
 800645a:	f107 030c 	add.w	r3, r7, #12
 800645e:	4618      	mov	r0, r3
 8006460:	f7fa f80c 	bl	800047c <_ZNK7Command14GetTaskCommandEv>
 8006464:	4603      	mov	r3, r0
    if (cm.GetCommand() == DATA_COMMAND &&
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <_ZN9DebugTask3RunEPv+0x4e>
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <_ZN9DebugTask3RunEPv+0x50>
 800646e:	2300      	movs	r3, #0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <_ZN9DebugTask3RunEPv+0x60>
      HandleDebugMessage((const char*)debugBuffer);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3310      	adds	r3, #16
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f806 	bl	800648c <_ZN9DebugTask18HandleDebugMessageEPKc>
    }

    cm.Reset();
 8006480:	f107 030c 	add.w	r3, r7, #12
 8006484:	4618      	mov	r0, r3
 8006486:	f000 f9a1 	bl	80067cc <_ZN7Command5ResetEv>
  }
 800648a:	e7d1      	b.n	8006430 <_ZN9DebugTask3RunEPv+0x10>

0800648c <_ZN9DebugTask18HandleDebugMessageEPKc>:

/**
 * @brief Handles debug messages, assumes msg is null terminated
 * @param msg Message to read, must be null termianted
 */
void DebugTask::HandleDebugMessage(const char* msg) {
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  //-- SYSTEM / CHAR COMMANDS -- (Must be last)
  if (strcmp(msg, "sysreset") == 0) {
 8006496:	491f      	ldr	r1, [pc, #124]	@ (8006514 <_ZN9DebugTask18HandleDebugMessageEPKc+0x88>)
 8006498:	6838      	ldr	r0, [r7, #0]
 800649a:	f7f9 fe99 	bl	80001d0 <strcmp>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d106      	bne.n	80064b2 <_ZN9DebugTask18HandleDebugMessageEPKc+0x26>
    // Reset the system
    SOAR_ASSERT(false, "System reset requested");
 80064a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006518 <_ZN9DebugTask18HandleDebugMessageEPKc+0x8c>)
 80064a6:	225a      	movs	r2, #90	@ 0x5a
 80064a8:	491c      	ldr	r1, [pc, #112]	@ (800651c <_ZN9DebugTask18HandleDebugMessageEPKc+0x90>)
 80064aa:	2000      	movs	r0, #0
 80064ac:	f000 fb9a 	bl	8006be4 <_Z17cube_assert_debugbPKctS0_z>
 80064b0:	e024      	b.n	80064fc <_ZN9DebugTask18HandleDebugMessageEPKc+0x70>
  } else if (strcmp(msg, "sysinfo") == 0) {
 80064b2:	491b      	ldr	r1, [pc, #108]	@ (8006520 <_ZN9DebugTask18HandleDebugMessageEPKc+0x94>)
 80064b4:	6838      	ldr	r0, [r7, #0]
 80064b6:	f7f9 fe8b 	bl	80001d0 <strcmp>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d118      	bne.n	80064f2 <_ZN9DebugTask18HandleDebugMessageEPKc+0x66>
    // Print message
    SOAR_PRINT("\n\n-- CUBE SYSTEM --\n");
 80064c0:	4818      	ldr	r0, [pc, #96]	@ (8006524 <_ZN9DebugTask18HandleDebugMessageEPKc+0x98>)
 80064c2:	f000 fb2d 	bl	8006b20 <_Z10cube_printPKcz>
    SOAR_PRINT("Current System Free Heap: %d Bytes\n", xPortGetFreeHeapSize());
 80064c6:	f7ff fe63 	bl	8006190 <xPortGetFreeHeapSize>
 80064ca:	4603      	mov	r3, r0
 80064cc:	4619      	mov	r1, r3
 80064ce:	4816      	ldr	r0, [pc, #88]	@ (8006528 <_ZN9DebugTask18HandleDebugMessageEPKc+0x9c>)
 80064d0:	f000 fb26 	bl	8006b20 <_Z10cube_printPKcz>
    SOAR_PRINT("Lowest Ever Free Heap: %d Bytes\n",
 80064d4:	f7ff fe68 	bl	80061a8 <xPortGetMinimumEverFreeHeapSize>
 80064d8:	4603      	mov	r3, r0
 80064da:	4619      	mov	r1, r3
 80064dc:	4813      	ldr	r0, [pc, #76]	@ (800652c <_ZN9DebugTask18HandleDebugMessageEPKc+0xa0>)
 80064de:	f000 fb1f 	bl	8006b20 <_Z10cube_printPKcz>
               xPortGetMinimumEverFreeHeapSize());
    SOAR_PRINT("Debug Task Runtime  \t: %d ms\n\n",
 80064e2:	f7fe fa25 	bl	8004930 <xTaskGetTickCount>
 80064e6:	4603      	mov	r3, r0
 80064e8:	4619      	mov	r1, r3
 80064ea:	4811      	ldr	r0, [pc, #68]	@ (8006530 <_ZN9DebugTask18HandleDebugMessageEPKc+0xa4>)
 80064ec:	f000 fb18 	bl	8006b20 <_Z10cube_printPKcz>
 80064f0:	e004      	b.n	80064fc <_ZN9DebugTask18HandleDebugMessageEPKc+0x70>
               TICKS_TO_MS(xTaskGetTickCount()));
  } else {
    // Single character command, or unknown command
    switch (msg[0]) {
      default:
        SOAR_PRINT("Debug, unknown command: %s\n", msg);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	480f      	ldr	r0, [pc, #60]	@ (8006534 <_ZN9DebugTask18HandleDebugMessageEPKc+0xa8>)
 80064f6:	f000 fb13 	bl	8006b20 <_Z10cube_printPKcz>
        break;
 80064fa:	bf00      	nop
    }
  }

  // We've read the data, clear the buffer
  debugMsgIdx = 0;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  isDebugMsgReady = false;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	08007e3c 	.word	0x08007e3c
 8006518:	08007e48 	.word	0x08007e48
 800651c:	08007de8 	.word	0x08007de8
 8006520:	08007e60 	.word	0x08007e60
 8006524:	08007e68 	.word	0x08007e68
 8006528:	08007e80 	.word	0x08007e80
 800652c:	08007ea4 	.word	0x08007ea4
 8006530:	08007ec8 	.word	0x08007ec8
 8006534:	08007ee8 	.word	0x08007ee8

08006538 <_ZN9DebugTask11ReceiveDataEv>:

/**
 * @brief Receive data, currently receives by arming interrupt
 */
bool DebugTask::ReceiveData() { return kUart_->ReceiveIT(&debugRxChar, this); }
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f103 0123 	add.w	r1, r3, #35	@ 0x23
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	330c      	adds	r3, #12
 800654e:	461a      	mov	r2, r3
 8006550:	f000 fdf5 	bl	800713e <_ZN10UARTDriver9ReceiveITEPhP16UARTReceiverBase>
 8006554:	4603      	mov	r3, r0
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <_ZN9DebugTask15InterruptRxDataEh>:

/**
 * @brief Receive data to the buffer
 * @return Whether the debugBuffer is ready or not
 */
void DebugTask::InterruptRxData(uint8_t errors) {
 800655e:	b580      	push	{r7, lr}
 8006560:	b086      	sub	sp, #24
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	70fb      	strb	r3, [r7, #3]
  // If we already have an unprocessed debug message, ignore this byte
  if (!isDebugMsgReady) {
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006570:	f083 0301 	eor.w	r3, r3, #1
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d049      	beq.n	800660e <_ZN9DebugTask15InterruptRxDataEh+0xb0>
    // Check byte for end of message - note if using termite you must turn on
    // append CR
    if (debugRxChar == '\r' || debugMsgIdx == DEBUG_RX_BUFFER_SZ_BYTES) {
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006580:	2b0d      	cmp	r3, #13
 8006582:	d004      	beq.n	800658e <_ZN9DebugTask15InterruptRxDataEh+0x30>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800658a:	2b10      	cmp	r3, #16
 800658c:	d12d      	bne.n	80065ea <_ZN9DebugTask15InterruptRxDataEh+0x8c>
      // Null terminate and process
      debugBuffer[debugMsgIdx++] = '\0';
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	b2d1      	uxtb	r1, r2
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	f882 1021 	strb.w	r1, [r2, #33]	@ 0x21
 800659e:	461a      	mov	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4413      	add	r3, r2
 80065a4:	2200      	movs	r2, #0
 80065a6:	741a      	strb	r2, [r3, #16]
      isDebugMsgReady = true;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

      // Notify the debug task
      Command cm(DATA_COMMAND, EVENT_DEBUG_RX_COMPLETE);
 80065b0:	f107 0308 	add.w	r3, r7, #8
 80065b4:	2201      	movs	r2, #1
 80065b6:	2102      	movs	r1, #2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 f888 	bl	80066ce <_ZN7CommandC1E15GLOBAL_COMMANDSt>
      bool res = qEvtQueue->SendFromISR(cm);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f107 0208 	add.w	r2, r7, #8
 80065c6:	4611      	mov	r1, r2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fa08 	bl	80069de <_ZN5Queue11SendFromISRER7Command>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75fb      	strb	r3, [r7, #23]

      // If we failed to send the event, we should reset the buffer, that way
      // DebugTask doesn't stall
      if (res == false) {
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d119      	bne.n	800660c <_ZN9DebugTask15InterruptRxDataEh+0xae>
        debugMsgIdx = 0;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        isDebugMsgReady = false;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      }
    } else {
 80065e8:	e010      	b.n	800660c <_ZN9DebugTask15InterruptRxDataEh+0xae>
      debugBuffer[debugMsgIdx++] = debugRxChar;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 1023 	ldrb.w	r1, [r3, #35]	@ 0x23
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	b2d0      	uxtb	r0, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	f882 0021 	strb.w	r0, [r2, #33]	@ 0x21
 8006600:	461a      	mov	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4413      	add	r3, r2
 8006606:	460a      	mov	r2, r1
 8006608:	741a      	strb	r2, [r3, #16]
 800660a:	e000      	b.n	800660e <_ZN9DebugTask15InterruptRxDataEh+0xb0>
    } else {
 800660c:	bf00      	nop
    }
  }

  // Re-arm the interrupt
  ReceiveData();
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff ff92 	bl	8006538 <_ZN9DebugTask11ReceiveDataEv>
}
 8006614:	bf00      	nop
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <_ZThn12_N9DebugTask15InterruptRxDataEh>:
  void InterruptRxData(uint8_t errors);
 800661c:	f1a0 000c 	sub.w	r0, r0, #12
 8006620:	f7ff bf9d 	b.w	800655e <_ZN9DebugTask15InterruptRxDataEh>

08006624 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8006628:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 800662a:	4618      	mov	r0, r3
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
    return memory_order(int(__m) & int(__mod));
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4013      	ands	r3, r2
  }
 8006644:	4618      	mov	r0, r3
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <_Z11cube_mallocm>:
/**
 * @brief Malloc inline function, wraps malloc for multi-platform support, asserts successful allocation
 * @param size Size of data to malloc in bytes
 * @return Returns the pointer to the allocated data
*/
inline uint8_t* cube_malloc(uint32_t size) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
#ifdef COMPUTER_ENVIRONMENT
    uint8_t* ret = (uint8_t*)malloc(size);
#else
    uint8_t* ret = (uint8_t*)pvPortMalloc(size);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff fc67 	bl	8005f2c <pvPortMalloc>
 800665e:	60f8      	str	r0, [r7, #12]
#endif
    SOAR_ASSERT(ret, "cube_malloc failed");
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d105      	bne.n	8006672 <_Z11cube_mallocm+0x22>
 8006666:	4b05      	ldr	r3, [pc, #20]	@ (800667c <_Z11cube_mallocm+0x2c>)
 8006668:	2247      	movs	r2, #71	@ 0x47
 800666a:	4905      	ldr	r1, [pc, #20]	@ (8006680 <_Z11cube_mallocm+0x30>)
 800666c:	2000      	movs	r0, #0
 800666e:	f000 fab9 	bl	8006be4 <_Z17cube_assert_debugbPKctS0_z>
    return ret;
 8006672:	68fb      	ldr	r3, [r7, #12]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	08007f58 	.word	0x08007f58
 8006680:	08007f6c 	.word	0x08007f6c

08006684 <_Z9cube_freePv>:

/**
 * @brief Free inline function, wraps free for multi-platform support
 * @param ptr Pointer to the data to free
 */
inline void cube_free(void* ptr) {
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
#ifdef COMPUTER_ENVIRONMENT
    free(ptr);
#else
    vPortFree(ptr);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff fd1b 	bl	80060c8 <vPortFree>
#endif
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <_ZN7CommandC1Ev>:
/* Function Implementation ------------------------------------------------------------------*/

/**
 * @brief Default constructor for Command
*/
Command::Command(void)
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
{
    command = COMMAND_NONE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	701a      	strb	r2, [r3, #0]
    taskCommand = 0;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	805a      	strh	r2, [r3, #2]
    data = nullptr;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	605a      	str	r2, [r3, #4]
    dataSize = 0;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	811a      	strh	r2, [r3, #8]
    bShouldFreeData = false;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	729a      	strb	r2, [r3, #10]
}
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4618      	mov	r0, r3
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <_ZN7CommandC1E15GLOBAL_COMMANDSt>:
/**
 * @brief Constructor with GLOBAL_COMMANDS and taskCommand params
 * @param command GLOBAL_COMMANDS param to initiate command with
 * @param taskCommand taskCommand param to initiate command with
*/
Command::Command(GLOBAL_COMMANDS command, uint16_t taskCommand)
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	460b      	mov	r3, r1
 80066d8:	70fb      	strb	r3, [r7, #3]
 80066da:	4613      	mov	r3, r2
 80066dc:	803b      	strh	r3, [r7, #0]
{
    this->command = command;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	78fa      	ldrb	r2, [r7, #3]
 80066e2:	701a      	strb	r2, [r3, #0]
    this->taskCommand = taskCommand;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	883a      	ldrh	r2, [r7, #0]
 80066e8:	805a      	strh	r2, [r3, #2]
    data = nullptr;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	605a      	str	r2, [r3, #4]
    dataSize = 0;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	811a      	strh	r2, [r3, #8]
    bShouldFreeData = false;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	729a      	strb	r2, [r3, #10]
}
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4618      	mov	r0, r3
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
	...

0800670c <_ZN7Command12AllocateDataEt>:
 * @brief Dynamically allocates memory for the command with the given data size
 * @param dataSize Size of array to allocate
 * @return Pointer to data on success, nullptr on failure (mem already allocated)
*/
uint8_t* Command::AllocateData(uint16_t dataSize)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	807b      	strh	r3, [r7, #2]
    // If we don't have anything allocated, allocate and return success
    if (this->data == nullptr && !bShouldFreeData) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d126      	bne.n	800676e <_ZN7Command12AllocateDataEt+0x62>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	7a9b      	ldrb	r3, [r3, #10]
 8006724:	f083 0301 	eor.w	r3, r3, #1
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01f      	beq.n	800676e <_ZN7Command12AllocateDataEt+0x62>
        this->data = cube_malloc(dataSize);
 800672e:	887b      	ldrh	r3, [r7, #2]
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff ff8d 	bl	8006650 <_Z11cube_mallocm>
 8006736:	4602      	mov	r2, r0
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	605a      	str	r2, [r3, #4]
        this->bShouldFreeData = true;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	729a      	strb	r2, [r3, #10]
        this->dataSize = dataSize;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	887a      	ldrh	r2, [r7, #2]
 8006746:	811a      	strh	r2, [r3, #8]
        statAllocationCounter += 1;
 8006748:	2101      	movs	r1, #1
 800674a:	480b      	ldr	r0, [pc, #44]	@ (8006778 <_ZN7Command12AllocateDataEt+0x6c>)
 800674c:	f000 f872 	bl	8006834 <_ZNSt13__atomic_baseItEpLEt>

        //TODO: May want to print out whenever we have an imbalance in statAllocationCounter by more than ~5 or so.
        SOAR_ASSERT(statAllocationCounter < MAX_NUMBER_OF_COMMAND_ALLOCATIONS);
 8006750:	4809      	ldr	r0, [pc, #36]	@ (8006778 <_ZN7Command12AllocateDataEt+0x6c>)
 8006752:	f000 f889 	bl	8006868 <_ZNKSt13__atomic_baseItEcvtEv>
 8006756:	4603      	mov	r3, r0
 8006758:	2b63      	cmp	r3, #99	@ 0x63
 800675a:	d905      	bls.n	8006768 <_ZN7Command12AllocateDataEt+0x5c>
 800675c:	2300      	movs	r3, #0
 800675e:	2267      	movs	r2, #103	@ 0x67
 8006760:	4906      	ldr	r1, [pc, #24]	@ (800677c <_ZN7Command12AllocateDataEt+0x70>)
 8006762:	2000      	movs	r0, #0
 8006764:	f000 fa3e 	bl	8006be4 <_Z17cube_assert_debugbPKctS0_z>
        return this->data;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	e000      	b.n	8006770 <_ZN7Command12AllocateDataEt+0x64>
    }
    return nullptr;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	2000aa4c 	.word	0x2000aa4c
 800677c:	08007fd4 	.word	0x08007fd4

08006780 <_ZN7Command17CopyDataToCommandEPht>:

/**
 * @brief Copies data from the source array into memory owned by Command and sets the internal data pointer to the new array
 */
bool Command::CopyDataToCommand(uint8_t* dataSrc, uint16_t size)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	4613      	mov	r3, r2
 800678c:	80fb      	strh	r3, [r7, #6]
    // If we successfully allocate, copy the data and return success
    if(this->AllocateData(size)
 800678e:	88fb      	ldrh	r3, [r7, #6]
 8006790:	4619      	mov	r1, r3
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff ffba 	bl	800670c <_ZN7Command12AllocateDataEt>
 8006798:	4603      	mov	r3, r0
        && this->data != nullptr) {
 800679a:	2b00      	cmp	r3, #0
 800679c:	d005      	beq.n	80067aa <_ZN7Command17CopyDataToCommandEPht+0x2a>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <_ZN7Command17CopyDataToCommandEPht+0x2a>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <_ZN7Command17CopyDataToCommandEPht+0x2c>
 80067aa:	2300      	movs	r3, #0
    if(this->AllocateData(size)
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <_ZN7Command17CopyDataToCommandEPht+0x42>
        memcpy(this->data, dataSrc, size);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	88fa      	ldrh	r2, [r7, #6]
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fe45 	bl	8007448 <memcpy>
        return true;
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <_ZN7Command17CopyDataToCommandEPht+0x44>
    }

    return false;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <_ZN7Command5ResetEv>:

/**
 * @brief Resets command, equivalent of a destructor that must be called, counts allocations and deallocations, asserts an error if the allocation count is too high
*/
void Command::Reset()
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
    if(bShouldFreeData && data != nullptr) {
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	7a9b      	ldrb	r3, [r3, #10]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d012      	beq.n	8006802 <_ZN7Command5ResetEv+0x36>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00e      	beq.n	8006802 <_ZN7Command5ResetEv+0x36>
        cube_free(data);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff ff4b 	bl	8006684 <_Z9cube_freePv>
        statAllocationCounter -= 1;
 80067ee:	2101      	movs	r1, #1
 80067f0:	4806      	ldr	r0, [pc, #24]	@ (800680c <_ZN7Command5ResetEv+0x40>)
 80067f2:	f000 f86b 	bl	80068cc <_ZNSt13__atomic_baseItEmIEt>
		data = nullptr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	605a      	str	r2, [r3, #4]
        bShouldFreeData = false;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	729a      	strb	r2, [r3, #10]
    }
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	2000aa4c 	.word	0x2000aa4c

08006810 <_ZNK7Command11GetDataSizeEv>:
/**
 * @brief Getter for Data size
 * @return data size if data is allocated, otherwise returns 0 
*/
uint16_t Command::GetDataSize() const
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
    if (data == nullptr)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <_ZNK7Command11GetDataSizeEv+0x14>
        return 0;
 8006820:	2300      	movs	r3, #0
 8006822:	e001      	b.n	8006828 <_ZNK7Command11GetDataSizeEv+0x18>
    return dataSize;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	891b      	ldrh	r3, [r3, #8]
}
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <_ZNSt13__atomic_baseItEpLEt>:
      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator+=(__int_type __i) noexcept
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	807b      	strh	r3, [r7, #2]
      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	887a      	ldrh	r2, [r7, #2]
 8006844:	f3bf 8f5b 	dmb	ish
 8006848:	e8d3 1f5f 	ldrexh	r1, [r3]
 800684c:	4411      	add	r1, r2
 800684e:	e8c3 1f50 	strexh	r0, r1, [r3]
 8006852:	2800      	cmp	r0, #0
 8006854:	d1f8      	bne.n	8006848 <_ZNSt13__atomic_baseItEpLEt+0x14>
 8006856:	f3bf 8f5b 	dmb	ish
 800685a:	b28b      	uxth	r3, r1
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <_ZNKSt13__atomic_baseItEcvtEv>:
      operator __int_type() const noexcept
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	2305      	movs	r3, #5
 8006876:	613b      	str	r3, [r7, #16]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 8006878:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800687c:	6938      	ldr	r0, [r7, #16]
 800687e:	f7ff fed9 	bl	8006634 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8006882:	60f8      	str	r0, [r7, #12]
	__glibcxx_assert(__b != memory_order_release);
 8006884:	f7ff fece 	bl	8006624 <_ZSt23__is_constant_evaluatedv>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <_ZNKSt13__atomic_baseItEcvtEv+0x30>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b03      	cmp	r3, #3
 8006892:	d101      	bne.n	8006898 <_ZNKSt13__atomic_baseItEcvtEv+0x30>
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <_ZNKSt13__atomic_baseItEcvtEv+0x32>
 8006898:	2300      	movs	r3, #0
 800689a:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 800689c:	f7ff fec2 	bl	8006624 <_ZSt23__is_constant_evaluatedv>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <_ZNKSt13__atomic_baseItEcvtEv+0x48>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d101      	bne.n	80068b0 <_ZNKSt13__atomic_baseItEcvtEv+0x48>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <_ZNKSt13__atomic_baseItEcvtEv+0x4a>
 80068b0:	2300      	movs	r3, #0
 80068b2:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f3bf 8f5b 	dmb	ish
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	f3bf 8f5b 	dmb	ish
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	bf00      	nop
      { return load(); }
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <_ZNSt13__atomic_baseItEmIEt>:
      operator-=(__int_type __i) noexcept
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	807b      	strh	r3, [r7, #2]
      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	887a      	ldrh	r2, [r7, #2]
 80068dc:	f3bf 8f5b 	dmb	ish
 80068e0:	e8d3 1f5f 	ldrexh	r1, [r3]
 80068e4:	eba1 0102 	sub.w	r1, r1, r2
 80068e8:	e8c3 1f50 	strexh	r0, r1, [r3]
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d1f7      	bne.n	80068e0 <_ZNSt13__atomic_baseItEmIEt+0x14>
 80068f0:	f3bf 8f5b 	dmb	ish
 80068f4:	b28b      	uxth	r3, r1
 80068f6:	4618      	mov	r0, r3
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
	...

08006904 <_ZN5MutexC1Ev>:
#include "semphr.h"

/**
 * @brief Constructor for the Mutex class.
 */
Mutex::Mutex()
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
{
    rtSemaphoreHandle = xSemaphoreCreateMutex();
 800690c:	2001      	movs	r0, #1
 800690e:	f7fc ff8e 	bl	800382e <xQueueCreateMutex>
 8006912:	4602      	mov	r2, r0
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	601a      	str	r2, [r3, #0]

    SOAR_ASSERT(rtSemaphoreHandle != NULL, "Semaphore creation failed.");
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d105      	bne.n	800692c <_ZN5MutexC1Ev+0x28>
 8006920:	4b05      	ldr	r3, [pc, #20]	@ (8006938 <_ZN5MutexC1Ev+0x34>)
 8006922:	2215      	movs	r2, #21
 8006924:	4905      	ldr	r1, [pc, #20]	@ (800693c <_ZN5MutexC1Ev+0x38>)
 8006926:	2000      	movs	r0, #0
 8006928:	f000 f95c 	bl	8006be4 <_Z17cube_assert_debugbPKctS0_z>
}
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	08007ff0 	.word	0x08007ff0
 800693c:	0800800c 	.word	0x0800800c

08006940 <_ZN5MutexD1Ev>:


/**
 * @brief Destructor for the Mutex class.
 */
Mutex::~Mutex()
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
{
    vSemaphoreDelete(rtSemaphoreHandle);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4618      	mov	r0, r3
 800694e:	f7fd fb19 	bl	8003f84 <vQueueDelete>
}
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4618      	mov	r0, r3
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <_ZN5Mutex4LockEm>:
 * @brief This function is used to lock the Mutex.
 * @param timeout_ms The time to wait for the Mutex before it fails. If timeout_ms is not provided, the function will wait indefinitely.
 * @return True on success, false on failure.
*/
bool Mutex::Lock(uint32_t timeout_ms)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
    return xSemaphoreTake(rtSemaphoreHandle, MS_TO_TICKS(timeout_ms)) == pdTRUE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	4618      	mov	r0, r3
 800696e:	f7fd f9f9 	bl	8003d64 <xQueueSemaphoreTake>
 8006972:	4603      	mov	r3, r0
 8006974:	2b01      	cmp	r3, #1
 8006976:	bf0c      	ite	eq
 8006978:	2301      	moveq	r3, #1
 800697a:	2300      	movne	r3, #0
 800697c:	b2db      	uxtb	r3, r3
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <_ZN5Mutex6UnlockEv>:
/**
 * @brief This function will attempt to unlock the mutex
 * @return True on success (mutex unlocked) false in failure (mutex was not unlocked)
*/
bool Mutex::Unlock()
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b082      	sub	sp, #8
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
    return xSemaphoreGive(rtSemaphoreHandle) == pdTRUE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	2300      	movs	r3, #0
 8006994:	2200      	movs	r2, #0
 8006996:	2100      	movs	r1, #0
 8006998:	f7fc ff62 	bl	8003860 <xQueueGenericSend>
 800699c:	4603      	mov	r3, r0
 800699e:	2b01      	cmp	r3, #1
 80069a0:	bf0c      	ite	eq
 80069a2:	2301      	moveq	r3, #1
 80069a4:	2300      	movne	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <_ZN5QueueC1Et>:

/**
 * @brief Constructor with depth for the Queue class
 * @param depth Queue depth
*/
Queue::Queue(uint16_t depth)
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	807b      	strh	r3, [r7, #2]
{
    //Initialize RTOS Queue handle with given depth
    rtQueueHandle = xQueueCreate(depth, sizeof(Command));
 80069bc:	887b      	ldrh	r3, [r7, #2]
 80069be:	2200      	movs	r2, #0
 80069c0:	210c      	movs	r1, #12
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fc febf 	bl	8003746 <xQueueGenericCreate>
 80069c8:	4602      	mov	r2, r0
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	601a      	str	r2, [r3, #0]
    queueDepth = depth;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	887a      	ldrh	r2, [r7, #2]
 80069d2:	809a      	strh	r2, [r3, #4]
}
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <_ZN5Queue11SendFromISRER7Command>:
 * @brief Sends a command object to the queue, safe to call from ISR
 * @param command Command object reference to send
 * @return true on success, false on failure (queue full)
*/
bool Queue::SendFromISR(Command& command)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b082      	sub	sp, #8
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
    //Note: There NULL param here could be used to wake a task right after after exiting the ISR
    if (xQueueSendFromISR(rtQueueHandle, &command, NULL) == pdPASS)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6818      	ldr	r0, [r3, #0]
 80069ec:	2300      	movs	r3, #0
 80069ee:	2200      	movs	r2, #0
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	f7fd f837 	bl	8003a64 <xQueueGenericSendFromISR>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	bf0c      	ite	eq
 80069fc:	2301      	moveq	r3, #1
 80069fe:	2300      	movne	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <_ZN5Queue11SendFromISRER7Command+0x2c>
        return true;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e003      	b.n	8006a12 <_ZN5Queue11SendFromISRER7Command+0x34>

    command.Reset();
 8006a0a:	6838      	ldr	r0, [r7, #0]
 8006a0c:	f7ff fede 	bl	80067cc <_ZN7Command5ResetEv>

    return false;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <_ZN5Queue4SendER7Commandb>:
 * 
 * //TODO: It may be possible to have this automatically set the command to not free data externally 
 * as we've "passed" control of the data over, which might let us use a destructor to free the data  
*/
bool Queue::Send(Command& command, bool reportFull)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	71fb      	strb	r3, [r7, #7]
    if (xQueueSend(rtQueueHandle, &command, DEFAULT_QUEUE_SEND_WAIT_TICKS) == pdPASS)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	220f      	movs	r2, #15
 8006a32:	68b9      	ldr	r1, [r7, #8]
 8006a34:	f7fc ff14 	bl	8003860 <xQueueGenericSend>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	bf0c      	ite	eq
 8006a3e:	2301      	moveq	r3, #1
 8006a40:	2300      	movne	r3, #0
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <_ZN5Queue4SendER7Commandb+0x30>
        return true;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e009      	b.n	8006a60 <_ZN5Queue4SendER7Commandb+0x44>

    if (reportFull) SOAR_PRINT("Could not send data to queue!\n");
 8006a4c:	79fb      	ldrb	r3, [r7, #7]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <_ZN5Queue4SendER7Commandb+0x3c>
 8006a52:	4805      	ldr	r0, [pc, #20]	@ (8006a68 <_ZN5Queue4SendER7Commandb+0x4c>)
 8006a54:	f000 f864 	bl	8006b20 <_Z10cube_printPKcz>

    command.Reset();
 8006a58:	68b8      	ldr	r0, [r7, #8]
 8006a5a:	f7ff feb7 	bl	80067cc <_ZN7Command5ResetEv>

    return false;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	08008050 	.word	0x08008050

08006a6c <_ZN5Queue11ReceiveWaitER7Command>:
 * @brief Polls queue with specific timeout, blocks forever
 * @param cm Command object to copy received data into
 * @return TRUE if we received a command, FALSE otherwise (should rarely return false)
*/
bool Queue::ReceiveWait(Command& cm)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
    if (xQueueReceive(rtQueueHandle, &cm, HAL_MAX_DELAY) == pdTRUE) {
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fd f88d 	bl	8003ba0 <xQueueReceive>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	bf0c      	ite	eq
 8006a8c:	2301      	moveq	r3, #1
 8006a8e:	2300      	movne	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <_ZN5Queue11ReceiveWaitER7Command+0x2e>
        return true;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e000      	b.n	8006a9c <_ZN5Queue11ReceiveWaitER7Command+0x30>
    }
    return false;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <_Znwj>:

/* Other ------------------------------------------------------------------*/
// Override the new and delete operator to ensure heap4 is used for dynamic memory allocation
inline void* operator new(size_t size) { return cube_malloc(size); }
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff fdcf 	bl	8006650 <_Z11cube_mallocm>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <_ZN4TaskC1Et>:

/**
 * @brief Constructor with queue depth
 * @param depth Optionally 0, uses the given depth for the event queue
*/
Task::Task(uint16_t depth)
 8006abc:	b590      	push	{r4, r7, lr}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	807b      	strh	r3, [r7, #2]
 8006ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8006b04 <_ZN4TaskC1Et+0x48>)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	601a      	str	r2, [r3, #0]
{
    if (depth == 0)
 8006ace:	887b      	ldrh	r3, [r7, #2]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d103      	bne.n	8006adc <_ZN4TaskC1Et+0x20>
        qEvtQueue = nullptr;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	609a      	str	r2, [r3, #8]
 8006ada:	e00b      	b.n	8006af4 <_ZN4TaskC1Et+0x38>
    else
        qEvtQueue = new Queue(depth);
 8006adc:	2008      	movs	r0, #8
 8006ade:	f7ff ffe1 	bl	8006aa4 <_Znwj>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	461c      	mov	r4, r3
 8006ae6:	887b      	ldrh	r3, [r7, #2]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4620      	mov	r0, r4
 8006aec:	f7ff ff60 	bl	80069b0 <_ZN5QueueC1Et>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	609c      	str	r4, [r3, #8]
    rtTaskHandle = nullptr;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	605a      	str	r2, [r3, #4]
}
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd90      	pop	{r4, r7, pc}
 8006b04:	080082ac 	.word	0x080082ac

08006b08 <_ZNK4Task13GetEventQueueEv>:
    Task(void);
    Task(uint16_t depth);

    virtual void InitTask() = 0;

    Queue* GetEventQueue() const { return qEvtQueue; }
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <_Z10cube_printPKcz>:
* @brief Variadic print function, sends a command packet to the queue
* @param str String to print with printf style formatting
* @param ... Additional arguments to print if assertion fails, in same format as printf
*/
void cube_print(const char* str, ...)
{
 8006b20:	b40f      	push	{r0, r1, r2, r3}
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b0b6      	sub	sp, #216	@ 0xd8
 8006b26:	af00      	add	r7, sp, #0
#ifndef DISABLE_DEBUG
    //Try to take the VA list mutex
    if (Global::vaListMutex.Lock(DEBUG_TAKE_MAX_TIME_MS)) {
 8006b28:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8006b2c:	482a      	ldr	r0, [pc, #168]	@ (8006bd8 <_Z10cube_printPKcz+0xb8>)
 8006b2e:	f7ff ff15 	bl	800695c <_ZN5Mutex4LockEm>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d041      	beq.n	8006bbc <_Z10cube_printPKcz+0x9c>
        // If we have a message, and can use VA list, extract the string into a new buffer, and null terminate it
        uint8_t str_buffer[DEBUG_PRINT_MAX_SIZE] = {};
 8006b38:	2300      	movs	r3, #0
 8006b3a:	607b      	str	r3, [r7, #4]
 8006b3c:	f107 0308 	add.w	r3, r7, #8
 8006b40:	22bc      	movs	r2, #188	@ 0xbc
 8006b42:	2100      	movs	r1, #0
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fbf5 	bl	8007334 <memset>
        va_list argument_list;
        va_start(argument_list, str);
 8006b4a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8006b4e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        int16_t buflen = vsnprintf(reinterpret_cast<char*>(str_buffer), sizeof(str_buffer) - 1, str, argument_list);
 8006b52:	1d38      	adds	r0, r7, #4
 8006b54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006b58:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006b5c:	21bf      	movs	r1, #191	@ 0xbf
 8006b5e:	f000 fbdb 	bl	8007318 <vsniprintf>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
        va_end(argument_list);
        if (buflen > 0) {
 8006b68:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	@ 0xd6
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	dd06      	ble.n	8006b7e <_Z10cube_printPKcz+0x5e>
            str_buffer[buflen] = '\0';
 8006b70:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	@ 0xd6
 8006b74:	33d8      	adds	r3, #216	@ 0xd8
 8006b76:	443b      	add	r3, r7
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f803 2cd4 	strb.w	r2, [r3, #-212]
        }

        // Release the VA List Mutex
        Global::vaListMutex.Unlock();
 8006b7e:	4816      	ldr	r0, [pc, #88]	@ (8006bd8 <_Z10cube_printPKcz+0xb8>)
 8006b80:	f7ff ff01 	bl	8006986 <_ZN5Mutex6UnlockEv>

        //Generate a command
        Command cmd(DATA_COMMAND, (uint16_t)CUBE_TASK_COMMAND_SEND_DEBUG); // Set the UART channel to send data on
 8006b84:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8006b88:	2201      	movs	r2, #1
 8006b8a:	2102      	movs	r1, #2
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff fd9e 	bl	80066ce <_ZN7CommandC1E15GLOBAL_COMMANDSt>

        //Copy data into the command
        cmd.CopyDataToCommand(str_buffer, buflen);
 8006b92:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8006b96:	1d39      	adds	r1, r7, #4
 8006b98:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff fdef 	bl	8006780 <_ZN7Command17CopyDataToCommandEPht>

        //Send this packet off to the UART Task
        CubeTask::Inst().GetEventQueue()->Send(cmd, false);
 8006ba2:	f7f9 fb99 	bl	80002d8 <_ZN8CubeTask4InstEv>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7ff ffad 	bl	8006b08 <_ZNK4Task13GetEventQueueEv>
 8006bae:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	f7ff ff31 	bl	8006a1c <_ZN5Queue4SendER7Commandb>
    {
        // Print out that we could not acquire the VA list mutex
        SOAR_ASSERT(false, "Could not acquire VA_LIST mutex");
    }
#endif
}
 8006bba:	e005      	b.n	8006bc8 <_Z10cube_printPKcz+0xa8>
        SOAR_ASSERT(false, "Could not acquire VA_LIST mutex");
 8006bbc:	4b07      	ldr	r3, [pc, #28]	@ (8006bdc <_Z10cube_printPKcz+0xbc>)
 8006bbe:	2238      	movs	r2, #56	@ 0x38
 8006bc0:	4907      	ldr	r1, [pc, #28]	@ (8006be0 <_Z10cube_printPKcz+0xc0>)
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	f000 f80e 	bl	8006be4 <_Z17cube_assert_debugbPKctS0_z>
}
 8006bc8:	bf00      	nop
 8006bca:	37d8      	adds	r7, #216	@ 0xd8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bd2:	b004      	add	sp, #16
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	2000aa50 	.word	0x2000aa50
 8006bdc:	08008070 	.word	0x08008070
 8006be0:	08008090 	.word	0x08008090

08006be4 <_Z17cube_assert_debugbPKctS0_z>:
 * @param file File that the assertion is in (__FILE__)
 * @param line Line number that the assertion is on (__LINE__)
 * @param str Optional message to print if assertion fails. Must be less than 192 characters AFTER formatting
 * @param ... Additional arguments to print if assertion fails, in same format as printf
 */
void cube_assert_debug(bool condition, const char* file, const uint16_t line, const char* str, ...) {
 8006be4:	b408      	push	{r3}
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b0d9      	sub	sp, #356	@ 0x164
 8006bea:	af02      	add	r7, sp, #8
 8006bec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8006bf0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8006bf4:	6019      	str	r1, [r3, #0]
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8006bfc:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8006c00:	4602      	mov	r2, r0
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8006c08:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006c0c:	460a      	mov	r2, r1
 8006c0e:	801a      	strh	r2, [r3, #0]
    // If assertion succeeds, do nothing
    if (condition) {
 8006c10:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8006c14:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f040 8091 	bne.w	8006d42 <_Z17cube_assert_debugbPKctS0_z+0x15e>
        return;
    }

#ifndef DISABLE_DEBUG

    bool printMessage = false;
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157

    // NOTE: Be careful! If va_list funcs while RTOS is active ALL calls to any vsnprint functions MUST have a mutex lock/unlock
    // NOTE: https://nadler.com/embedded/newlibAndFreeRTOS.html

    // We have an assert fail, we try to take control of the Debug semaphore, and then suspend all other parts of the system
    if (Global::vaListMutex.Lock(ASSERT_TAKE_MAX_TIME_MS)) {
 8006c26:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8006c2a:	484a      	ldr	r0, [pc, #296]	@ (8006d54 <_Z17cube_assert_debugbPKctS0_z+0x170>)
 8006c2c:	f7ff fe96 	bl	800695c <_ZN5Mutex4LockEm>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <_Z17cube_assert_debugbPKctS0_z+0x58>
        // We have the mutex, we can now safely print the message
        printMessage = true;
 8006c36:	2301      	movs	r3, #1
 8006c38:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    }

    vTaskSuspendAll();
 8006c3c:	f7fd fdcc 	bl	80047d8 <vTaskSuspendAll>

    //If we have the vaListMutex, we can safely use vsnprintf
    if (printMessage) {
 8006c40:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d072      	beq.n	8006d2e <_Z17cube_assert_debugbPKctS0_z+0x14a>
        // Print out the assertion header through the supported interface, we don't have a UART task running, so we directly use HAL
        uint8_t header_buf[ASSERT_BUFFER_MAX_SIZE] = {};
 8006c48:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8006c4c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	3304      	adds	r3, #4
 8006c56:	229c      	movs	r2, #156	@ 0x9c
 8006c58:	2100      	movs	r1, #0
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fb6a 	bl	8007334 <memset>
        int16_t res = snprintf(reinterpret_cast<char*>(header_buf), ASSERT_BUFFER_MAX_SIZE - 1, "\r\n\n-- ASSERTION FAILED --\r\nFile [%s] @ Line # [%d]\r\n", file, line);
 8006c60:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8006c64:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006c68:	881a      	ldrh	r2, [r3, #0]
 8006c6a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8006c6e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8006c72:	f107 000c 	add.w	r0, r7, #12
 8006c76:	9200      	str	r2, [sp, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a37      	ldr	r2, [pc, #220]	@ (8006d58 <_Z17cube_assert_debugbPKctS0_z+0x174>)
 8006c7c:	219f      	movs	r1, #159	@ 0x9f
 8006c7e:	f000 faeb 	bl	8007258 <sniprintf>
 8006c82:	4603      	mov	r3, r0
 8006c84:	f8a7 3154 	strh.w	r3, [r7, #340]	@ 0x154
        if (res < 0) {
 8006c88:	f9b7 3154 	ldrsh.w	r3, [r7, #340]	@ 0x154
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	da0a      	bge.n	8006ca6 <_Z17cube_assert_debugbPKctS0_z+0xc2>
            // If we failed to generate the header, just format the line number
            snprintf(reinterpret_cast<char*>(header_buf), ASSERT_BUFFER_MAX_SIZE - 1, "\r\n\n-- ASSERTION FAILED --\r\nFile [PATH_TOO_LONG] @ Line # [%d]\r\n", line);
 8006c90:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8006c94:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	f107 000c 	add.w	r0, r7, #12
 8006c9e:	4a2f      	ldr	r2, [pc, #188]	@ (8006d5c <_Z17cube_assert_debugbPKctS0_z+0x178>)
 8006ca0:	219f      	movs	r1, #159	@ 0x9f
 8006ca2:	f000 fad9 	bl	8007258 <sniprintf>
        }

        // Output the header to the debug port
        DEFAULT_DEBUG_UART_DRIVER->Transmit(header_buf, strlen(reinterpret_cast<char*>(header_buf)));
 8006ca6:	f107 030c 	add.w	r3, r7, #12
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7f9 fa9a 	bl	80001e4 <strlen>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	f107 030c 	add.w	r3, r7, #12
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4829      	ldr	r0, [pc, #164]	@ (8006d60 <_Z17cube_assert_debugbPKctS0_z+0x17c>)
 8006cbc:	f000 fa04 	bl	80070c8 <_ZN10UARTDriver8TransmitEPht>

        // If we have a message, and can use VA list, extract the string into a new buffer, and null terminate it
        if (printMessage && str != nullptr) {
 8006cc0:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d037      	beq.n	8006d38 <_Z17cube_assert_debugbPKctS0_z+0x154>
 8006cc8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d033      	beq.n	8006d38 <_Z17cube_assert_debugbPKctS0_z+0x154>
            uint8_t str_buffer[ASSERT_BUFFER_MAX_SIZE] = {};
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cd6:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8006cda:	229c      	movs	r2, #156	@ 0x9c
 8006cdc:	2100      	movs	r1, #0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fb28 	bl	8007334 <memset>
            va_list argument_list;
            va_start(argument_list, str);
 8006ce4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8006ce8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
            int16_t buflen = vsnprintf(reinterpret_cast<char*>(str_buffer), sizeof(str_buffer) - 1, str, argument_list);
 8006cec:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8006cf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cf4:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8006cf8:	219f      	movs	r1, #159	@ 0x9f
 8006cfa:	f000 fb0d 	bl	8007318 <vsniprintf>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f8a7 3152 	strh.w	r3, [r7, #338]	@ 0x152
            va_end(argument_list);
            if (buflen > 0) {
 8006d04:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	@ 0x152
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	dd15      	ble.n	8006d38 <_Z17cube_assert_debugbPKctS0_z+0x154>
                str_buffer[buflen] = '\0';
 8006d0c:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	@ 0x152
 8006d10:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006d14:	443b      	add	r3, r7
 8006d16:	2200      	movs	r2, #0
 8006d18:	f803 2cac 	strb.w	r2, [r3, #-172]
                DEFAULT_DEBUG_UART_DRIVER->Transmit(str_buffer, buflen);
 8006d1c:	f8b7 2152 	ldrh.w	r2, [r7, #338]	@ 0x152
 8006d20:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8006d24:	4619      	mov	r1, r3
 8006d26:	480e      	ldr	r0, [pc, #56]	@ (8006d60 <_Z17cube_assert_debugbPKctS0_z+0x17c>)
 8006d28:	f000 f9ce 	bl	80070c8 <_ZN10UARTDriver8TransmitEPht>
 8006d2c:	e004      	b.n	8006d38 <_Z17cube_assert_debugbPKctS0_z+0x154>
            }
        }
    }
    else {
        DEFAULT_DEBUG_UART_DRIVER->Transmit((uint8_t*)"-- ASSERTION FAILED --\r\nCould not acquire vaListMutex\r\n", 55);
 8006d2e:	2237      	movs	r2, #55	@ 0x37
 8006d30:	490c      	ldr	r1, [pc, #48]	@ (8006d64 <_Z17cube_assert_debugbPKctS0_z+0x180>)
 8006d32:	480b      	ldr	r0, [pc, #44]	@ (8006d60 <_Z17cube_assert_debugbPKctS0_z+0x17c>)
 8006d34:	f000 f9c8 	bl	80070c8 <_ZN10UARTDriver8TransmitEPht>
    }

#endif

    HAL_NVIC_SystemReset();
 8006d38:	f7fa f87b 	bl	8000e32 <HAL_NVIC_SystemReset>

    // We should not reach this code, but if we do, we should resume the scheduler
    xTaskResumeAll();
 8006d3c:	f7fd fd5a 	bl	80047f4 <xTaskResumeAll>
 8006d40:	e000      	b.n	8006d44 <_Z17cube_assert_debugbPKctS0_z+0x160>
        return;
 8006d42:	bf00      	nop
}
 8006d44:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d4e:	b001      	add	sp, #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	2000aa50 	.word	0x2000aa50
 8006d58:	080080ac 	.word	0x080080ac
 8006d5c:	080080e4 	.word	0x080080e4
 8006d60:	200000b8 	.word	0x200000b8
 8006d64:	08008124 	.word	0x08008124

08006d68 <_Z41__static_initialization_and_destruction_0ii>:
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d107      	bne.n	8006d88 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d102      	bne.n	8006d88 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mutex Global::vaListMutex;
 8006d82:	4809      	ldr	r0, [pc, #36]	@ (8006da8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006d84:	f7ff fdbe 	bl	8006904 <_ZN5MutexC1Ev>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d107      	bne.n	8006d9e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d102      	bne.n	8006d9e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006d98:	4803      	ldr	r0, [pc, #12]	@ (8006da8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006d9a:	f7ff fdd1 	bl	8006940 <_ZN5MutexD1Ev>
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	2000aa50 	.word	0x2000aa50

08006dac <_GLOBAL__sub_I__ZN6Global11vaListMutexE>:
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006db4:	2001      	movs	r0, #1
 8006db6:	f7ff ffd7 	bl	8006d68 <_Z41__static_initialization_and_destruction_0ii>
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <_GLOBAL__sub_D__ZN6Global11vaListMutexE>:
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	f7ff ffcf 	bl	8006d68 <_Z41__static_initialization_and_destruction_0ii>
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <_ZNK7Command14GetDataPointerEv>:
    uint8_t* GetDataPointer() const { return data; }
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <_ZN8CubeTask7RunTaskEPv>:
    }

    void InitTask();

protected:
    static void RunTask(void* pvParams) { CubeTask::Inst().Run(pvParams); } // Static Task Interface, passes control to the instance Run();
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	f7f9 fa74 	bl	80002d8 <_ZN8CubeTask4InstEv>
 8006df0:	4603      	mov	r3, r0
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 f837 	bl	8006e68 <_ZN8CubeTask3RunEPv>
 8006dfa:	bf00      	nop
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <_ZN8CubeTask8InitTaskEv>:

/**
 * @brief Initializes Cube task with the RTOS scheduler
*/
void CubeTask::InitTask()
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	6078      	str	r0, [r7, #4]
    // Make sure the task is not already initialized
    SOAR_ASSERT(rtTaskHandle == nullptr, "Cannot initialize UART task twice");
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d005      	beq.n	8006e20 <_ZN8CubeTask8InitTaskEv+0x1c>
 8006e14:	4b0f      	ldr	r3, [pc, #60]	@ (8006e54 <_ZN8CubeTask8InitTaskEv+0x50>)
 8006e16:	2211      	movs	r2, #17
 8006e18:	490f      	ldr	r1, [pc, #60]	@ (8006e58 <_ZN8CubeTask8InitTaskEv+0x54>)
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	f7ff fee2 	bl	8006be4 <_Z17cube_assert_debugbPKctS0_z>

    // Start the task
    BaseType_t rtValue =
        xTaskCreate((TaskFunction_t)CubeTask::RunTask,
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3304      	adds	r3, #4
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	2302      	movs	r3, #2
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e30:	490a      	ldr	r1, [pc, #40]	@ (8006e5c <_ZN8CubeTask8InitTaskEv+0x58>)
 8006e32:	480b      	ldr	r0, [pc, #44]	@ (8006e60 <_ZN8CubeTask8InitTaskEv+0x5c>)
 8006e34:	f7fd fada 	bl	80043ec <xTaskCreate>
 8006e38:	60f8      	str	r0, [r7, #12]
            (void*)this,
            (UBaseType_t)UART_TASK_RTOS_PRIORITY,
            (TaskHandle_t*)&rtTaskHandle);

    //Ensure creation succeded
    SOAR_ASSERT(rtValue == pdPASS, "CUBETask::InitTask() - xTaskCreate() failed");
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d005      	beq.n	8006e4c <_ZN8CubeTask8InitTaskEv+0x48>
 8006e40:	4b08      	ldr	r3, [pc, #32]	@ (8006e64 <_ZN8CubeTask8InitTaskEv+0x60>)
 8006e42:	221d      	movs	r2, #29
 8006e44:	4904      	ldr	r1, [pc, #16]	@ (8006e58 <_ZN8CubeTask8InitTaskEv+0x54>)
 8006e46:	2000      	movs	r0, #0
 8006e48:	f7ff fecc 	bl	8006be4 <_Z17cube_assert_debugbPKctS0_z>
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	0800815c 	.word	0x0800815c
 8006e58:	08008180 	.word	0x08008180
 8006e5c:	08008198 	.word	0x08008198
 8006e60:	08006de5 	.word	0x08006de5
 8006e64:	080081a4 	.word	0x080081a4

08006e68 <_ZN8CubeTask3RunEPv>:
/**
 * @brief Instance Run loop for the Cube Task, runs on scheduler start as long as the task is initialized.
 * @param pvParams RTOS Passed void parameters, contains a pointer to the object instance, should not be used
*/
void CubeTask::Run(void * pvParams)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
    //UART Task loop
    while(1) {
        Command cm;
 8006e72:	f107 030c 	add.w	r3, r7, #12
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff fc0f 	bl	800669a <_ZN7CommandC1Ev>

        //Wait forever for a command
        qEvtQueue->ReceiveWait(cm);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f107 020c 	add.w	r2, r7, #12
 8006e84:	4611      	mov	r1, r2
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7ff fdf0 	bl	8006a6c <_ZN5Queue11ReceiveWaitER7Command>

        //Process the command
        HandleCommand(cm);
 8006e8c:	f107 030c 	add.w	r3, r7, #12
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f802 	bl	8006e9c <_ZN8CubeTask13HandleCommandER7Command>
    }
 8006e98:	bf00      	nop
 8006e9a:	e7ea      	b.n	8006e72 <_ZN8CubeTask3RunEPv+0xa>

08006e9c <_ZN8CubeTask13HandleCommandER7Command>:
 * @brief HandleCommand handles any command passed to the Cube task primary event queue. Responsible for
 *           handling all commands, even if unsupported. (Unexpected commands must still be reset)
 * @param cm Reference to the command object to handle
*/
void CubeTask::HandleCommand(Command& cm)
{
 8006e9c:	b590      	push	{r4, r7, lr}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
    //Switch for the GLOBAL_COMMAND
    switch (cm.GetCommand()) {
 8006ea6:	6838      	ldr	r0, [r7, #0]
 8006ea8:	f7f9 fadc 	bl	8000464 <_ZNK7Command10GetCommandEv>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d11d      	bne.n	8006eee <_ZN8CubeTask13HandleCommandER7Command+0x52>
    case DATA_COMMAND: {
        //Switch for task specific command within DATA_COMMAND
        switch (cm.GetTaskCommand()) {
 8006eb2:	6838      	ldr	r0, [r7, #0]
 8006eb4:	f7f9 fae2 	bl	800047c <_ZNK7Command14GetTaskCommandEv>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d10d      	bne.n	8006eda <_ZN8CubeTask13HandleCommandER7Command+0x3e>
        case CUBE_TASK_COMMAND_SEND_DEBUG:
#ifndef DISABLE_DEBUG
                DEFAULT_DEBUG_UART_DRIVER->Transmit(cm.GetDataPointer(), cm.GetDataSize());
 8006ebe:	6838      	ldr	r0, [r7, #0]
 8006ec0:	f7ff ff84 	bl	8006dcc <_ZNK7Command14GetDataPointerEv>
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	6838      	ldr	r0, [r7, #0]
 8006ec8:	f7ff fca2 	bl	8006810 <_ZNK7Command11GetDataSizeEv>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	461a      	mov	r2, r3
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	480f      	ldr	r0, [pc, #60]	@ (8006f10 <_ZN8CubeTask13HandleCommandER7Command+0x74>)
 8006ed4:	f000 f8f8 	bl	80070c8 <_ZN10UARTDriver8TransmitEPht>
#endif
            break;
 8006ed8:	e008      	b.n	8006eec <_ZN8CubeTask13HandleCommandER7Command+0x50>
        default:
            SOAR_PRINT("CUBETask - Received Unsupported DATA_COMMAND {%d}\n", cm.GetTaskCommand());
 8006eda:	6838      	ldr	r0, [r7, #0]
 8006edc:	f7f9 face 	bl	800047c <_ZNK7Command14GetTaskCommandEv>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	480b      	ldr	r0, [pc, #44]	@ (8006f14 <_ZN8CubeTask13HandleCommandER7Command+0x78>)
 8006ee6:	f7ff fe1b 	bl	8006b20 <_Z10cube_printPKcz>
            break;
 8006eea:	bf00      	nop
        }
        break;
 8006eec:	e008      	b.n	8006f00 <_ZN8CubeTask13HandleCommandER7Command+0x64>
    }
    default:
        SOAR_PRINT("CUBETask - Received Unsupported Command {%d}\n", cm.GetCommand());
 8006eee:	6838      	ldr	r0, [r7, #0]
 8006ef0:	f7f9 fab8 	bl	8000464 <_ZNK7Command10GetCommandEv>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4807      	ldr	r0, [pc, #28]	@ (8006f18 <_ZN8CubeTask13HandleCommandER7Command+0x7c>)
 8006efa:	f7ff fe11 	bl	8006b20 <_Z10cube_printPKcz>
        break;
 8006efe:	bf00      	nop
    }

    //No matter what we happens, we must reset allocated data
    cm.Reset();
 8006f00:	6838      	ldr	r0, [r7, #0]
 8006f02:	f7ff fc63 	bl	80067cc <_ZN7Command5ResetEv>
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd90      	pop	{r4, r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	200000b8 	.word	0x200000b8
 8006f14:	080081d0 	.word	0x080081d0
 8006f18:	08008204 	.word	0x08008204

08006f1c <LL_USART_IsActiveFlag_PE>:
  * @rmtoll ISR          PE            LL_USART_IsActiveFlag_PE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(const USART_TypeDef *USARTx)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d101      	bne.n	8006f34 <LL_USART_IsActiveFlag_PE+0x18>
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <LL_USART_IsActiveFlag_PE+0x1a>
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d101      	bne.n	8006f5a <LL_USART_IsActiveFlag_FE+0x18>
 8006f56:	2301      	movs	r3, #1
 8006f58:	e000      	b.n	8006f5c <LL_USART_IsActiveFlag_FE+0x1a>
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d101      	bne.n	8006f80 <LL_USART_IsActiveFlag_NE+0x18>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e000      	b.n	8006f82 <LL_USART_IsActiveFlag_NE+0x1a>
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d101      	bne.n	8006fa6 <LL_USART_IsActiveFlag_ORE+0x18>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <LL_USART_IsActiveFlag_ORE+0x1a>
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	f003 0320 	and.w	r3, r3, #32
 8006fc4:	2b20      	cmp	r3, #32
 8006fc6:	d101      	bne.n	8006fcc <LL_USART_IsActiveFlag_RXNE+0x18>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e000      	b.n	8006fce <LL_USART_IsActiveFlag_RXNE+0x1a>
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fea:	2b40      	cmp	r3, #64	@ 0x40
 8006fec:	d101      	bne.n	8006ff2 <LL_USART_IsActiveFlag_TC+0x18>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <LL_USART_IsActiveFlag_TC+0x1a>
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007010:	2b80      	cmp	r3, #128	@ 0x80
 8007012:	d101      	bne.n	8007018 <LL_USART_IsActiveFlag_TXE+0x18>
 8007014:	2301      	movs	r3, #1
 8007016:	e000      	b.n	800701a <LL_USART_IsActiveFlag_TXE+0x1a>
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2208      	movs	r2, #8
 8007032:	621a      	str	r2, [r3, #32]
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8007040:	b480      	push	{r7}
 8007042:	b089      	sub	sp, #36	@ 0x24
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	60bb      	str	r3, [r7, #8]
   return(result);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f043 0320 	orr.w	r3, r3, #32
 800705a:	61fb      	str	r3, [r7, #28]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	61ba      	str	r2, [r7, #24]
 8007062:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	6979      	ldr	r1, [r7, #20]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	613b      	str	r3, [r7, #16]
   return(result);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	bf14      	ite	ne
 8007074:	2301      	movne	r3, #1
 8007076:	2300      	moveq	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e4      	bne.n	8007048 <LL_USART_EnableIT_RXNE+0x8>
}
 800707e:	bf00      	nop
 8007080:	bf00      	nop
 8007082:	3724      	adds	r7, #36	@ 0x24
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007098:	b29b      	uxth	r3, r3
 800709a:	b2db      	uxtb	r3, r3
}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <_ZN10UARTDriver8TransmitEPht>:
 * @param data The data to transmit
 * @param len The length of the data to transmit
 * @return True if the transmission was successful, false otherwise
 */
bool UARTDriver::Transmit(uint8_t* data, uint16_t len)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	4613      	mov	r3, r2
 80070d4:	80fb      	strh	r3, [r7, #6]
    // Loop through and transmit each byte via. polling
    for (uint16_t i = 0; i < len; i++) {
 80070d6:	2300      	movs	r3, #0
 80070d8:	82fb      	strh	r3, [r7, #22]
 80070da:	e019      	b.n	8007110 <_ZN10UARTDriver8TransmitEPht+0x48>
        LL_USART_TransmitData8(kUart_, data[i]);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	8afb      	ldrh	r3, [r7, #22]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	4413      	add	r3, r2
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	4619      	mov	r1, r3
 80070ea:	f7ff ffdd 	bl	80070a8 <LL_USART_TransmitData8>

        // Wait until the TX Register Empty Flag is set
        while (!LL_USART_IsActiveFlag_TXE(kUart_)) {}
 80070ee:	bf00      	nop
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff ff83 	bl	8007000 <LL_USART_IsActiveFlag_TXE>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bf0c      	ite	eq
 8007100:	2301      	moveq	r3, #1
 8007102:	2300      	movne	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f2      	bne.n	80070f0 <_ZN10UARTDriver8TransmitEPht+0x28>
    for (uint16_t i = 0; i < len; i++) {
 800710a:	8afb      	ldrh	r3, [r7, #22]
 800710c:	3301      	adds	r3, #1
 800710e:	82fb      	strh	r3, [r7, #22]
 8007110:	8afa      	ldrh	r2, [r7, #22]
 8007112:	88fb      	ldrh	r3, [r7, #6]
 8007114:	429a      	cmp	r2, r3
 8007116:	d3e1      	bcc.n	80070dc <_ZN10UARTDriver8TransmitEPht+0x14>
    }

    // Wait until the transfer complete flag is set
    while (!LL_USART_IsActiveFlag_TC(kUart_)) {}
 8007118:	bf00      	nop
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff ff5b 	bl	8006fda <LL_USART_IsActiveFlag_TC>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	bf0c      	ite	eq
 800712a:	2301      	moveq	r3, #1
 800712c:	2300      	movne	r3, #0
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1f2      	bne.n	800711a <_ZN10UARTDriver8TransmitEPht+0x52>

    return true;
 8007134:	2301      	movs	r3, #1
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <_ZN10UARTDriver9ReceiveITEPhP16UARTReceiverBase>:
* @brief Receives 1 byte of data via interrupt
* @param receiver
* @return TRUE if interrupt was successfully enabled, FALSE otherwise
*/
bool UARTDriver::ReceiveIT(uint8_t* charBuf, UARTReceiverBase* receiver)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
    // Check flags
    HandleAndClearRxError();
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 f822 	bl	8007194 <_ZN10UARTDriver21HandleAndClearRxErrorEv>
    if (LL_USART_IsActiveFlag_RXNE(kUart_)) {
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff ff2d 	bl	8006fb4 <LL_USART_IsActiveFlag_RXNE>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	bf14      	ite	ne
 8007160:	2301      	movne	r3, #1
 8007162:	2300      	moveq	r3, #0
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d004      	beq.n	8007174 <_ZN10UARTDriver9ReceiveITEPhP16UARTReceiverBase+0x36>
        // Read the data and ignore it
        LL_USART_ReceiveData8(kUart_);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4618      	mov	r0, r3
 8007170:	f7ff ff8c 	bl	800708c <LL_USART_ReceiveData8>
    }

    // Set the buffer and receiver
    rxCharBuf_ = charBuf;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	605a      	str	r2, [r3, #4]
    rxReceiver_ = receiver;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	609a      	str	r2, [r3, #8]

    // Enable the receive interrupt
    LL_USART_EnableIT_RXNE(kUart_);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff ff5b 	bl	8007040 <LL_USART_EnableIT_RXNE>

    return true;
 800718a:	2301      	movs	r3, #1
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <_ZN10UARTDriver21HandleAndClearRxErrorEv>:
/**
 * @brief Clears any error flags that may have been set
 * @return true if flags had to be cleared, false otherwise
 */
bool UARTDriver::HandleAndClearRxError()
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
    bool shouldClearFlags = false;
 800719c:	2300      	movs	r3, #0
 800719e:	73fb      	strb	r3, [r7, #15]
    if (LL_USART_IsActiveFlag_ORE(kUart_)) {
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff fef2 	bl	8006f8e <LL_USART_IsActiveFlag_ORE>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf14      	ite	ne
 80071b0:	2301      	movne	r3, #1
 80071b2:	2300      	moveq	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x2a>
        shouldClearFlags = true;
 80071ba:	2301      	movs	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
    }
    if (LL_USART_IsActiveFlag_NE(kUart_)) {
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff fed0 	bl	8006f68 <LL_USART_IsActiveFlag_NE>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	bf14      	ite	ne
 80071ce:	2301      	movne	r3, #1
 80071d0:	2300      	moveq	r3, #0
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x48>
        shouldClearFlags = true;
 80071d8:	2301      	movs	r3, #1
 80071da:	73fb      	strb	r3, [r7, #15]
    }
    if(LL_USART_IsActiveFlag_FE(kUart_)) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7ff feae 	bl	8006f42 <LL_USART_IsActiveFlag_FE>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	bf14      	ite	ne
 80071ec:	2301      	movne	r3, #1
 80071ee:	2300      	moveq	r3, #0
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x66>
        shouldClearFlags = true;
 80071f6:	2301      	movs	r3, #1
 80071f8:	73fb      	strb	r3, [r7, #15]
    }
    if(LL_USART_IsActiveFlag_PE(kUart_)) {
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f7ff fe8c 	bl	8006f1c <LL_USART_IsActiveFlag_PE>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	bf14      	ite	ne
 800720a:	2301      	movne	r3, #1
 800720c:	2300      	moveq	r3, #0
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x84>
        shouldClearFlags = true;
 8007214:	2301      	movs	r3, #1
 8007216:	73fb      	strb	r3, [r7, #15]
    }

    // Clearing the ORE here also clears PE, NE, FE, IDLE
    if(shouldClearFlags)
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d004      	beq.n	8007228 <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x94>
        LL_USART_ClearFlag_ORE(kUart_);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff feff 	bl	8007026 <LL_USART_ClearFlag_ORE>

    return !shouldClearFlags;
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	f083 0301 	eor.w	r3, r3, #1
 800722e:	b2db      	uxtb	r3, r3
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <__cxa_guard_acquire>:
 8007238:	6802      	ldr	r2, [r0, #0]
 800723a:	07d2      	lsls	r2, r2, #31
 800723c:	4603      	mov	r3, r0
 800723e:	d405      	bmi.n	800724c <__cxa_guard_acquire+0x14>
 8007240:	7842      	ldrb	r2, [r0, #1]
 8007242:	b102      	cbz	r2, 8007246 <__cxa_guard_acquire+0xe>
 8007244:	deff      	udf	#255	@ 0xff
 8007246:	2001      	movs	r0, #1
 8007248:	7058      	strb	r0, [r3, #1]
 800724a:	4770      	bx	lr
 800724c:	2000      	movs	r0, #0
 800724e:	4770      	bx	lr

08007250 <__cxa_guard_release>:
 8007250:	2301      	movs	r3, #1
 8007252:	6003      	str	r3, [r0, #0]
 8007254:	4770      	bx	lr
	...

08007258 <sniprintf>:
 8007258:	b40c      	push	{r2, r3}
 800725a:	b530      	push	{r4, r5, lr}
 800725c:	4b17      	ldr	r3, [pc, #92]	@ (80072bc <sniprintf+0x64>)
 800725e:	1e0c      	subs	r4, r1, #0
 8007260:	681d      	ldr	r5, [r3, #0]
 8007262:	b09d      	sub	sp, #116	@ 0x74
 8007264:	da08      	bge.n	8007278 <sniprintf+0x20>
 8007266:	238b      	movs	r3, #139	@ 0x8b
 8007268:	602b      	str	r3, [r5, #0]
 800726a:	f04f 30ff 	mov.w	r0, #4294967295
 800726e:	b01d      	add	sp, #116	@ 0x74
 8007270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007274:	b002      	add	sp, #8
 8007276:	4770      	bx	lr
 8007278:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800727c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007280:	bf14      	ite	ne
 8007282:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007286:	4623      	moveq	r3, r4
 8007288:	9304      	str	r3, [sp, #16]
 800728a:	9307      	str	r3, [sp, #28]
 800728c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007290:	9002      	str	r0, [sp, #8]
 8007292:	9006      	str	r0, [sp, #24]
 8007294:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007298:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800729a:	ab21      	add	r3, sp, #132	@ 0x84
 800729c:	a902      	add	r1, sp, #8
 800729e:	4628      	mov	r0, r5
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	f000 fa33 	bl	800770c <_svfiprintf_r>
 80072a6:	1c43      	adds	r3, r0, #1
 80072a8:	bfbc      	itt	lt
 80072aa:	238b      	movlt	r3, #139	@ 0x8b
 80072ac:	602b      	strlt	r3, [r5, #0]
 80072ae:	2c00      	cmp	r4, #0
 80072b0:	d0dd      	beq.n	800726e <sniprintf+0x16>
 80072b2:	9b02      	ldr	r3, [sp, #8]
 80072b4:	2200      	movs	r2, #0
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	e7d9      	b.n	800726e <sniprintf+0x16>
 80072ba:	bf00      	nop
 80072bc:	20000010 	.word	0x20000010

080072c0 <_vsniprintf_r>:
 80072c0:	b530      	push	{r4, r5, lr}
 80072c2:	4614      	mov	r4, r2
 80072c4:	2c00      	cmp	r4, #0
 80072c6:	b09b      	sub	sp, #108	@ 0x6c
 80072c8:	4605      	mov	r5, r0
 80072ca:	461a      	mov	r2, r3
 80072cc:	da05      	bge.n	80072da <_vsniprintf_r+0x1a>
 80072ce:	238b      	movs	r3, #139	@ 0x8b
 80072d0:	6003      	str	r3, [r0, #0]
 80072d2:	f04f 30ff 	mov.w	r0, #4294967295
 80072d6:	b01b      	add	sp, #108	@ 0x6c
 80072d8:	bd30      	pop	{r4, r5, pc}
 80072da:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80072de:	f8ad 300c 	strh.w	r3, [sp, #12]
 80072e2:	bf14      	ite	ne
 80072e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80072e8:	4623      	moveq	r3, r4
 80072ea:	9302      	str	r3, [sp, #8]
 80072ec:	9305      	str	r3, [sp, #20]
 80072ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80072f2:	9100      	str	r1, [sp, #0]
 80072f4:	9104      	str	r1, [sp, #16]
 80072f6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80072fa:	4669      	mov	r1, sp
 80072fc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80072fe:	f000 fa05 	bl	800770c <_svfiprintf_r>
 8007302:	1c43      	adds	r3, r0, #1
 8007304:	bfbc      	itt	lt
 8007306:	238b      	movlt	r3, #139	@ 0x8b
 8007308:	602b      	strlt	r3, [r5, #0]
 800730a:	2c00      	cmp	r4, #0
 800730c:	d0e3      	beq.n	80072d6 <_vsniprintf_r+0x16>
 800730e:	9b00      	ldr	r3, [sp, #0]
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
 8007314:	e7df      	b.n	80072d6 <_vsniprintf_r+0x16>
	...

08007318 <vsniprintf>:
 8007318:	b507      	push	{r0, r1, r2, lr}
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	4613      	mov	r3, r2
 800731e:	460a      	mov	r2, r1
 8007320:	4601      	mov	r1, r0
 8007322:	4803      	ldr	r0, [pc, #12]	@ (8007330 <vsniprintf+0x18>)
 8007324:	6800      	ldr	r0, [r0, #0]
 8007326:	f7ff ffcb 	bl	80072c0 <_vsniprintf_r>
 800732a:	b003      	add	sp, #12
 800732c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007330:	20000010 	.word	0x20000010

08007334 <memset>:
 8007334:	4402      	add	r2, r0
 8007336:	4603      	mov	r3, r0
 8007338:	4293      	cmp	r3, r2
 800733a:	d100      	bne.n	800733e <memset+0xa>
 800733c:	4770      	bx	lr
 800733e:	f803 1b01 	strb.w	r1, [r3], #1
 8007342:	e7f9      	b.n	8007338 <memset+0x4>

08007344 <_reclaim_reent>:
 8007344:	4b29      	ldr	r3, [pc, #164]	@ (80073ec <_reclaim_reent+0xa8>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4283      	cmp	r3, r0
 800734a:	b570      	push	{r4, r5, r6, lr}
 800734c:	4604      	mov	r4, r0
 800734e:	d04b      	beq.n	80073e8 <_reclaim_reent+0xa4>
 8007350:	69c3      	ldr	r3, [r0, #28]
 8007352:	b1ab      	cbz	r3, 8007380 <_reclaim_reent+0x3c>
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	b16b      	cbz	r3, 8007374 <_reclaim_reent+0x30>
 8007358:	2500      	movs	r5, #0
 800735a:	69e3      	ldr	r3, [r4, #28]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	5959      	ldr	r1, [r3, r5]
 8007360:	2900      	cmp	r1, #0
 8007362:	d13b      	bne.n	80073dc <_reclaim_reent+0x98>
 8007364:	3504      	adds	r5, #4
 8007366:	2d80      	cmp	r5, #128	@ 0x80
 8007368:	d1f7      	bne.n	800735a <_reclaim_reent+0x16>
 800736a:	69e3      	ldr	r3, [r4, #28]
 800736c:	4620      	mov	r0, r4
 800736e:	68d9      	ldr	r1, [r3, #12]
 8007370:	f000 f878 	bl	8007464 <_free_r>
 8007374:	69e3      	ldr	r3, [r4, #28]
 8007376:	6819      	ldr	r1, [r3, #0]
 8007378:	b111      	cbz	r1, 8007380 <_reclaim_reent+0x3c>
 800737a:	4620      	mov	r0, r4
 800737c:	f000 f872 	bl	8007464 <_free_r>
 8007380:	6961      	ldr	r1, [r4, #20]
 8007382:	b111      	cbz	r1, 800738a <_reclaim_reent+0x46>
 8007384:	4620      	mov	r0, r4
 8007386:	f000 f86d 	bl	8007464 <_free_r>
 800738a:	69e1      	ldr	r1, [r4, #28]
 800738c:	b111      	cbz	r1, 8007394 <_reclaim_reent+0x50>
 800738e:	4620      	mov	r0, r4
 8007390:	f000 f868 	bl	8007464 <_free_r>
 8007394:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007396:	b111      	cbz	r1, 800739e <_reclaim_reent+0x5a>
 8007398:	4620      	mov	r0, r4
 800739a:	f000 f863 	bl	8007464 <_free_r>
 800739e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073a0:	b111      	cbz	r1, 80073a8 <_reclaim_reent+0x64>
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 f85e 	bl	8007464 <_free_r>
 80073a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80073aa:	b111      	cbz	r1, 80073b2 <_reclaim_reent+0x6e>
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 f859 	bl	8007464 <_free_r>
 80073b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80073b4:	b111      	cbz	r1, 80073bc <_reclaim_reent+0x78>
 80073b6:	4620      	mov	r0, r4
 80073b8:	f000 f854 	bl	8007464 <_free_r>
 80073bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80073be:	b111      	cbz	r1, 80073c6 <_reclaim_reent+0x82>
 80073c0:	4620      	mov	r0, r4
 80073c2:	f000 f84f 	bl	8007464 <_free_r>
 80073c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80073c8:	b111      	cbz	r1, 80073d0 <_reclaim_reent+0x8c>
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 f84a 	bl	8007464 <_free_r>
 80073d0:	6a23      	ldr	r3, [r4, #32]
 80073d2:	b14b      	cbz	r3, 80073e8 <_reclaim_reent+0xa4>
 80073d4:	4620      	mov	r0, r4
 80073d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073da:	4718      	bx	r3
 80073dc:	680e      	ldr	r6, [r1, #0]
 80073de:	4620      	mov	r0, r4
 80073e0:	f000 f840 	bl	8007464 <_free_r>
 80073e4:	4631      	mov	r1, r6
 80073e6:	e7bb      	b.n	8007360 <_reclaim_reent+0x1c>
 80073e8:	bd70      	pop	{r4, r5, r6, pc}
 80073ea:	bf00      	nop
 80073ec:	20000010 	.word	0x20000010

080073f0 <__errno>:
 80073f0:	4b01      	ldr	r3, [pc, #4]	@ (80073f8 <__errno+0x8>)
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	20000010 	.word	0x20000010

080073fc <__libc_init_array>:
 80073fc:	b570      	push	{r4, r5, r6, lr}
 80073fe:	4d0d      	ldr	r5, [pc, #52]	@ (8007434 <__libc_init_array+0x38>)
 8007400:	4c0d      	ldr	r4, [pc, #52]	@ (8007438 <__libc_init_array+0x3c>)
 8007402:	1b64      	subs	r4, r4, r5
 8007404:	10a4      	asrs	r4, r4, #2
 8007406:	2600      	movs	r6, #0
 8007408:	42a6      	cmp	r6, r4
 800740a:	d109      	bne.n	8007420 <__libc_init_array+0x24>
 800740c:	4d0b      	ldr	r5, [pc, #44]	@ (800743c <__libc_init_array+0x40>)
 800740e:	4c0c      	ldr	r4, [pc, #48]	@ (8007440 <__libc_init_array+0x44>)
 8007410:	f000 fc66 	bl	8007ce0 <_init>
 8007414:	1b64      	subs	r4, r4, r5
 8007416:	10a4      	asrs	r4, r4, #2
 8007418:	2600      	movs	r6, #0
 800741a:	42a6      	cmp	r6, r4
 800741c:	d105      	bne.n	800742a <__libc_init_array+0x2e>
 800741e:	bd70      	pop	{r4, r5, r6, pc}
 8007420:	f855 3b04 	ldr.w	r3, [r5], #4
 8007424:	4798      	blx	r3
 8007426:	3601      	adds	r6, #1
 8007428:	e7ee      	b.n	8007408 <__libc_init_array+0xc>
 800742a:	f855 3b04 	ldr.w	r3, [r5], #4
 800742e:	4798      	blx	r3
 8007430:	3601      	adds	r6, #1
 8007432:	e7f2      	b.n	800741a <__libc_init_array+0x1e>
 8007434:	080082f8 	.word	0x080082f8
 8007438:	080082f8 	.word	0x080082f8
 800743c:	080082f8 	.word	0x080082f8
 8007440:	08008304 	.word	0x08008304

08007444 <__retarget_lock_acquire_recursive>:
 8007444:	4770      	bx	lr

08007446 <__retarget_lock_release_recursive>:
 8007446:	4770      	bx	lr

08007448 <memcpy>:
 8007448:	440a      	add	r2, r1
 800744a:	4291      	cmp	r1, r2
 800744c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007450:	d100      	bne.n	8007454 <memcpy+0xc>
 8007452:	4770      	bx	lr
 8007454:	b510      	push	{r4, lr}
 8007456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800745a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800745e:	4291      	cmp	r1, r2
 8007460:	d1f9      	bne.n	8007456 <memcpy+0xe>
 8007462:	bd10      	pop	{r4, pc}

08007464 <_free_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4605      	mov	r5, r0
 8007468:	2900      	cmp	r1, #0
 800746a:	d041      	beq.n	80074f0 <_free_r+0x8c>
 800746c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007470:	1f0c      	subs	r4, r1, #4
 8007472:	2b00      	cmp	r3, #0
 8007474:	bfb8      	it	lt
 8007476:	18e4      	addlt	r4, r4, r3
 8007478:	f000 f8e0 	bl	800763c <__malloc_lock>
 800747c:	4a1d      	ldr	r2, [pc, #116]	@ (80074f4 <_free_r+0x90>)
 800747e:	6813      	ldr	r3, [r2, #0]
 8007480:	b933      	cbnz	r3, 8007490 <_free_r+0x2c>
 8007482:	6063      	str	r3, [r4, #4]
 8007484:	6014      	str	r4, [r2, #0]
 8007486:	4628      	mov	r0, r5
 8007488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800748c:	f000 b8dc 	b.w	8007648 <__malloc_unlock>
 8007490:	42a3      	cmp	r3, r4
 8007492:	d908      	bls.n	80074a6 <_free_r+0x42>
 8007494:	6820      	ldr	r0, [r4, #0]
 8007496:	1821      	adds	r1, r4, r0
 8007498:	428b      	cmp	r3, r1
 800749a:	bf01      	itttt	eq
 800749c:	6819      	ldreq	r1, [r3, #0]
 800749e:	685b      	ldreq	r3, [r3, #4]
 80074a0:	1809      	addeq	r1, r1, r0
 80074a2:	6021      	streq	r1, [r4, #0]
 80074a4:	e7ed      	b.n	8007482 <_free_r+0x1e>
 80074a6:	461a      	mov	r2, r3
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	b10b      	cbz	r3, 80074b0 <_free_r+0x4c>
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	d9fa      	bls.n	80074a6 <_free_r+0x42>
 80074b0:	6811      	ldr	r1, [r2, #0]
 80074b2:	1850      	adds	r0, r2, r1
 80074b4:	42a0      	cmp	r0, r4
 80074b6:	d10b      	bne.n	80074d0 <_free_r+0x6c>
 80074b8:	6820      	ldr	r0, [r4, #0]
 80074ba:	4401      	add	r1, r0
 80074bc:	1850      	adds	r0, r2, r1
 80074be:	4283      	cmp	r3, r0
 80074c0:	6011      	str	r1, [r2, #0]
 80074c2:	d1e0      	bne.n	8007486 <_free_r+0x22>
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	6053      	str	r3, [r2, #4]
 80074ca:	4408      	add	r0, r1
 80074cc:	6010      	str	r0, [r2, #0]
 80074ce:	e7da      	b.n	8007486 <_free_r+0x22>
 80074d0:	d902      	bls.n	80074d8 <_free_r+0x74>
 80074d2:	230c      	movs	r3, #12
 80074d4:	602b      	str	r3, [r5, #0]
 80074d6:	e7d6      	b.n	8007486 <_free_r+0x22>
 80074d8:	6820      	ldr	r0, [r4, #0]
 80074da:	1821      	adds	r1, r4, r0
 80074dc:	428b      	cmp	r3, r1
 80074de:	bf04      	itt	eq
 80074e0:	6819      	ldreq	r1, [r3, #0]
 80074e2:	685b      	ldreq	r3, [r3, #4]
 80074e4:	6063      	str	r3, [r4, #4]
 80074e6:	bf04      	itt	eq
 80074e8:	1809      	addeq	r1, r1, r0
 80074ea:	6021      	streq	r1, [r4, #0]
 80074ec:	6054      	str	r4, [r2, #4]
 80074ee:	e7ca      	b.n	8007486 <_free_r+0x22>
 80074f0:	bd38      	pop	{r3, r4, r5, pc}
 80074f2:	bf00      	nop
 80074f4:	2000ab98 	.word	0x2000ab98

080074f8 <sbrk_aligned>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	4e0f      	ldr	r6, [pc, #60]	@ (8007538 <sbrk_aligned+0x40>)
 80074fc:	460c      	mov	r4, r1
 80074fe:	6831      	ldr	r1, [r6, #0]
 8007500:	4605      	mov	r5, r0
 8007502:	b911      	cbnz	r1, 800750a <sbrk_aligned+0x12>
 8007504:	f000 fba6 	bl	8007c54 <_sbrk_r>
 8007508:	6030      	str	r0, [r6, #0]
 800750a:	4621      	mov	r1, r4
 800750c:	4628      	mov	r0, r5
 800750e:	f000 fba1 	bl	8007c54 <_sbrk_r>
 8007512:	1c43      	adds	r3, r0, #1
 8007514:	d103      	bne.n	800751e <sbrk_aligned+0x26>
 8007516:	f04f 34ff 	mov.w	r4, #4294967295
 800751a:	4620      	mov	r0, r4
 800751c:	bd70      	pop	{r4, r5, r6, pc}
 800751e:	1cc4      	adds	r4, r0, #3
 8007520:	f024 0403 	bic.w	r4, r4, #3
 8007524:	42a0      	cmp	r0, r4
 8007526:	d0f8      	beq.n	800751a <sbrk_aligned+0x22>
 8007528:	1a21      	subs	r1, r4, r0
 800752a:	4628      	mov	r0, r5
 800752c:	f000 fb92 	bl	8007c54 <_sbrk_r>
 8007530:	3001      	adds	r0, #1
 8007532:	d1f2      	bne.n	800751a <sbrk_aligned+0x22>
 8007534:	e7ef      	b.n	8007516 <sbrk_aligned+0x1e>
 8007536:	bf00      	nop
 8007538:	2000ab94 	.word	0x2000ab94

0800753c <_malloc_r>:
 800753c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007540:	1ccd      	adds	r5, r1, #3
 8007542:	f025 0503 	bic.w	r5, r5, #3
 8007546:	3508      	adds	r5, #8
 8007548:	2d0c      	cmp	r5, #12
 800754a:	bf38      	it	cc
 800754c:	250c      	movcc	r5, #12
 800754e:	2d00      	cmp	r5, #0
 8007550:	4606      	mov	r6, r0
 8007552:	db01      	blt.n	8007558 <_malloc_r+0x1c>
 8007554:	42a9      	cmp	r1, r5
 8007556:	d904      	bls.n	8007562 <_malloc_r+0x26>
 8007558:	230c      	movs	r3, #12
 800755a:	6033      	str	r3, [r6, #0]
 800755c:	2000      	movs	r0, #0
 800755e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007562:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007638 <_malloc_r+0xfc>
 8007566:	f000 f869 	bl	800763c <__malloc_lock>
 800756a:	f8d8 3000 	ldr.w	r3, [r8]
 800756e:	461c      	mov	r4, r3
 8007570:	bb44      	cbnz	r4, 80075c4 <_malloc_r+0x88>
 8007572:	4629      	mov	r1, r5
 8007574:	4630      	mov	r0, r6
 8007576:	f7ff ffbf 	bl	80074f8 <sbrk_aligned>
 800757a:	1c43      	adds	r3, r0, #1
 800757c:	4604      	mov	r4, r0
 800757e:	d158      	bne.n	8007632 <_malloc_r+0xf6>
 8007580:	f8d8 4000 	ldr.w	r4, [r8]
 8007584:	4627      	mov	r7, r4
 8007586:	2f00      	cmp	r7, #0
 8007588:	d143      	bne.n	8007612 <_malloc_r+0xd6>
 800758a:	2c00      	cmp	r4, #0
 800758c:	d04b      	beq.n	8007626 <_malloc_r+0xea>
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	4639      	mov	r1, r7
 8007592:	4630      	mov	r0, r6
 8007594:	eb04 0903 	add.w	r9, r4, r3
 8007598:	f000 fb5c 	bl	8007c54 <_sbrk_r>
 800759c:	4581      	cmp	r9, r0
 800759e:	d142      	bne.n	8007626 <_malloc_r+0xea>
 80075a0:	6821      	ldr	r1, [r4, #0]
 80075a2:	1a6d      	subs	r5, r5, r1
 80075a4:	4629      	mov	r1, r5
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7ff ffa6 	bl	80074f8 <sbrk_aligned>
 80075ac:	3001      	adds	r0, #1
 80075ae:	d03a      	beq.n	8007626 <_malloc_r+0xea>
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	442b      	add	r3, r5
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	f8d8 3000 	ldr.w	r3, [r8]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	bb62      	cbnz	r2, 8007618 <_malloc_r+0xdc>
 80075be:	f8c8 7000 	str.w	r7, [r8]
 80075c2:	e00f      	b.n	80075e4 <_malloc_r+0xa8>
 80075c4:	6822      	ldr	r2, [r4, #0]
 80075c6:	1b52      	subs	r2, r2, r5
 80075c8:	d420      	bmi.n	800760c <_malloc_r+0xd0>
 80075ca:	2a0b      	cmp	r2, #11
 80075cc:	d917      	bls.n	80075fe <_malloc_r+0xc2>
 80075ce:	1961      	adds	r1, r4, r5
 80075d0:	42a3      	cmp	r3, r4
 80075d2:	6025      	str	r5, [r4, #0]
 80075d4:	bf18      	it	ne
 80075d6:	6059      	strne	r1, [r3, #4]
 80075d8:	6863      	ldr	r3, [r4, #4]
 80075da:	bf08      	it	eq
 80075dc:	f8c8 1000 	streq.w	r1, [r8]
 80075e0:	5162      	str	r2, [r4, r5]
 80075e2:	604b      	str	r3, [r1, #4]
 80075e4:	4630      	mov	r0, r6
 80075e6:	f000 f82f 	bl	8007648 <__malloc_unlock>
 80075ea:	f104 000b 	add.w	r0, r4, #11
 80075ee:	1d23      	adds	r3, r4, #4
 80075f0:	f020 0007 	bic.w	r0, r0, #7
 80075f4:	1ac2      	subs	r2, r0, r3
 80075f6:	bf1c      	itt	ne
 80075f8:	1a1b      	subne	r3, r3, r0
 80075fa:	50a3      	strne	r3, [r4, r2]
 80075fc:	e7af      	b.n	800755e <_malloc_r+0x22>
 80075fe:	6862      	ldr	r2, [r4, #4]
 8007600:	42a3      	cmp	r3, r4
 8007602:	bf0c      	ite	eq
 8007604:	f8c8 2000 	streq.w	r2, [r8]
 8007608:	605a      	strne	r2, [r3, #4]
 800760a:	e7eb      	b.n	80075e4 <_malloc_r+0xa8>
 800760c:	4623      	mov	r3, r4
 800760e:	6864      	ldr	r4, [r4, #4]
 8007610:	e7ae      	b.n	8007570 <_malloc_r+0x34>
 8007612:	463c      	mov	r4, r7
 8007614:	687f      	ldr	r7, [r7, #4]
 8007616:	e7b6      	b.n	8007586 <_malloc_r+0x4a>
 8007618:	461a      	mov	r2, r3
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	42a3      	cmp	r3, r4
 800761e:	d1fb      	bne.n	8007618 <_malloc_r+0xdc>
 8007620:	2300      	movs	r3, #0
 8007622:	6053      	str	r3, [r2, #4]
 8007624:	e7de      	b.n	80075e4 <_malloc_r+0xa8>
 8007626:	230c      	movs	r3, #12
 8007628:	6033      	str	r3, [r6, #0]
 800762a:	4630      	mov	r0, r6
 800762c:	f000 f80c 	bl	8007648 <__malloc_unlock>
 8007630:	e794      	b.n	800755c <_malloc_r+0x20>
 8007632:	6005      	str	r5, [r0, #0]
 8007634:	e7d6      	b.n	80075e4 <_malloc_r+0xa8>
 8007636:	bf00      	nop
 8007638:	2000ab98 	.word	0x2000ab98

0800763c <__malloc_lock>:
 800763c:	4801      	ldr	r0, [pc, #4]	@ (8007644 <__malloc_lock+0x8>)
 800763e:	f7ff bf01 	b.w	8007444 <__retarget_lock_acquire_recursive>
 8007642:	bf00      	nop
 8007644:	2000ab90 	.word	0x2000ab90

08007648 <__malloc_unlock>:
 8007648:	4801      	ldr	r0, [pc, #4]	@ (8007650 <__malloc_unlock+0x8>)
 800764a:	f7ff befc 	b.w	8007446 <__retarget_lock_release_recursive>
 800764e:	bf00      	nop
 8007650:	2000ab90 	.word	0x2000ab90

08007654 <__ssputs_r>:
 8007654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	688e      	ldr	r6, [r1, #8]
 800765a:	461f      	mov	r7, r3
 800765c:	42be      	cmp	r6, r7
 800765e:	680b      	ldr	r3, [r1, #0]
 8007660:	4682      	mov	sl, r0
 8007662:	460c      	mov	r4, r1
 8007664:	4690      	mov	r8, r2
 8007666:	d82d      	bhi.n	80076c4 <__ssputs_r+0x70>
 8007668:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800766c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007670:	d026      	beq.n	80076c0 <__ssputs_r+0x6c>
 8007672:	6965      	ldr	r5, [r4, #20]
 8007674:	6909      	ldr	r1, [r1, #16]
 8007676:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800767a:	eba3 0901 	sub.w	r9, r3, r1
 800767e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007682:	1c7b      	adds	r3, r7, #1
 8007684:	444b      	add	r3, r9
 8007686:	106d      	asrs	r5, r5, #1
 8007688:	429d      	cmp	r5, r3
 800768a:	bf38      	it	cc
 800768c:	461d      	movcc	r5, r3
 800768e:	0553      	lsls	r3, r2, #21
 8007690:	d527      	bpl.n	80076e2 <__ssputs_r+0x8e>
 8007692:	4629      	mov	r1, r5
 8007694:	f7ff ff52 	bl	800753c <_malloc_r>
 8007698:	4606      	mov	r6, r0
 800769a:	b360      	cbz	r0, 80076f6 <__ssputs_r+0xa2>
 800769c:	6921      	ldr	r1, [r4, #16]
 800769e:	464a      	mov	r2, r9
 80076a0:	f7ff fed2 	bl	8007448 <memcpy>
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80076aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ae:	81a3      	strh	r3, [r4, #12]
 80076b0:	6126      	str	r6, [r4, #16]
 80076b2:	6165      	str	r5, [r4, #20]
 80076b4:	444e      	add	r6, r9
 80076b6:	eba5 0509 	sub.w	r5, r5, r9
 80076ba:	6026      	str	r6, [r4, #0]
 80076bc:	60a5      	str	r5, [r4, #8]
 80076be:	463e      	mov	r6, r7
 80076c0:	42be      	cmp	r6, r7
 80076c2:	d900      	bls.n	80076c6 <__ssputs_r+0x72>
 80076c4:	463e      	mov	r6, r7
 80076c6:	6820      	ldr	r0, [r4, #0]
 80076c8:	4632      	mov	r2, r6
 80076ca:	4641      	mov	r1, r8
 80076cc:	f000 faa8 	bl	8007c20 <memmove>
 80076d0:	68a3      	ldr	r3, [r4, #8]
 80076d2:	1b9b      	subs	r3, r3, r6
 80076d4:	60a3      	str	r3, [r4, #8]
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	4433      	add	r3, r6
 80076da:	6023      	str	r3, [r4, #0]
 80076dc:	2000      	movs	r0, #0
 80076de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e2:	462a      	mov	r2, r5
 80076e4:	f000 fac6 	bl	8007c74 <_realloc_r>
 80076e8:	4606      	mov	r6, r0
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d1e0      	bne.n	80076b0 <__ssputs_r+0x5c>
 80076ee:	6921      	ldr	r1, [r4, #16]
 80076f0:	4650      	mov	r0, sl
 80076f2:	f7ff feb7 	bl	8007464 <_free_r>
 80076f6:	230c      	movs	r3, #12
 80076f8:	f8ca 3000 	str.w	r3, [sl]
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007702:	81a3      	strh	r3, [r4, #12]
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	e7e9      	b.n	80076de <__ssputs_r+0x8a>
	...

0800770c <_svfiprintf_r>:
 800770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	4698      	mov	r8, r3
 8007712:	898b      	ldrh	r3, [r1, #12]
 8007714:	061b      	lsls	r3, r3, #24
 8007716:	b09d      	sub	sp, #116	@ 0x74
 8007718:	4607      	mov	r7, r0
 800771a:	460d      	mov	r5, r1
 800771c:	4614      	mov	r4, r2
 800771e:	d510      	bpl.n	8007742 <_svfiprintf_r+0x36>
 8007720:	690b      	ldr	r3, [r1, #16]
 8007722:	b973      	cbnz	r3, 8007742 <_svfiprintf_r+0x36>
 8007724:	2140      	movs	r1, #64	@ 0x40
 8007726:	f7ff ff09 	bl	800753c <_malloc_r>
 800772a:	6028      	str	r0, [r5, #0]
 800772c:	6128      	str	r0, [r5, #16]
 800772e:	b930      	cbnz	r0, 800773e <_svfiprintf_r+0x32>
 8007730:	230c      	movs	r3, #12
 8007732:	603b      	str	r3, [r7, #0]
 8007734:	f04f 30ff 	mov.w	r0, #4294967295
 8007738:	b01d      	add	sp, #116	@ 0x74
 800773a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773e:	2340      	movs	r3, #64	@ 0x40
 8007740:	616b      	str	r3, [r5, #20]
 8007742:	2300      	movs	r3, #0
 8007744:	9309      	str	r3, [sp, #36]	@ 0x24
 8007746:	2320      	movs	r3, #32
 8007748:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800774c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007750:	2330      	movs	r3, #48	@ 0x30
 8007752:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80078f0 <_svfiprintf_r+0x1e4>
 8007756:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800775a:	f04f 0901 	mov.w	r9, #1
 800775e:	4623      	mov	r3, r4
 8007760:	469a      	mov	sl, r3
 8007762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007766:	b10a      	cbz	r2, 800776c <_svfiprintf_r+0x60>
 8007768:	2a25      	cmp	r2, #37	@ 0x25
 800776a:	d1f9      	bne.n	8007760 <_svfiprintf_r+0x54>
 800776c:	ebba 0b04 	subs.w	fp, sl, r4
 8007770:	d00b      	beq.n	800778a <_svfiprintf_r+0x7e>
 8007772:	465b      	mov	r3, fp
 8007774:	4622      	mov	r2, r4
 8007776:	4629      	mov	r1, r5
 8007778:	4638      	mov	r0, r7
 800777a:	f7ff ff6b 	bl	8007654 <__ssputs_r>
 800777e:	3001      	adds	r0, #1
 8007780:	f000 80a7 	beq.w	80078d2 <_svfiprintf_r+0x1c6>
 8007784:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007786:	445a      	add	r2, fp
 8007788:	9209      	str	r2, [sp, #36]	@ 0x24
 800778a:	f89a 3000 	ldrb.w	r3, [sl]
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 809f 	beq.w	80078d2 <_svfiprintf_r+0x1c6>
 8007794:	2300      	movs	r3, #0
 8007796:	f04f 32ff 	mov.w	r2, #4294967295
 800779a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800779e:	f10a 0a01 	add.w	sl, sl, #1
 80077a2:	9304      	str	r3, [sp, #16]
 80077a4:	9307      	str	r3, [sp, #28]
 80077a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80077ac:	4654      	mov	r4, sl
 80077ae:	2205      	movs	r2, #5
 80077b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b4:	484e      	ldr	r0, [pc, #312]	@ (80078f0 <_svfiprintf_r+0x1e4>)
 80077b6:	f7f8 fd23 	bl	8000200 <memchr>
 80077ba:	9a04      	ldr	r2, [sp, #16]
 80077bc:	b9d8      	cbnz	r0, 80077f6 <_svfiprintf_r+0xea>
 80077be:	06d0      	lsls	r0, r2, #27
 80077c0:	bf44      	itt	mi
 80077c2:	2320      	movmi	r3, #32
 80077c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077c8:	0711      	lsls	r1, r2, #28
 80077ca:	bf44      	itt	mi
 80077cc:	232b      	movmi	r3, #43	@ 0x2b
 80077ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077d2:	f89a 3000 	ldrb.w	r3, [sl]
 80077d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80077d8:	d015      	beq.n	8007806 <_svfiprintf_r+0xfa>
 80077da:	9a07      	ldr	r2, [sp, #28]
 80077dc:	4654      	mov	r4, sl
 80077de:	2000      	movs	r0, #0
 80077e0:	f04f 0c0a 	mov.w	ip, #10
 80077e4:	4621      	mov	r1, r4
 80077e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ea:	3b30      	subs	r3, #48	@ 0x30
 80077ec:	2b09      	cmp	r3, #9
 80077ee:	d94b      	bls.n	8007888 <_svfiprintf_r+0x17c>
 80077f0:	b1b0      	cbz	r0, 8007820 <_svfiprintf_r+0x114>
 80077f2:	9207      	str	r2, [sp, #28]
 80077f4:	e014      	b.n	8007820 <_svfiprintf_r+0x114>
 80077f6:	eba0 0308 	sub.w	r3, r0, r8
 80077fa:	fa09 f303 	lsl.w	r3, r9, r3
 80077fe:	4313      	orrs	r3, r2
 8007800:	9304      	str	r3, [sp, #16]
 8007802:	46a2      	mov	sl, r4
 8007804:	e7d2      	b.n	80077ac <_svfiprintf_r+0xa0>
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	1d19      	adds	r1, r3, #4
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	9103      	str	r1, [sp, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	bfbb      	ittet	lt
 8007812:	425b      	neglt	r3, r3
 8007814:	f042 0202 	orrlt.w	r2, r2, #2
 8007818:	9307      	strge	r3, [sp, #28]
 800781a:	9307      	strlt	r3, [sp, #28]
 800781c:	bfb8      	it	lt
 800781e:	9204      	strlt	r2, [sp, #16]
 8007820:	7823      	ldrb	r3, [r4, #0]
 8007822:	2b2e      	cmp	r3, #46	@ 0x2e
 8007824:	d10a      	bne.n	800783c <_svfiprintf_r+0x130>
 8007826:	7863      	ldrb	r3, [r4, #1]
 8007828:	2b2a      	cmp	r3, #42	@ 0x2a
 800782a:	d132      	bne.n	8007892 <_svfiprintf_r+0x186>
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	1d1a      	adds	r2, r3, #4
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	9203      	str	r2, [sp, #12]
 8007834:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007838:	3402      	adds	r4, #2
 800783a:	9305      	str	r3, [sp, #20]
 800783c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007900 <_svfiprintf_r+0x1f4>
 8007840:	7821      	ldrb	r1, [r4, #0]
 8007842:	2203      	movs	r2, #3
 8007844:	4650      	mov	r0, sl
 8007846:	f7f8 fcdb 	bl	8000200 <memchr>
 800784a:	b138      	cbz	r0, 800785c <_svfiprintf_r+0x150>
 800784c:	9b04      	ldr	r3, [sp, #16]
 800784e:	eba0 000a 	sub.w	r0, r0, sl
 8007852:	2240      	movs	r2, #64	@ 0x40
 8007854:	4082      	lsls	r2, r0
 8007856:	4313      	orrs	r3, r2
 8007858:	3401      	adds	r4, #1
 800785a:	9304      	str	r3, [sp, #16]
 800785c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007860:	4824      	ldr	r0, [pc, #144]	@ (80078f4 <_svfiprintf_r+0x1e8>)
 8007862:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007866:	2206      	movs	r2, #6
 8007868:	f7f8 fcca 	bl	8000200 <memchr>
 800786c:	2800      	cmp	r0, #0
 800786e:	d036      	beq.n	80078de <_svfiprintf_r+0x1d2>
 8007870:	4b21      	ldr	r3, [pc, #132]	@ (80078f8 <_svfiprintf_r+0x1ec>)
 8007872:	bb1b      	cbnz	r3, 80078bc <_svfiprintf_r+0x1b0>
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	3307      	adds	r3, #7
 8007878:	f023 0307 	bic.w	r3, r3, #7
 800787c:	3308      	adds	r3, #8
 800787e:	9303      	str	r3, [sp, #12]
 8007880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007882:	4433      	add	r3, r6
 8007884:	9309      	str	r3, [sp, #36]	@ 0x24
 8007886:	e76a      	b.n	800775e <_svfiprintf_r+0x52>
 8007888:	fb0c 3202 	mla	r2, ip, r2, r3
 800788c:	460c      	mov	r4, r1
 800788e:	2001      	movs	r0, #1
 8007890:	e7a8      	b.n	80077e4 <_svfiprintf_r+0xd8>
 8007892:	2300      	movs	r3, #0
 8007894:	3401      	adds	r4, #1
 8007896:	9305      	str	r3, [sp, #20]
 8007898:	4619      	mov	r1, r3
 800789a:	f04f 0c0a 	mov.w	ip, #10
 800789e:	4620      	mov	r0, r4
 80078a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078a4:	3a30      	subs	r2, #48	@ 0x30
 80078a6:	2a09      	cmp	r2, #9
 80078a8:	d903      	bls.n	80078b2 <_svfiprintf_r+0x1a6>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0c6      	beq.n	800783c <_svfiprintf_r+0x130>
 80078ae:	9105      	str	r1, [sp, #20]
 80078b0:	e7c4      	b.n	800783c <_svfiprintf_r+0x130>
 80078b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80078b6:	4604      	mov	r4, r0
 80078b8:	2301      	movs	r3, #1
 80078ba:	e7f0      	b.n	800789e <_svfiprintf_r+0x192>
 80078bc:	ab03      	add	r3, sp, #12
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	462a      	mov	r2, r5
 80078c2:	4b0e      	ldr	r3, [pc, #56]	@ (80078fc <_svfiprintf_r+0x1f0>)
 80078c4:	a904      	add	r1, sp, #16
 80078c6:	4638      	mov	r0, r7
 80078c8:	f3af 8000 	nop.w
 80078cc:	1c42      	adds	r2, r0, #1
 80078ce:	4606      	mov	r6, r0
 80078d0:	d1d6      	bne.n	8007880 <_svfiprintf_r+0x174>
 80078d2:	89ab      	ldrh	r3, [r5, #12]
 80078d4:	065b      	lsls	r3, r3, #25
 80078d6:	f53f af2d 	bmi.w	8007734 <_svfiprintf_r+0x28>
 80078da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078dc:	e72c      	b.n	8007738 <_svfiprintf_r+0x2c>
 80078de:	ab03      	add	r3, sp, #12
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	462a      	mov	r2, r5
 80078e4:	4b05      	ldr	r3, [pc, #20]	@ (80078fc <_svfiprintf_r+0x1f0>)
 80078e6:	a904      	add	r1, sp, #16
 80078e8:	4638      	mov	r0, r7
 80078ea:	f000 f879 	bl	80079e0 <_printf_i>
 80078ee:	e7ed      	b.n	80078cc <_svfiprintf_r+0x1c0>
 80078f0:	080082bc 	.word	0x080082bc
 80078f4:	080082c6 	.word	0x080082c6
 80078f8:	00000000 	.word	0x00000000
 80078fc:	08007655 	.word	0x08007655
 8007900:	080082c2 	.word	0x080082c2

08007904 <_printf_common>:
 8007904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007908:	4616      	mov	r6, r2
 800790a:	4698      	mov	r8, r3
 800790c:	688a      	ldr	r2, [r1, #8]
 800790e:	690b      	ldr	r3, [r1, #16]
 8007910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007914:	4293      	cmp	r3, r2
 8007916:	bfb8      	it	lt
 8007918:	4613      	movlt	r3, r2
 800791a:	6033      	str	r3, [r6, #0]
 800791c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007920:	4607      	mov	r7, r0
 8007922:	460c      	mov	r4, r1
 8007924:	b10a      	cbz	r2, 800792a <_printf_common+0x26>
 8007926:	3301      	adds	r3, #1
 8007928:	6033      	str	r3, [r6, #0]
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	0699      	lsls	r1, r3, #26
 800792e:	bf42      	ittt	mi
 8007930:	6833      	ldrmi	r3, [r6, #0]
 8007932:	3302      	addmi	r3, #2
 8007934:	6033      	strmi	r3, [r6, #0]
 8007936:	6825      	ldr	r5, [r4, #0]
 8007938:	f015 0506 	ands.w	r5, r5, #6
 800793c:	d106      	bne.n	800794c <_printf_common+0x48>
 800793e:	f104 0a19 	add.w	sl, r4, #25
 8007942:	68e3      	ldr	r3, [r4, #12]
 8007944:	6832      	ldr	r2, [r6, #0]
 8007946:	1a9b      	subs	r3, r3, r2
 8007948:	42ab      	cmp	r3, r5
 800794a:	dc26      	bgt.n	800799a <_printf_common+0x96>
 800794c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007950:	6822      	ldr	r2, [r4, #0]
 8007952:	3b00      	subs	r3, #0
 8007954:	bf18      	it	ne
 8007956:	2301      	movne	r3, #1
 8007958:	0692      	lsls	r2, r2, #26
 800795a:	d42b      	bmi.n	80079b4 <_printf_common+0xb0>
 800795c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007960:	4641      	mov	r1, r8
 8007962:	4638      	mov	r0, r7
 8007964:	47c8      	blx	r9
 8007966:	3001      	adds	r0, #1
 8007968:	d01e      	beq.n	80079a8 <_printf_common+0xa4>
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	6922      	ldr	r2, [r4, #16]
 800796e:	f003 0306 	and.w	r3, r3, #6
 8007972:	2b04      	cmp	r3, #4
 8007974:	bf02      	ittt	eq
 8007976:	68e5      	ldreq	r5, [r4, #12]
 8007978:	6833      	ldreq	r3, [r6, #0]
 800797a:	1aed      	subeq	r5, r5, r3
 800797c:	68a3      	ldr	r3, [r4, #8]
 800797e:	bf0c      	ite	eq
 8007980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007984:	2500      	movne	r5, #0
 8007986:	4293      	cmp	r3, r2
 8007988:	bfc4      	itt	gt
 800798a:	1a9b      	subgt	r3, r3, r2
 800798c:	18ed      	addgt	r5, r5, r3
 800798e:	2600      	movs	r6, #0
 8007990:	341a      	adds	r4, #26
 8007992:	42b5      	cmp	r5, r6
 8007994:	d11a      	bne.n	80079cc <_printf_common+0xc8>
 8007996:	2000      	movs	r0, #0
 8007998:	e008      	b.n	80079ac <_printf_common+0xa8>
 800799a:	2301      	movs	r3, #1
 800799c:	4652      	mov	r2, sl
 800799e:	4641      	mov	r1, r8
 80079a0:	4638      	mov	r0, r7
 80079a2:	47c8      	blx	r9
 80079a4:	3001      	adds	r0, #1
 80079a6:	d103      	bne.n	80079b0 <_printf_common+0xac>
 80079a8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b0:	3501      	adds	r5, #1
 80079b2:	e7c6      	b.n	8007942 <_printf_common+0x3e>
 80079b4:	18e1      	adds	r1, r4, r3
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	2030      	movs	r0, #48	@ 0x30
 80079ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079be:	4422      	add	r2, r4
 80079c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079c8:	3302      	adds	r3, #2
 80079ca:	e7c7      	b.n	800795c <_printf_common+0x58>
 80079cc:	2301      	movs	r3, #1
 80079ce:	4622      	mov	r2, r4
 80079d0:	4641      	mov	r1, r8
 80079d2:	4638      	mov	r0, r7
 80079d4:	47c8      	blx	r9
 80079d6:	3001      	adds	r0, #1
 80079d8:	d0e6      	beq.n	80079a8 <_printf_common+0xa4>
 80079da:	3601      	adds	r6, #1
 80079dc:	e7d9      	b.n	8007992 <_printf_common+0x8e>
	...

080079e0 <_printf_i>:
 80079e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079e4:	7e0f      	ldrb	r7, [r1, #24]
 80079e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079e8:	2f78      	cmp	r7, #120	@ 0x78
 80079ea:	4691      	mov	r9, r2
 80079ec:	4680      	mov	r8, r0
 80079ee:	460c      	mov	r4, r1
 80079f0:	469a      	mov	sl, r3
 80079f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079f6:	d807      	bhi.n	8007a08 <_printf_i+0x28>
 80079f8:	2f62      	cmp	r7, #98	@ 0x62
 80079fa:	d80a      	bhi.n	8007a12 <_printf_i+0x32>
 80079fc:	2f00      	cmp	r7, #0
 80079fe:	f000 80d2 	beq.w	8007ba6 <_printf_i+0x1c6>
 8007a02:	2f58      	cmp	r7, #88	@ 0x58
 8007a04:	f000 80b9 	beq.w	8007b7a <_printf_i+0x19a>
 8007a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a10:	e03a      	b.n	8007a88 <_printf_i+0xa8>
 8007a12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a16:	2b15      	cmp	r3, #21
 8007a18:	d8f6      	bhi.n	8007a08 <_printf_i+0x28>
 8007a1a:	a101      	add	r1, pc, #4	@ (adr r1, 8007a20 <_printf_i+0x40>)
 8007a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a20:	08007a79 	.word	0x08007a79
 8007a24:	08007a8d 	.word	0x08007a8d
 8007a28:	08007a09 	.word	0x08007a09
 8007a2c:	08007a09 	.word	0x08007a09
 8007a30:	08007a09 	.word	0x08007a09
 8007a34:	08007a09 	.word	0x08007a09
 8007a38:	08007a8d 	.word	0x08007a8d
 8007a3c:	08007a09 	.word	0x08007a09
 8007a40:	08007a09 	.word	0x08007a09
 8007a44:	08007a09 	.word	0x08007a09
 8007a48:	08007a09 	.word	0x08007a09
 8007a4c:	08007b8d 	.word	0x08007b8d
 8007a50:	08007ab7 	.word	0x08007ab7
 8007a54:	08007b47 	.word	0x08007b47
 8007a58:	08007a09 	.word	0x08007a09
 8007a5c:	08007a09 	.word	0x08007a09
 8007a60:	08007baf 	.word	0x08007baf
 8007a64:	08007a09 	.word	0x08007a09
 8007a68:	08007ab7 	.word	0x08007ab7
 8007a6c:	08007a09 	.word	0x08007a09
 8007a70:	08007a09 	.word	0x08007a09
 8007a74:	08007b4f 	.word	0x08007b4f
 8007a78:	6833      	ldr	r3, [r6, #0]
 8007a7a:	1d1a      	adds	r2, r3, #4
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6032      	str	r2, [r6, #0]
 8007a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e09d      	b.n	8007bc8 <_printf_i+0x1e8>
 8007a8c:	6833      	ldr	r3, [r6, #0]
 8007a8e:	6820      	ldr	r0, [r4, #0]
 8007a90:	1d19      	adds	r1, r3, #4
 8007a92:	6031      	str	r1, [r6, #0]
 8007a94:	0606      	lsls	r6, r0, #24
 8007a96:	d501      	bpl.n	8007a9c <_printf_i+0xbc>
 8007a98:	681d      	ldr	r5, [r3, #0]
 8007a9a:	e003      	b.n	8007aa4 <_printf_i+0xc4>
 8007a9c:	0645      	lsls	r5, r0, #25
 8007a9e:	d5fb      	bpl.n	8007a98 <_printf_i+0xb8>
 8007aa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007aa4:	2d00      	cmp	r5, #0
 8007aa6:	da03      	bge.n	8007ab0 <_printf_i+0xd0>
 8007aa8:	232d      	movs	r3, #45	@ 0x2d
 8007aaa:	426d      	negs	r5, r5
 8007aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ab0:	4859      	ldr	r0, [pc, #356]	@ (8007c18 <_printf_i+0x238>)
 8007ab2:	230a      	movs	r3, #10
 8007ab4:	e011      	b.n	8007ada <_printf_i+0xfa>
 8007ab6:	6821      	ldr	r1, [r4, #0]
 8007ab8:	6833      	ldr	r3, [r6, #0]
 8007aba:	0608      	lsls	r0, r1, #24
 8007abc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ac0:	d402      	bmi.n	8007ac8 <_printf_i+0xe8>
 8007ac2:	0649      	lsls	r1, r1, #25
 8007ac4:	bf48      	it	mi
 8007ac6:	b2ad      	uxthmi	r5, r5
 8007ac8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007aca:	4853      	ldr	r0, [pc, #332]	@ (8007c18 <_printf_i+0x238>)
 8007acc:	6033      	str	r3, [r6, #0]
 8007ace:	bf14      	ite	ne
 8007ad0:	230a      	movne	r3, #10
 8007ad2:	2308      	moveq	r3, #8
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ada:	6866      	ldr	r6, [r4, #4]
 8007adc:	60a6      	str	r6, [r4, #8]
 8007ade:	2e00      	cmp	r6, #0
 8007ae0:	bfa2      	ittt	ge
 8007ae2:	6821      	ldrge	r1, [r4, #0]
 8007ae4:	f021 0104 	bicge.w	r1, r1, #4
 8007ae8:	6021      	strge	r1, [r4, #0]
 8007aea:	b90d      	cbnz	r5, 8007af0 <_printf_i+0x110>
 8007aec:	2e00      	cmp	r6, #0
 8007aee:	d04b      	beq.n	8007b88 <_printf_i+0x1a8>
 8007af0:	4616      	mov	r6, r2
 8007af2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007af6:	fb03 5711 	mls	r7, r3, r1, r5
 8007afa:	5dc7      	ldrb	r7, [r0, r7]
 8007afc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b00:	462f      	mov	r7, r5
 8007b02:	42bb      	cmp	r3, r7
 8007b04:	460d      	mov	r5, r1
 8007b06:	d9f4      	bls.n	8007af2 <_printf_i+0x112>
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d10b      	bne.n	8007b24 <_printf_i+0x144>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	07df      	lsls	r7, r3, #31
 8007b10:	d508      	bpl.n	8007b24 <_printf_i+0x144>
 8007b12:	6923      	ldr	r3, [r4, #16]
 8007b14:	6861      	ldr	r1, [r4, #4]
 8007b16:	4299      	cmp	r1, r3
 8007b18:	bfde      	ittt	le
 8007b1a:	2330      	movle	r3, #48	@ 0x30
 8007b1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b24:	1b92      	subs	r2, r2, r6
 8007b26:	6122      	str	r2, [r4, #16]
 8007b28:	f8cd a000 	str.w	sl, [sp]
 8007b2c:	464b      	mov	r3, r9
 8007b2e:	aa03      	add	r2, sp, #12
 8007b30:	4621      	mov	r1, r4
 8007b32:	4640      	mov	r0, r8
 8007b34:	f7ff fee6 	bl	8007904 <_printf_common>
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d14a      	bne.n	8007bd2 <_printf_i+0x1f2>
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b40:	b004      	add	sp, #16
 8007b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	f043 0320 	orr.w	r3, r3, #32
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	4833      	ldr	r0, [pc, #204]	@ (8007c1c <_printf_i+0x23c>)
 8007b50:	2778      	movs	r7, #120	@ 0x78
 8007b52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	6831      	ldr	r1, [r6, #0]
 8007b5a:	061f      	lsls	r7, r3, #24
 8007b5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b60:	d402      	bmi.n	8007b68 <_printf_i+0x188>
 8007b62:	065f      	lsls	r7, r3, #25
 8007b64:	bf48      	it	mi
 8007b66:	b2ad      	uxthmi	r5, r5
 8007b68:	6031      	str	r1, [r6, #0]
 8007b6a:	07d9      	lsls	r1, r3, #31
 8007b6c:	bf44      	itt	mi
 8007b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8007b72:	6023      	strmi	r3, [r4, #0]
 8007b74:	b11d      	cbz	r5, 8007b7e <_printf_i+0x19e>
 8007b76:	2310      	movs	r3, #16
 8007b78:	e7ac      	b.n	8007ad4 <_printf_i+0xf4>
 8007b7a:	4827      	ldr	r0, [pc, #156]	@ (8007c18 <_printf_i+0x238>)
 8007b7c:	e7e9      	b.n	8007b52 <_printf_i+0x172>
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	f023 0320 	bic.w	r3, r3, #32
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	e7f6      	b.n	8007b76 <_printf_i+0x196>
 8007b88:	4616      	mov	r6, r2
 8007b8a:	e7bd      	b.n	8007b08 <_printf_i+0x128>
 8007b8c:	6833      	ldr	r3, [r6, #0]
 8007b8e:	6825      	ldr	r5, [r4, #0]
 8007b90:	6961      	ldr	r1, [r4, #20]
 8007b92:	1d18      	adds	r0, r3, #4
 8007b94:	6030      	str	r0, [r6, #0]
 8007b96:	062e      	lsls	r6, r5, #24
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	d501      	bpl.n	8007ba0 <_printf_i+0x1c0>
 8007b9c:	6019      	str	r1, [r3, #0]
 8007b9e:	e002      	b.n	8007ba6 <_printf_i+0x1c6>
 8007ba0:	0668      	lsls	r0, r5, #25
 8007ba2:	d5fb      	bpl.n	8007b9c <_printf_i+0x1bc>
 8007ba4:	8019      	strh	r1, [r3, #0]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	6123      	str	r3, [r4, #16]
 8007baa:	4616      	mov	r6, r2
 8007bac:	e7bc      	b.n	8007b28 <_printf_i+0x148>
 8007bae:	6833      	ldr	r3, [r6, #0]
 8007bb0:	1d1a      	adds	r2, r3, #4
 8007bb2:	6032      	str	r2, [r6, #0]
 8007bb4:	681e      	ldr	r6, [r3, #0]
 8007bb6:	6862      	ldr	r2, [r4, #4]
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f7f8 fb20 	bl	8000200 <memchr>
 8007bc0:	b108      	cbz	r0, 8007bc6 <_printf_i+0x1e6>
 8007bc2:	1b80      	subs	r0, r0, r6
 8007bc4:	6060      	str	r0, [r4, #4]
 8007bc6:	6863      	ldr	r3, [r4, #4]
 8007bc8:	6123      	str	r3, [r4, #16]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bd0:	e7aa      	b.n	8007b28 <_printf_i+0x148>
 8007bd2:	6923      	ldr	r3, [r4, #16]
 8007bd4:	4632      	mov	r2, r6
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	4640      	mov	r0, r8
 8007bda:	47d0      	blx	sl
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d0ad      	beq.n	8007b3c <_printf_i+0x15c>
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	079b      	lsls	r3, r3, #30
 8007be4:	d413      	bmi.n	8007c0e <_printf_i+0x22e>
 8007be6:	68e0      	ldr	r0, [r4, #12]
 8007be8:	9b03      	ldr	r3, [sp, #12]
 8007bea:	4298      	cmp	r0, r3
 8007bec:	bfb8      	it	lt
 8007bee:	4618      	movlt	r0, r3
 8007bf0:	e7a6      	b.n	8007b40 <_printf_i+0x160>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	4632      	mov	r2, r6
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	4640      	mov	r0, r8
 8007bfa:	47d0      	blx	sl
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d09d      	beq.n	8007b3c <_printf_i+0x15c>
 8007c00:	3501      	adds	r5, #1
 8007c02:	68e3      	ldr	r3, [r4, #12]
 8007c04:	9903      	ldr	r1, [sp, #12]
 8007c06:	1a5b      	subs	r3, r3, r1
 8007c08:	42ab      	cmp	r3, r5
 8007c0a:	dcf2      	bgt.n	8007bf2 <_printf_i+0x212>
 8007c0c:	e7eb      	b.n	8007be6 <_printf_i+0x206>
 8007c0e:	2500      	movs	r5, #0
 8007c10:	f104 0619 	add.w	r6, r4, #25
 8007c14:	e7f5      	b.n	8007c02 <_printf_i+0x222>
 8007c16:	bf00      	nop
 8007c18:	080082cd 	.word	0x080082cd
 8007c1c:	080082de 	.word	0x080082de

08007c20 <memmove>:
 8007c20:	4288      	cmp	r0, r1
 8007c22:	b510      	push	{r4, lr}
 8007c24:	eb01 0402 	add.w	r4, r1, r2
 8007c28:	d902      	bls.n	8007c30 <memmove+0x10>
 8007c2a:	4284      	cmp	r4, r0
 8007c2c:	4623      	mov	r3, r4
 8007c2e:	d807      	bhi.n	8007c40 <memmove+0x20>
 8007c30:	1e43      	subs	r3, r0, #1
 8007c32:	42a1      	cmp	r1, r4
 8007c34:	d008      	beq.n	8007c48 <memmove+0x28>
 8007c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c3e:	e7f8      	b.n	8007c32 <memmove+0x12>
 8007c40:	4402      	add	r2, r0
 8007c42:	4601      	mov	r1, r0
 8007c44:	428a      	cmp	r2, r1
 8007c46:	d100      	bne.n	8007c4a <memmove+0x2a>
 8007c48:	bd10      	pop	{r4, pc}
 8007c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c52:	e7f7      	b.n	8007c44 <memmove+0x24>

08007c54 <_sbrk_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4d06      	ldr	r5, [pc, #24]	@ (8007c70 <_sbrk_r+0x1c>)
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	602b      	str	r3, [r5, #0]
 8007c60:	f7f8 ff44 	bl	8000aec <_sbrk>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_sbrk_r+0x1a>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_sbrk_r+0x1a>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	2000ab8c 	.word	0x2000ab8c

08007c74 <_realloc_r>:
 8007c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c78:	4680      	mov	r8, r0
 8007c7a:	4615      	mov	r5, r2
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	b921      	cbnz	r1, 8007c8a <_realloc_r+0x16>
 8007c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c84:	4611      	mov	r1, r2
 8007c86:	f7ff bc59 	b.w	800753c <_malloc_r>
 8007c8a:	b92a      	cbnz	r2, 8007c98 <_realloc_r+0x24>
 8007c8c:	f7ff fbea 	bl	8007464 <_free_r>
 8007c90:	2400      	movs	r4, #0
 8007c92:	4620      	mov	r0, r4
 8007c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c98:	f000 f81a 	bl	8007cd0 <_malloc_usable_size_r>
 8007c9c:	4285      	cmp	r5, r0
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	d802      	bhi.n	8007ca8 <_realloc_r+0x34>
 8007ca2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007ca6:	d8f4      	bhi.n	8007c92 <_realloc_r+0x1e>
 8007ca8:	4629      	mov	r1, r5
 8007caa:	4640      	mov	r0, r8
 8007cac:	f7ff fc46 	bl	800753c <_malloc_r>
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d0ec      	beq.n	8007c90 <_realloc_r+0x1c>
 8007cb6:	42b5      	cmp	r5, r6
 8007cb8:	462a      	mov	r2, r5
 8007cba:	4621      	mov	r1, r4
 8007cbc:	bf28      	it	cs
 8007cbe:	4632      	movcs	r2, r6
 8007cc0:	f7ff fbc2 	bl	8007448 <memcpy>
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	f7ff fbcc 	bl	8007464 <_free_r>
 8007ccc:	463c      	mov	r4, r7
 8007cce:	e7e0      	b.n	8007c92 <_realloc_r+0x1e>

08007cd0 <_malloc_usable_size_r>:
 8007cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cd4:	1f18      	subs	r0, r3, #4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	bfbc      	itt	lt
 8007cda:	580b      	ldrlt	r3, [r1, r0]
 8007cdc:	18c0      	addlt	r0, r0, r3
 8007cde:	4770      	bx	lr

08007ce0 <_init>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	bf00      	nop
 8007ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce6:	bc08      	pop	{r3}
 8007ce8:	469e      	mov	lr, r3
 8007cea:	4770      	bx	lr

08007cec <_fini>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	bf00      	nop
 8007cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf2:	bc08      	pop	{r3}
 8007cf4:	469e      	mov	lr, r3
 8007cf6:	4770      	bx	lr
