
STM32L431RBT6TR_Template_Repository.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005990  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005b20  08005b20  00006b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba8  08005ba8  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  08005ba8  08005ba8  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ba8  08005ba8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ba8  08005ba8  00006ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bac  08005bac  00006bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005bb0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aae4  20000060  08005c10  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ab44  08005c10  00007b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d7a  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a68  00000000  00000000  0001de0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  00021878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e4  00000000  00000000  00022e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255e9  00000000  00000000  00023f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001803d  00000000  00000000  00049555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df074  00000000  00000000  00061592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140606  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005de8  00000000  00000000  0014064c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00146434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b08 	.word	0x08005b08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005b08 	.word	0x08005b08

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	@ (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	@ (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	22c0      	movs	r2, #192	@ 0xc0
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	2000011c 	.word	0x2000011c

08000204 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	4a07      	ldr	r2, [pc, #28]	@ (8000230 <vApplicationGetTimerTaskMemory+0x2c>)
 8000214:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	4a06      	ldr	r2, [pc, #24]	@ (8000234 <vApplicationGetTimerTaskMemory+0x30>)
 800021a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000222:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000224:	bf00      	nop
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	2000041c 	.word	0x2000041c
 8000234:	200004bc 	.word	0x200004bc

08000238 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f043 0201 	orr.w	r2, r3, #1
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	601a      	str	r2, [r3, #0]
}
 800024c:	bf00      	nop
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr

08000258 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	609a      	str	r2, [r3, #8]
}
 8000278:	bf00      	nop
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr

08000284 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800028c:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800028e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000290:	4907      	ldr	r1, [pc, #28]	@ (80002b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4313      	orrs	r3, r2
 8000296:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000298:	4b05      	ldr	r3, [pc, #20]	@ (80002b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800029a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	4013      	ands	r3, r2
 80002a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002a2:	68fb      	ldr	r3, [r7, #12]
}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	40021000 	.word	0x40021000

080002b4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80002bc:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80002c0:	4907      	ldr	r1, [pc, #28]	@ (80002e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4313      	orrs	r3, r2
 80002c6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80002c8:	4b05      	ldr	r3, [pc, #20]	@ (80002e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4013      	ands	r3, r2
 80002d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002d2:	68fb      	ldr	r3, [r7, #12]
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	40021000 	.word	0x40021000

080002e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e4:	b5b0      	push	{r4, r5, r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ea:	f000 fa42 	bl	8000772 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ee:	f000 f81f 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f2:	f000 f8ef 	bl	80004d4 <MX_GPIO_Init>
  MX_CRC_Init();
 80002f6:	f000 f861 	bl	80003bc <MX_CRC_Init>
  MX_USART1_UART_Init();
 80002fa:	f000 f881 	bl	8000400 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 192);
 80002fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000328 <main+0x44>)
 8000300:	1d3c      	adds	r4, r7, #4
 8000302:	461d      	mov	r5, r3
 8000304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000308:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800030c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f002 fe34 	bl	8002f82 <osThreadCreate>
 800031a:	4603      	mov	r3, r0
 800031c:	4a03      	ldr	r2, [pc, #12]	@ (800032c <main+0x48>)
 800031e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000320:	f002 fe28 	bl	8002f74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000324:	bf00      	nop
 8000326:	e7fd      	b.n	8000324 <main+0x40>
 8000328:	08005b2c 	.word	0x08005b2c
 800032c:	20000ae0 	.word	0x20000ae0

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b096      	sub	sp, #88	@ 0x58
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	2244      	movs	r2, #68	@ 0x44
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f005 fafa 	bl	8005938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	463b      	mov	r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000352:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000356:	f000 fc27 	bl	8000ba8 <HAL_PWREx_ControlVoltageScaling>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000360:	f000 f8ea 	bl	8000538 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000364:	2310      	movs	r3, #16
 8000366:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000368:	2301      	movs	r3, #1
 800036a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000370:	2360      	movs	r3, #96	@ 0x60
 8000372:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000374:	2300      	movs	r3, #0
 8000376:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0314 	add.w	r3, r7, #20
 800037c:	4618      	mov	r0, r3
 800037e:	f000 fc69 	bl	8000c54 <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000388:	f000 f8d6 	bl	8000538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	230f      	movs	r3, #15
 800038e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000390:	2300      	movs	r3, #0
 8000392:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a0:	463b      	mov	r3, r7
 80003a2:	2100      	movs	r1, #0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f001 f869 	bl	800147c <HAL_RCC_ClockConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003b0:	f000 f8c2 	bl	8000538 <Error_Handler>
  }
}
 80003b4:	bf00      	nop
 80003b6:	3758      	adds	r7, #88	@ 0x58
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80003c0:	4b0d      	ldr	r3, [pc, #52]	@ (80003f8 <MX_CRC_Init+0x3c>)
 80003c2:	4a0e      	ldr	r2, [pc, #56]	@ (80003fc <MX_CRC_Init+0x40>)
 80003c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80003c6:	4b0c      	ldr	r3, [pc, #48]	@ (80003f8 <MX_CRC_Init+0x3c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80003cc:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <MX_CRC_Init+0x3c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80003d2:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <MX_CRC_Init+0x3c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80003d8:	4b07      	ldr	r3, [pc, #28]	@ (80003f8 <MX_CRC_Init+0x3c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80003de:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <MX_CRC_Init+0x3c>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80003e4:	4804      	ldr	r0, [pc, #16]	@ (80003f8 <MX_CRC_Init+0x3c>)
 80003e6:	f000 fadf 	bl	80009a8 <HAL_CRC_Init>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80003f0:	f000 f8a2 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000abc 	.word	0x20000abc
 80003fc:	40023000 	.word	0x40023000

08000400 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b0a4      	sub	sp, #144	@ 0x90
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000406:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]
 8000414:	611a      	str	r2, [r3, #16]
 8000416:	615a      	str	r2, [r3, #20]
 8000418:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]
 800042a:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800042c:	463b      	mov	r3, r7
 800042e:	225c      	movs	r2, #92	@ 0x5c
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f005 fa80 	bl	8005938 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000438:	2301      	movs	r3, #1
 800043a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800043c:	2300      	movs	r3, #0
 800043e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000440:	463b      	mov	r3, r7
 8000442:	4618      	mov	r0, r3
 8000444:	f001 fa5a 	bl	80018fc <HAL_RCCEx_PeriphCLKConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800044e:	f000 f873 	bl	8000538 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000452:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000456:	f7ff ff2d 	bl	80002b4 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800045a:	2001      	movs	r0, #1
 800045c:	f7ff ff12 	bl	8000284 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000460:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000464:	65fb      	str	r3, [r7, #92]	@ 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000466:	2302      	movs	r3, #2
 8000468:	663b      	str	r3, [r7, #96]	@ 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800046a:	2303      	movs	r3, #3
 800046c:	667b      	str	r3, [r7, #100]	@ 0x64
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	66bb      	str	r3, [r7, #104]	@ 0x68
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000472:	2300      	movs	r3, #0
 8000474:	66fb      	str	r3, [r7, #108]	@ 0x6c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000476:	2307      	movs	r3, #7
 8000478:	673b      	str	r3, [r7, #112]	@ 0x70
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800047e:	4619      	mov	r1, r3
 8000480:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000484:	f002 f903 	bl	800268e <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000488:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800048c:	677b      	str	r3, [r7, #116]	@ 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800048e:	2300      	movs	r3, #0
 8000490:	67bb      	str	r3, [r7, #120]	@ 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000492:	2300      	movs	r3, #0
 8000494:	67fb      	str	r3, [r7, #124]	@ 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000496:	2300      	movs	r3, #0
 8000498:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800049c:	230c      	movs	r3, #12
 800049e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80004a8:	2300      	movs	r3, #0
 80004aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  LL_USART_Init(USART1, &USART_InitStruct);
 80004ae:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80004b2:	4619      	mov	r1, r3
 80004b4:	4806      	ldr	r0, [pc, #24]	@ (80004d0 <MX_USART1_UART_Init+0xd0>)
 80004b6:	f002 fcdf 	bl	8002e78 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80004ba:	4805      	ldr	r0, [pc, #20]	@ (80004d0 <MX_USART1_UART_Init+0xd0>)
 80004bc:	f7ff fecc 	bl	8000258 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80004c0:	4803      	ldr	r0, [pc, #12]	@ (80004d0 <MX_USART1_UART_Init+0xd0>)
 80004c2:	f7ff feb9 	bl	8000238 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	3790      	adds	r7, #144	@ 0x90
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40013800 	.word	0x40013800

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <MX_GPIO_Init+0x2c>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004de:	4a08      	ldr	r2, [pc, #32]	@ (8000500 <MX_GPIO_Init+0x2c>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004e6:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <MX_GPIO_Init+0x2c>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000

08000504 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f002 fd84 	bl	800301a <osDelay>
 8000512:	e7fb      	b.n	800050c <StartDefaultTask+0x8>

08000514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a04      	ldr	r2, [pc, #16]	@ (8000534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d101      	bne.n	800052a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000526:	f000 f93d 	bl	80007a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40012c00 	.word	0x40012c00

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <Error_Handler+0x8>

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054a:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <HAL_MspInit+0x4c>)
 800054c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800054e:	4a10      	ldr	r2, [pc, #64]	@ (8000590 <HAL_MspInit+0x4c>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6613      	str	r3, [r2, #96]	@ 0x60
 8000556:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <HAL_MspInit+0x4c>)
 8000558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <HAL_MspInit+0x4c>)
 8000564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000566:	4a0a      	ldr	r2, [pc, #40]	@ (8000590 <HAL_MspInit+0x4c>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056c:	6593      	str	r3, [r2, #88]	@ 0x58
 800056e:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <HAL_MspInit+0x4c>)
 8000570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	210f      	movs	r1, #15
 800057e:	f06f 0001 	mvn.w	r0, #1
 8000582:	f000 f9e7 	bl	8000954 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000

08000594 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0a      	ldr	r2, [pc, #40]	@ (80005cc <HAL_CRC_MspInit+0x38>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d10b      	bne.n	80005be <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005a6:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <HAL_CRC_MspInit+0x3c>)
 80005a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005aa:	4a09      	ldr	r2, [pc, #36]	@ (80005d0 <HAL_CRC_MspInit+0x3c>)
 80005ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005b2:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <HAL_CRC_MspInit+0x3c>)
 80005b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40023000 	.word	0x40023000
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	@ 0x30
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005dc:	2300      	movs	r3, #0
 80005de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005e2:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <HAL_InitTick+0xc8>)
 80005e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005e6:	4a2d      	ldr	r2, [pc, #180]	@ (800069c <HAL_InitTick+0xc8>)
 80005e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <HAL_InitTick+0xc8>)
 80005f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005fa:	f107 020c 	add.w	r2, r7, #12
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4611      	mov	r1, r2
 8000604:	4618      	mov	r0, r3
 8000606:	f001 f8e7 	bl	80017d8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800060a:	f001 f8cf 	bl	80017ac <HAL_RCC_GetPCLK2Freq>
 800060e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000612:	4a23      	ldr	r2, [pc, #140]	@ (80006a0 <HAL_InitTick+0xcc>)
 8000614:	fba2 2303 	umull	r2, r3, r2, r3
 8000618:	0c9b      	lsrs	r3, r3, #18
 800061a:	3b01      	subs	r3, #1
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800061e:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <HAL_InitTick+0xd0>)
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <HAL_InitTick+0xd4>)
 8000622:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <HAL_InitTick+0xd0>)
 8000626:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800062a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800062c:	4a1d      	ldr	r2, [pc, #116]	@ (80006a4 <HAL_InitTick+0xd0>)
 800062e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000630:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <HAL_InitTick+0xd0>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000638:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <HAL_InitTick+0xd0>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <HAL_InitTick+0xd0>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000644:	4817      	ldr	r0, [pc, #92]	@ (80006a4 <HAL_InitTick+0xd0>)
 8000646:	f001 fc63 	bl	8001f10 <HAL_TIM_Base_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000650:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000654:	2b00      	cmp	r3, #0
 8000656:	d11b      	bne.n	8000690 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000658:	4812      	ldr	r0, [pc, #72]	@ (80006a4 <HAL_InitTick+0xd0>)
 800065a:	f001 fcbb 	bl	8001fd4 <HAL_TIM_Base_Start_IT>
 800065e:	4603      	mov	r3, r0
 8000660:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000664:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000668:	2b00      	cmp	r3, #0
 800066a:	d111      	bne.n	8000690 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800066c:	2019      	movs	r0, #25
 800066e:	f000 f98d 	bl	800098c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2b0f      	cmp	r3, #15
 8000676:	d808      	bhi.n	800068a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000678:	2200      	movs	r2, #0
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	2019      	movs	r0, #25
 800067e:	f000 f969 	bl	8000954 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000682:	4a0a      	ldr	r2, [pc, #40]	@ (80006ac <HAL_InitTick+0xd8>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	e002      	b.n	8000690 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000690:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000694:	4618      	mov	r0, r3
 8000696:	3730      	adds	r7, #48	@ 0x30
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	431bde83 	.word	0x431bde83
 80006a4:	20000ae4 	.word	0x20000ae4
 80006a8:	40012c00 	.word	0x40012c00
 80006ac:	20000004 	.word	0x20000004

080006b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <NMI_Handler+0x4>

080006b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <HardFault_Handler+0x4>

080006c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <MemManage_Handler+0x4>

080006c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006ec:	4802      	ldr	r0, [pc, #8]	@ (80006f8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80006ee:	f001 fcc5 	bl	800207c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000ae4 	.word	0x20000ae4

080006fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <SystemInit+0x20>)
 8000702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000706:	4a05      	ldr	r2, [pc, #20]	@ (800071c <SystemInit+0x20>)
 8000708:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800070c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000758 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000724:	f7ff ffea 	bl	80006fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000728:	480c      	ldr	r0, [pc, #48]	@ (800075c <LoopForever+0x6>)
  ldr r1, =_edata
 800072a:	490d      	ldr	r1, [pc, #52]	@ (8000760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800072c:	4a0d      	ldr	r2, [pc, #52]	@ (8000764 <LoopForever+0xe>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000730:	e002      	b.n	8000738 <LoopCopyDataInit>

08000732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000736:	3304      	adds	r3, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800073c:	d3f9      	bcc.n	8000732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073e:	4a0a      	ldr	r2, [pc, #40]	@ (8000768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000740:	4c0a      	ldr	r4, [pc, #40]	@ (800076c <LoopForever+0x16>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000744:	e001      	b.n	800074a <LoopFillZerobss>

08000746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000748:	3204      	adds	r2, #4

0800074a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800074c:	d3fb      	bcc.n	8000746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800074e:	f005 f951 	bl	80059f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000752:	f7ff fdc7 	bl	80002e4 <main>

08000756 <LoopForever>:

LoopForever:
    b LoopForever
 8000756:	e7fe      	b.n	8000756 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000758:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000760:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000764:	08005bb0 	.word	0x08005bb0
  ldr r2, =_sbss
 8000768:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800076c:	2000ab44 	.word	0x2000ab44

08000770 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC1_IRQHandler>

08000772 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000778:	2300      	movs	r3, #0
 800077a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800077c:	2003      	movs	r0, #3
 800077e:	f000 f8de 	bl	800093e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000782:	200f      	movs	r0, #15
 8000784:	f7ff ff26 	bl	80005d4 <HAL_InitTick>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	71fb      	strb	r3, [r7, #7]
 8000792:	e001      	b.n	8000798 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000794:	f7ff fed6 	bl	8000544 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000798:	79fb      	ldrb	r3, [r7, #7]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <HAL_IncTick+0x20>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <HAL_IncTick+0x24>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a04      	ldr	r2, [pc, #16]	@ (80007c8 <HAL_IncTick+0x24>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000b30 	.word	0x20000b30

080007cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b03      	ldr	r3, [pc, #12]	@ (80007e0 <HAL_GetTick+0x14>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000b30 	.word	0x20000b30

080007e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800080c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000816:	4a04      	ldr	r2, [pc, #16]	@ (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	60d3      	str	r3, [r2, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000830:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <__NVIC_GetPriorityGrouping+0x18>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	f003 0307 	and.w	r3, r3, #7
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	db0b      	blt.n	8000872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f003 021f 	and.w	r2, r3, #31
 8000860:	4907      	ldr	r1, [pc, #28]	@ (8000880 <__NVIC_EnableIRQ+0x38>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	095b      	lsrs	r3, r3, #5
 8000868:	2001      	movs	r0, #1
 800086a:	fa00 f202 	lsl.w	r2, r0, r2
 800086e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000e100 	.word	0xe000e100

08000884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	db0a      	blt.n	80008ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	490c      	ldr	r1, [pc, #48]	@ (80008d0 <__NVIC_SetPriority+0x4c>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	0112      	lsls	r2, r2, #4
 80008a4:	b2d2      	uxtb	r2, r2
 80008a6:	440b      	add	r3, r1
 80008a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ac:	e00a      	b.n	80008c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4908      	ldr	r1, [pc, #32]	@ (80008d4 <__NVIC_SetPriority+0x50>)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	f003 030f 	and.w	r3, r3, #15
 80008ba:	3b04      	subs	r3, #4
 80008bc:	0112      	lsls	r2, r2, #4
 80008be:	b2d2      	uxtb	r2, r2
 80008c0:	440b      	add	r3, r1
 80008c2:	761a      	strb	r2, [r3, #24]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000e100 	.word	0xe000e100
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b089      	sub	sp, #36	@ 0x24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f1c3 0307 	rsb	r3, r3, #7
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	bf28      	it	cs
 80008f6:	2304      	movcs	r3, #4
 80008f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3304      	adds	r3, #4
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d902      	bls.n	8000908 <NVIC_EncodePriority+0x30>
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3b03      	subs	r3, #3
 8000906:	e000      	b.n	800090a <NVIC_EncodePriority+0x32>
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	f04f 32ff 	mov.w	r2, #4294967295
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43da      	mvns	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	401a      	ands	r2, r3
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000920:	f04f 31ff 	mov.w	r1, #4294967295
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43d9      	mvns	r1, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	4313      	orrs	r3, r2
         );
}
 8000932:	4618      	mov	r0, r3
 8000934:	3724      	adds	r7, #36	@ 0x24
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ff4c 	bl	80007e4 <__NVIC_SetPriorityGrouping>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
 8000960:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000966:	f7ff ff61 	bl	800082c <__NVIC_GetPriorityGrouping>
 800096a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	68b9      	ldr	r1, [r7, #8]
 8000970:	6978      	ldr	r0, [r7, #20]
 8000972:	f7ff ffb1 	bl	80008d8 <NVIC_EncodePriority>
 8000976:	4602      	mov	r2, r0
 8000978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097c:	4611      	mov	r1, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff80 	bl	8000884 <__NVIC_SetPriority>
}
 8000984:	bf00      	nop
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff54 	bl	8000848 <__NVIC_EnableIRQ>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d101      	bne.n	80009ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e054      	b.n	8000a64 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	7f5b      	ldrb	r3, [r3, #29]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d105      	bne.n	80009d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff fde2 	bl	8000594 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2202      	movs	r2, #2
 80009d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	791b      	ldrb	r3, [r3, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d10c      	bne.n	80009f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a22      	ldr	r2, [pc, #136]	@ (8000a6c <HAL_CRC_Init+0xc4>)
 80009e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f022 0218 	bic.w	r2, r2, #24
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	e00c      	b.n	8000a12 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6899      	ldr	r1, [r3, #8]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	461a      	mov	r2, r3
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 f834 	bl	8000a70 <HAL_CRCEx_Polynomial_Set>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e028      	b.n	8000a64 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	795b      	ldrb	r3, [r3, #5]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d105      	bne.n	8000a26 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a22:	611a      	str	r2, [r3, #16]
 8000a24:	e004      	b.n	8000a30 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	6912      	ldr	r2, [r2, #16]
 8000a2e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	699a      	ldr	r2, [r3, #24]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	04c11db7 	.word	0x04c11db7

08000a70 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000a80:	231f      	movs	r3, #31
 8000a82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d102      	bne.n	8000a94 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	75fb      	strb	r3, [r7, #23]
 8000a92:	e063      	b.n	8000b5c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000a94:	bf00      	nop
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	613a      	str	r2, [r7, #16]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d009      	beq.n	8000ab4 <HAL_CRCEx_Polynomial_Set+0x44>
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	f003 031f 	and.w	r3, r3, #31
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0f0      	beq.n	8000a96 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b18      	cmp	r3, #24
 8000ab8:	d846      	bhi.n	8000b48 <HAL_CRCEx_Polynomial_Set+0xd8>
 8000aba:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac0 <HAL_CRCEx_Polynomial_Set+0x50>)
 8000abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac0:	08000b4f 	.word	0x08000b4f
 8000ac4:	08000b49 	.word	0x08000b49
 8000ac8:	08000b49 	.word	0x08000b49
 8000acc:	08000b49 	.word	0x08000b49
 8000ad0:	08000b49 	.word	0x08000b49
 8000ad4:	08000b49 	.word	0x08000b49
 8000ad8:	08000b49 	.word	0x08000b49
 8000adc:	08000b49 	.word	0x08000b49
 8000ae0:	08000b3d 	.word	0x08000b3d
 8000ae4:	08000b49 	.word	0x08000b49
 8000ae8:	08000b49 	.word	0x08000b49
 8000aec:	08000b49 	.word	0x08000b49
 8000af0:	08000b49 	.word	0x08000b49
 8000af4:	08000b49 	.word	0x08000b49
 8000af8:	08000b49 	.word	0x08000b49
 8000afc:	08000b49 	.word	0x08000b49
 8000b00:	08000b31 	.word	0x08000b31
 8000b04:	08000b49 	.word	0x08000b49
 8000b08:	08000b49 	.word	0x08000b49
 8000b0c:	08000b49 	.word	0x08000b49
 8000b10:	08000b49 	.word	0x08000b49
 8000b14:	08000b49 	.word	0x08000b49
 8000b18:	08000b49 	.word	0x08000b49
 8000b1c:	08000b49 	.word	0x08000b49
 8000b20:	08000b25 	.word	0x08000b25
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d913      	bls.n	8000b52 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000b2e:	e010      	b.n	8000b52 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	2b07      	cmp	r3, #7
 8000b34:	d90f      	bls.n	8000b56 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000b3a:	e00c      	b.n	8000b56 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	d90b      	bls.n	8000b5a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000b46:	e008      	b.n	8000b5a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	75fb      	strb	r3, [r7, #23]
        break;
 8000b4c:	e006      	b.n	8000b5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000b4e:	bf00      	nop
 8000b50:	e004      	b.n	8000b5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000b52:	bf00      	nop
 8000b54:	e002      	b.n	8000b5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000b56:	bf00      	nop
 8000b58:	e000      	b.n	8000b5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000b5a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d10d      	bne.n	8000b7e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f023 0118 	bic.w	r1, r3, #24
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	371c      	adds	r7, #28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b90:	4b04      	ldr	r3, [pc, #16]	@ (8000ba4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40007000 	.word	0x40007000

08000ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bb6:	d130      	bne.n	8000c1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bb8:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bc4:	d038      	beq.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc6:	4b20      	ldr	r3, [pc, #128]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bce:	4a1e      	ldr	r2, [pc, #120]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2232      	movs	r2, #50	@ 0x32
 8000bdc:	fb02 f303 	mul.w	r3, r2, r3
 8000be0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	0c9b      	lsrs	r3, r3, #18
 8000be8:	3301      	adds	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bec:	e002      	b.n	8000bf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c00:	d102      	bne.n	8000c08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1f2      	bne.n	8000bee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c14:	d110      	bne.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e00f      	b.n	8000c3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c26:	d007      	beq.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c28:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c30:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40007000 	.word	0x40007000
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	431bde83 	.word	0x431bde83

08000c54 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d102      	bne.n	8000c68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	f000 bc02 	b.w	800146c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c68:	4b96      	ldr	r3, [pc, #600]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f003 030c 	and.w	r3, r3, #12
 8000c70:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c72:	4b94      	ldr	r3, [pc, #592]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0310 	and.w	r3, r3, #16
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	f000 80e4 	beq.w	8000e52 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d007      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x4c>
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	2b0c      	cmp	r3, #12
 8000c94:	f040 808b 	bne.w	8000dae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	f040 8087 	bne.w	8000dae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ca0:	4b88      	ldr	r3, [pc, #544]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d005      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x64>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e3d9      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a1a      	ldr	r2, [r3, #32]
 8000cbc:	4b81      	ldr	r3, [pc, #516]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d004      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x7e>
 8000cc8:	4b7e      	ldr	r3, [pc, #504]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cd0:	e005      	b.n	8000cde <HAL_RCC_OscConfig+0x8a>
 8000cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d223      	bcs.n	8000d2a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fda8 	bl	800183c <RCC_SetFlashLatencyFromMSIRange>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e3ba      	b.n	800146c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cf6:	4b73      	ldr	r3, [pc, #460]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a72      	ldr	r2, [pc, #456]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	4b70      	ldr	r3, [pc, #448]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a1b      	ldr	r3, [r3, #32]
 8000d0e:	496d      	ldr	r1, [pc, #436]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d14:	4b6b      	ldr	r3, [pc, #428]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	4968      	ldr	r1, [pc, #416]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d24:	4313      	orrs	r3, r2
 8000d26:	604b      	str	r3, [r1, #4]
 8000d28:	e025      	b.n	8000d76 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d2a:	4b66      	ldr	r3, [pc, #408]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a65      	ldr	r2, [pc, #404]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	4b63      	ldr	r3, [pc, #396]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	4960      	ldr	r1, [pc, #384]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d44:	4313      	orrs	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d48:	4b5e      	ldr	r3, [pc, #376]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	69db      	ldr	r3, [r3, #28]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	495b      	ldr	r1, [pc, #364]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d109      	bne.n	8000d76 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fd68 	bl	800183c <RCC_SetFlashLatencyFromMSIRange>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e37a      	b.n	800146c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d76:	f000 fc81 	bl	800167c <HAL_RCC_GetSysClockFreq>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	4b51      	ldr	r3, [pc, #324]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	091b      	lsrs	r3, r3, #4
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	4950      	ldr	r1, [pc, #320]	@ (8000ec8 <HAL_RCC_OscConfig+0x274>)
 8000d88:	5ccb      	ldrb	r3, [r1, r3]
 8000d8a:	f003 031f 	and.w	r3, r3, #31
 8000d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d92:	4a4e      	ldr	r2, [pc, #312]	@ (8000ecc <HAL_RCC_OscConfig+0x278>)
 8000d94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d96:	4b4e      	ldr	r3, [pc, #312]	@ (8000ed0 <HAL_RCC_OscConfig+0x27c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fc1a 	bl	80005d4 <HAL_InitTick>
 8000da0:	4603      	mov	r3, r0
 8000da2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d052      	beq.n	8000e50 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	e35e      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d032      	beq.n	8000e1c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000db6:	4b43      	ldr	r3, [pc, #268]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a42      	ldr	r2, [pc, #264]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fd03 	bl	80007cc <HAL_GetTick>
 8000dc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dca:	f7ff fcff 	bl	80007cc <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e347      	b.n	800146c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ddc:	4b39      	ldr	r3, [pc, #228]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f0      	beq.n	8000dca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000de8:	4b36      	ldr	r3, [pc, #216]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a35      	ldr	r2, [pc, #212]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b33      	ldr	r3, [pc, #204]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	4930      	ldr	r1, [pc, #192]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e06:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	492b      	ldr	r1, [pc, #172]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	604b      	str	r3, [r1, #4]
 8000e1a:	e01a      	b.n	8000e52 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a28      	ldr	r2, [pc, #160]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e22:	f023 0301 	bic.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fcd0 	bl	80007cc <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e30:	f7ff fccc 	bl	80007cc <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e314      	b.n	800146c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e42:	4b20      	ldr	r3, [pc, #128]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f0      	bne.n	8000e30 <HAL_RCC_OscConfig+0x1dc>
 8000e4e:	e000      	b.n	8000e52 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d073      	beq.n	8000f46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	2b08      	cmp	r3, #8
 8000e62:	d005      	beq.n	8000e70 <HAL_RCC_OscConfig+0x21c>
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	2b0c      	cmp	r3, #12
 8000e68:	d10e      	bne.n	8000e88 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d10b      	bne.n	8000e88 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d063      	beq.n	8000f44 <HAL_RCC_OscConfig+0x2f0>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d15f      	bne.n	8000f44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e2f1      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e90:	d106      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x24c>
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e025      	b.n	8000eec <HAL_RCC_OscConfig+0x298>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ea8:	d114      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x280>
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	4b03      	ldr	r3, [pc, #12]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a02      	ldr	r2, [pc, #8]	@ (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e013      	b.n	8000eec <HAL_RCC_OscConfig+0x298>
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	08005b60 	.word	0x08005b60
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000004 	.word	0x20000004
 8000ed4:	4ba0      	ldr	r3, [pc, #640]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a9f      	ldr	r2, [pc, #636]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b9d      	ldr	r3, [pc, #628]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a9c      	ldr	r2, [pc, #624]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d013      	beq.n	8000f1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fc6a 	bl	80007cc <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000efc:	f7ff fc66 	bl	80007cc <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b64      	cmp	r3, #100	@ 0x64
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e2ae      	b.n	800146c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f0e:	4b92      	ldr	r3, [pc, #584]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f0      	beq.n	8000efc <HAL_RCC_OscConfig+0x2a8>
 8000f1a:	e014      	b.n	8000f46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fc56 	bl	80007cc <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f24:	f7ff fc52 	bl	80007cc <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b64      	cmp	r3, #100	@ 0x64
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e29a      	b.n	800146c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f36:	4b88      	ldr	r3, [pc, #544]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0x2d0>
 8000f42:	e000      	b.n	8000f46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d060      	beq.n	8001014 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d005      	beq.n	8000f64 <HAL_RCC_OscConfig+0x310>
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2b0c      	cmp	r3, #12
 8000f5c:	d119      	bne.n	8000f92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d116      	bne.n	8000f92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f64:	4b7c      	ldr	r3, [pc, #496]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <HAL_RCC_OscConfig+0x328>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e277      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7c:	4b76      	ldr	r3, [pc, #472]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	061b      	lsls	r3, r3, #24
 8000f8a:	4973      	ldr	r1, [pc, #460]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f90:	e040      	b.n	8001014 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d023      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fc11 	bl	80007cc <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fc0d 	bl	80007cc <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e255      	b.n	800146c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fc0:	4b65      	ldr	r3, [pc, #404]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fcc:	4b62      	ldr	r3, [pc, #392]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	061b      	lsls	r3, r3, #24
 8000fda:	495f      	ldr	r1, [pc, #380]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
 8000fe0:	e018      	b.n	8001014 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a5c      	ldr	r2, [pc, #368]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8000fe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fee:	f7ff fbed 	bl	80007cc <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fbe9 	bl	80007cc <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e231      	b.n	800146c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001008:	4b53      	ldr	r3, [pc, #332]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f0      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b00      	cmp	r3, #0
 800101e:	d03c      	beq.n	800109a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d01c      	beq.n	8001062 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001028:	4b4b      	ldr	r3, [pc, #300]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 800102a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800102e:	4a4a      	ldr	r2, [pc, #296]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001038:	f7ff fbc8 	bl	80007cc <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001040:	f7ff fbc4 	bl	80007cc <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e20c      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001052:	4b41      	ldr	r3, [pc, #260]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8001054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0ef      	beq.n	8001040 <HAL_RCC_OscConfig+0x3ec>
 8001060:	e01b      	b.n	800109a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001062:	4b3d      	ldr	r3, [pc, #244]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8001064:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001068:	4a3b      	ldr	r2, [pc, #236]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001072:	f7ff fbab 	bl	80007cc <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800107a:	f7ff fba7 	bl	80007cc <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e1ef      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800108c:	4b32      	ldr	r3, [pc, #200]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 800108e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1ef      	bne.n	800107a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 80a6 	beq.w	80011f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 80010ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10d      	bne.n	80010d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	4b27      	ldr	r3, [pc, #156]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 80010ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010bc:	4a26      	ldr	r2, [pc, #152]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c4:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 80010c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010d0:	2301      	movs	r3, #1
 80010d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <HAL_RCC_OscConfig+0x508>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d118      	bne.n	8001112 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010e0:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <HAL_RCC_OscConfig+0x508>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a1d      	ldr	r2, [pc, #116]	@ (800115c <HAL_RCC_OscConfig+0x508>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ec:	f7ff fb6e 	bl	80007cc <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f4:	f7ff fb6a 	bl	80007cc <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e1b2      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <HAL_RCC_OscConfig+0x508>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <HAL_RCC_OscConfig+0x4d8>
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 800111c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001120:	4a0d      	ldr	r2, [pc, #52]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800112a:	e029      	b.n	8001180 <HAL_RCC_OscConfig+0x52c>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b05      	cmp	r3, #5
 8001132:	d115      	bne.n	8001160 <HAL_RCC_OscConfig+0x50c>
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8001136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800113a:	4a07      	ldr	r2, [pc, #28]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 8001146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800114a:	4a03      	ldr	r2, [pc, #12]	@ (8001158 <HAL_RCC_OscConfig+0x504>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001154:	e014      	b.n	8001180 <HAL_RCC_OscConfig+0x52c>
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	40007000 	.word	0x40007000
 8001160:	4b9a      	ldr	r3, [pc, #616]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 8001162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001166:	4a99      	ldr	r2, [pc, #612]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001170:	4b96      	ldr	r3, [pc, #600]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 8001172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001176:	4a95      	ldr	r2, [pc, #596]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 8001178:	f023 0304 	bic.w	r3, r3, #4
 800117c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d016      	beq.n	80011b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001188:	f7ff fb20 	bl	80007cc <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800118e:	e00a      	b.n	80011a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001190:	f7ff fb1c 	bl	80007cc <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800119e:	4293      	cmp	r3, r2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e162      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011a6:	4b89      	ldr	r3, [pc, #548]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 80011a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0ed      	beq.n	8001190 <HAL_RCC_OscConfig+0x53c>
 80011b4:	e015      	b.n	80011e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b6:	f7ff fb09 	bl	80007cc <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011be:	f7ff fb05 	bl	80007cc <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e14b      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011d4:	4b7d      	ldr	r3, [pc, #500]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 80011d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1ed      	bne.n	80011be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011e2:	7ffb      	ldrb	r3, [r7, #31]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e8:	4b78      	ldr	r3, [pc, #480]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ec:	4a77      	ldr	r2, [pc, #476]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 80011ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0320 	and.w	r3, r3, #32
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d03c      	beq.n	800127a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001204:	2b00      	cmp	r3, #0
 8001206:	d01c      	beq.n	8001242 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001208:	4b70      	ldr	r3, [pc, #448]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 800120a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800120e:	4a6f      	ldr	r2, [pc, #444]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001218:	f7ff fad8 	bl	80007cc <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001220:	f7ff fad4 	bl	80007cc <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e11c      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001232:	4b66      	ldr	r3, [pc, #408]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 8001234:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0ef      	beq.n	8001220 <HAL_RCC_OscConfig+0x5cc>
 8001240:	e01b      	b.n	800127a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001242:	4b62      	ldr	r3, [pc, #392]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 8001244:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001248:	4a60      	ldr	r2, [pc, #384]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001252:	f7ff fabb 	bl	80007cc <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800125a:	f7ff fab7 	bl	80007cc <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e0ff      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800126c:	4b57      	ldr	r3, [pc, #348]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 800126e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1ef      	bne.n	800125a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80f3 	beq.w	800146a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001288:	2b02      	cmp	r3, #2
 800128a:	f040 80c9 	bne.w	8001420 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800128e:	4b4f      	ldr	r3, [pc, #316]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f003 0203 	and.w	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129e:	429a      	cmp	r2, r3
 80012a0:	d12c      	bne.n	80012fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ac:	3b01      	subs	r3, #1
 80012ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d123      	bne.n	80012fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d11b      	bne.n	80012fc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d113      	bne.n	80012fc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012de:	085b      	lsrs	r3, r3, #1
 80012e0:	3b01      	subs	r3, #1
 80012e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d109      	bne.n	80012fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	085b      	lsrs	r3, r3, #1
 80012f4:	3b01      	subs	r3, #1
 80012f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d06b      	beq.n	80013d4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2b0c      	cmp	r3, #12
 8001300:	d062      	beq.n	80013c8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001302:	4b32      	ldr	r3, [pc, #200]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e0ac      	b.n	800146c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001312:	4b2e      	ldr	r3, [pc, #184]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a2d      	ldr	r2, [pc, #180]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 8001318:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800131c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800131e:	f7ff fa55 	bl	80007cc <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001326:	f7ff fa51 	bl	80007cc <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e099      	b.n	800146c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001338:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001344:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <HAL_RCC_OscConfig+0x77c>)
 800134a:	4013      	ands	r3, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001354:	3a01      	subs	r2, #1
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	4311      	orrs	r1, r2
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800135e:	0212      	lsls	r2, r2, #8
 8001360:	4311      	orrs	r1, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001366:	0852      	lsrs	r2, r2, #1
 8001368:	3a01      	subs	r2, #1
 800136a:	0552      	lsls	r2, r2, #21
 800136c:	4311      	orrs	r1, r2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001372:	0852      	lsrs	r2, r2, #1
 8001374:	3a01      	subs	r2, #1
 8001376:	0652      	lsls	r2, r2, #25
 8001378:	4311      	orrs	r1, r2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800137e:	06d2      	lsls	r2, r2, #27
 8001380:	430a      	orrs	r2, r1
 8001382:	4912      	ldr	r1, [pc, #72]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 8001384:	4313      	orrs	r3, r2
 8001386:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001388:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0f      	ldr	r2, [pc, #60]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 800138e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001392:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001394:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	4a0c      	ldr	r2, [pc, #48]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 800139a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800139e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013a0:	f7ff fa14 	bl	80007cc <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff fa10 	bl	80007cc <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e058      	b.n	800146c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ba:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <HAL_RCC_OscConfig+0x778>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013c6:	e050      	b.n	800146a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e04f      	b.n	800146c <HAL_RCC_OscConfig+0x818>
 80013cc:	40021000 	.word	0x40021000
 80013d0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d4:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <HAL_RCC_OscConfig+0x820>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d144      	bne.n	800146a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013e0:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <HAL_RCC_OscConfig+0x820>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a23      	ldr	r2, [pc, #140]	@ (8001474 <HAL_RCC_OscConfig+0x820>)
 80013e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013ec:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <HAL_RCC_OscConfig+0x820>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4a20      	ldr	r2, [pc, #128]	@ (8001474 <HAL_RCC_OscConfig+0x820>)
 80013f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013f8:	f7ff f9e8 	bl	80007cc <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001400:	f7ff f9e4 	bl	80007cc <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e02c      	b.n	800146c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001412:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <HAL_RCC_OscConfig+0x820>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x7ac>
 800141e:	e024      	b.n	800146a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b0c      	cmp	r3, #12
 8001424:	d01f      	beq.n	8001466 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <HAL_RCC_OscConfig+0x820>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <HAL_RCC_OscConfig+0x820>)
 800142c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff f9cb 	bl	80007cc <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143a:	f7ff f9c7 	bl	80007cc <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e00f      	b.n	800146c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800144c:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_RCC_OscConfig+0x820>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_RCC_OscConfig+0x820>)
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	4905      	ldr	r1, [pc, #20]	@ (8001474 <HAL_RCC_OscConfig+0x820>)
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_RCC_OscConfig+0x824>)
 8001460:	4013      	ands	r3, r2
 8001462:	60cb      	str	r3, [r1, #12]
 8001464:	e001      	b.n	800146a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000
 8001478:	feeefffc 	.word	0xfeeefffc

0800147c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0e7      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001490:	4b75      	ldr	r3, [pc, #468]	@ (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d910      	bls.n	80014c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	4b72      	ldr	r3, [pc, #456]	@ (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 0207 	bic.w	r2, r3, #7
 80014a6:	4970      	ldr	r1, [pc, #448]	@ (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0cf      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d010      	beq.n	80014ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	4b66      	ldr	r3, [pc, #408]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014d8:	429a      	cmp	r2, r3
 80014da:	d908      	bls.n	80014ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014dc:	4b63      	ldr	r3, [pc, #396]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4960      	ldr	r1, [pc, #384]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d04c      	beq.n	8001594 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d107      	bne.n	8001512 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001502:	4b5a      	ldr	r3, [pc, #360]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d121      	bne.n	8001552 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0a6      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151a:	4b54      	ldr	r3, [pc, #336]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d115      	bne.n	8001552 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e09a      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001532:	4b4e      	ldr	r3, [pc, #312]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e08e      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001542:	4b4a      	ldr	r3, [pc, #296]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e086      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001552:	4b46      	ldr	r3, [pc, #280]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f023 0203 	bic.w	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4943      	ldr	r1, [pc, #268]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001560:	4313      	orrs	r3, r2
 8001562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001564:	f7ff f932 	bl	80007cc <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	e00a      	b.n	8001582 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7ff f92e 	bl	80007cc <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e06e      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	4b3a      	ldr	r3, [pc, #232]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 020c 	and.w	r2, r3, #12
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	429a      	cmp	r2, r3
 8001592:	d1eb      	bne.n	800156c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d010      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	4b31      	ldr	r3, [pc, #196]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d208      	bcs.n	80015c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b0:	4b2e      	ldr	r3, [pc, #184]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	492b      	ldr	r1, [pc, #172]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015c2:	4b29      	ldr	r3, [pc, #164]	@ (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d210      	bcs.n	80015f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d0:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 0207 	bic.w	r2, r3, #7
 80015d8:	4923      	ldr	r1, [pc, #140]	@ (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e0:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <HAL_RCC_ClockConfig+0x1ec>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e036      	b.n	8001660 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015fe:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	4918      	ldr	r1, [pc, #96]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 800160c:	4313      	orrs	r3, r2
 800160e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d009      	beq.n	8001630 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800161c:	4b13      	ldr	r3, [pc, #76]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4910      	ldr	r1, [pc, #64]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 800162c:	4313      	orrs	r3, r2
 800162e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001630:	f000 f824 	bl	800167c <HAL_RCC_GetSysClockFreq>
 8001634:	4602      	mov	r2, r0
 8001636:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <HAL_RCC_ClockConfig+0x1f0>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	490b      	ldr	r1, [pc, #44]	@ (8001670 <HAL_RCC_ClockConfig+0x1f4>)
 8001642:	5ccb      	ldrb	r3, [r1, r3]
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
 800164c:	4a09      	ldr	r2, [pc, #36]	@ (8001674 <HAL_RCC_ClockConfig+0x1f8>)
 800164e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <HAL_RCC_ClockConfig+0x1fc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ffbd 	bl	80005d4 <HAL_InitTick>
 800165a:	4603      	mov	r3, r0
 800165c:	72fb      	strb	r3, [r7, #11]

  return status;
 800165e:	7afb      	ldrb	r3, [r7, #11]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40022000 	.word	0x40022000
 800166c:	40021000 	.word	0x40021000
 8001670:	08005b60 	.word	0x08005b60
 8001674:	20000000 	.word	0x20000000
 8001678:	20000004 	.word	0x20000004

0800167c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	@ 0x24
 8001680:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168a:	4b3e      	ldr	r3, [pc, #248]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001694:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_GetSysClockFreq+0x34>
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d121      	bne.n	80016ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d11e      	bne.n	80016ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016b0:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016bc:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	e005      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001788 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10d      	bne.n	8001704 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016f4:	4b25      	ldr	r3, [pc, #148]	@ (800178c <HAL_RCC_GetSysClockFreq+0x110>)
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	e004      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001700:	4b23      	ldr	r3, [pc, #140]	@ (8001790 <HAL_RCC_GetSysClockFreq+0x114>)
 8001702:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	2b0c      	cmp	r3, #12
 8001708:	d134      	bne.n	8001774 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800170a:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d003      	beq.n	8001722 <HAL_RCC_GetSysClockFreq+0xa6>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2b03      	cmp	r3, #3
 800171e:	d003      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0xac>
 8001720:	e005      	b.n	800172e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001722:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <HAL_RCC_GetSysClockFreq+0x110>)
 8001724:	617b      	str	r3, [r7, #20]
      break;
 8001726:	e005      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001728:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_RCC_GetSysClockFreq+0x114>)
 800172a:	617b      	str	r3, [r7, #20]
      break;
 800172c:	e002      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	617b      	str	r3, [r7, #20]
      break;
 8001732:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	3301      	adds	r3, #1
 8001740:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	fb03 f202 	mul.w	r2, r3, r2
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800175a:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x108>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	0e5b      	lsrs	r3, r3, #25
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	3301      	adds	r3, #1
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001774:	69bb      	ldr	r3, [r7, #24]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	@ 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	08005b78 	.word	0x08005b78
 800178c:	00f42400 	.word	0x00f42400
 8001790:	007a1200 	.word	0x007a1200

08001794 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001798:	4b03      	ldr	r3, [pc, #12]	@ (80017a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000000 	.word	0x20000000

080017ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80017b0:	f7ff fff0 	bl	8001794 <HAL_RCC_GetHCLKFreq>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	0adb      	lsrs	r3, r3, #11
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	4904      	ldr	r1, [pc, #16]	@ (80017d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80017c2:	5ccb      	ldrb	r3, [r1, r3]
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	08005b70 	.word	0x08005b70

080017d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	220f      	movs	r2, #15
 80017e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80017e8:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <HAL_RCC_GetClockConfig+0x5c>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0203 	and.w	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80017f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <HAL_RCC_GetClockConfig+0x5c>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <HAL_RCC_GetClockConfig+0x5c>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800180c:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <HAL_RCC_GetClockConfig+0x5c>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	08db      	lsrs	r3, r3, #3
 8001812:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800181a:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <HAL_RCC_GetClockConfig+0x60>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0207 	and.w	r2, r3, #7
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	601a      	str	r2, [r3, #0]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	40022000 	.word	0x40022000

0800183c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001848:	4b2a      	ldr	r3, [pc, #168]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001854:	f7ff f99a 	bl	8000b8c <HAL_PWREx_GetVoltageRange>
 8001858:	6178      	str	r0, [r7, #20]
 800185a:	e014      	b.n	8001886 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	4a24      	ldr	r2, [pc, #144]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001866:	6593      	str	r3, [r2, #88]	@ 0x58
 8001868:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001874:	f7ff f98a 	bl	8000b8c <HAL_PWREx_GetVoltageRange>
 8001878:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800187a:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	4a1d      	ldr	r2, [pc, #116]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001884:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800188c:	d10b      	bne.n	80018a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b80      	cmp	r3, #128	@ 0x80
 8001892:	d919      	bls.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2ba0      	cmp	r3, #160	@ 0xa0
 8001898:	d902      	bls.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800189a:	2302      	movs	r3, #2
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	e013      	b.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018a0:	2301      	movs	r3, #1
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	e010      	b.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b80      	cmp	r3, #128	@ 0x80
 80018aa:	d902      	bls.n	80018b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018ac:	2303      	movs	r3, #3
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	e00a      	b.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b80      	cmp	r3, #128	@ 0x80
 80018b6:	d102      	bne.n	80018be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018b8:	2302      	movs	r3, #2
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	e004      	b.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b70      	cmp	r3, #112	@ 0x70
 80018c2:	d101      	bne.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018c4:	2301      	movs	r3, #1
 80018c6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 0207 	bic.w	r2, r3, #7
 80018d0:	4909      	ldr	r1, [pc, #36]	@ (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018d8:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d001      	beq.n	80018ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40022000 	.word	0x40022000

080018fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001904:	2300      	movs	r3, #0
 8001906:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001908:	2300      	movs	r3, #0
 800190a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001914:	2b00      	cmp	r3, #0
 8001916:	d031      	beq.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001920:	d01a      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001922:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001926:	d814      	bhi.n	8001952 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001928:	2b00      	cmp	r3, #0
 800192a:	d009      	beq.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800192c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001930:	d10f      	bne.n	8001952 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001932:	4b5d      	ldr	r3, [pc, #372]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	4a5c      	ldr	r2, [pc, #368]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800193c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800193e:	e00c      	b.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3304      	adds	r3, #4
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f9f0 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 800194c:	4603      	mov	r3, r0
 800194e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001950:	e003      	b.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	74fb      	strb	r3, [r7, #19]
      break;
 8001956:	e000      	b.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800195a:	7cfb      	ldrb	r3, [r7, #19]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10b      	bne.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001960:	4b51      	ldr	r3, [pc, #324]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001966:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	494e      	ldr	r1, [pc, #312]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001970:	4313      	orrs	r3, r2
 8001972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001976:	e001      	b.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001978:	7cfb      	ldrb	r3, [r7, #19]
 800197a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 809e 	beq.w	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800198e:	4b46      	ldr	r3, [pc, #280]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800199e:	2300      	movs	r3, #0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00d      	beq.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	4b40      	ldr	r3, [pc, #256]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	4a3f      	ldr	r2, [pc, #252]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80019b0:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019bc:	2301      	movs	r3, #1
 80019be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c0:	4b3a      	ldr	r3, [pc, #232]	@ (8001aac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a39      	ldr	r2, [pc, #228]	@ (8001aac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80019c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019cc:	f7fe fefe 	bl	80007cc <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80019d2:	e009      	b.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d4:	f7fe fefa 	bl	80007cc <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d902      	bls.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	74fb      	strb	r3, [r7, #19]
        break;
 80019e6:	e005      	b.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80019e8:	4b30      	ldr	r3, [pc, #192]	@ (8001aac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0ef      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80019f4:	7cfb      	ldrb	r3, [r7, #19]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d15a      	bne.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80019fa:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01e      	beq.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d019      	beq.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a16:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a22:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a28:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a32:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a38:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a42:	4a19      	ldr	r2, [pc, #100]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d016      	beq.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7fe feba 	bl	80007cc <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7fe feb6 	bl	80007cc <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d902      	bls.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	74fb      	strb	r3, [r7, #19]
            break;
 8001a72:	e006      	b.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0ec      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001a82:	7cfb      	ldrb	r3, [r7, #19]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10b      	bne.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a88:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a96:	4904      	ldr	r1, [pc, #16]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001a9e:	e009      	b.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001aa0:	7cfb      	ldrb	r3, [r7, #19]
 8001aa2:	74bb      	strb	r3, [r7, #18]
 8001aa4:	e006      	b.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ab0:	7cfb      	ldrb	r3, [r7, #19]
 8001ab2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab4:	7c7b      	ldrb	r3, [r7, #17]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d105      	bne.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aba:	4b9b      	ldr	r3, [pc, #620]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	4a9a      	ldr	r2, [pc, #616]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001ac0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00a      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ad2:	4b95      	ldr	r3, [pc, #596]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad8:	f023 0203 	bic.w	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4991      	ldr	r1, [pc, #580]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00a      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001af4:	4b8c      	ldr	r3, [pc, #560]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afa:	f023 020c 	bic.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b02:	4989      	ldr	r1, [pc, #548]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00a      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b16:	4b84      	ldr	r3, [pc, #528]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b24:	4980      	ldr	r1, [pc, #512]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00a      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b38:	4b7b      	ldr	r3, [pc, #492]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b46:	4978      	ldr	r1, [pc, #480]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00a      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b5a:	4b73      	ldr	r3, [pc, #460]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b68:	496f      	ldr	r1, [pc, #444]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00a      	beq.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	4967      	ldr	r1, [pc, #412]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00a      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b9e:	4b62      	ldr	r3, [pc, #392]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bac:	495e      	ldr	r1, [pc, #376]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00a      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001bc0:	4b59      	ldr	r3, [pc, #356]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bc6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bce:	4956      	ldr	r1, [pc, #344]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00a      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001be2:	4b51      	ldr	r3, [pc, #324]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001be8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf0:	494d      	ldr	r1, [pc, #308]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d028      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001c04:	4b48      	ldr	r3, [pc, #288]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c12:	4945      	ldr	r1, [pc, #276]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c22:	d106      	bne.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c24:	4b40      	ldr	r3, [pc, #256]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4a3f      	ldr	r2, [pc, #252]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c2e:	60d3      	str	r3, [r2, #12]
 8001c30:	e011      	b.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c3a:	d10c      	bne.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	2101      	movs	r1, #1
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f872 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c4c:	7cfb      	ldrb	r3, [r7, #19]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8001c52:	7cfb      	ldrb	r3, [r7, #19]
 8001c54:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d028      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001c62:	4b31      	ldr	r3, [pc, #196]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c70:	492d      	ldr	r1, [pc, #180]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c80:	d106      	bne.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c82:	4b29      	ldr	r3, [pc, #164]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	4a28      	ldr	r2, [pc, #160]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001c88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c8c:	60d3      	str	r3, [r2, #12]
 8001c8e:	e011      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 f843 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001caa:	7cfb      	ldrb	r3, [r7, #19]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8001cb0:	7cfb      	ldrb	r3, [r7, #19]
 8001cb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d01c      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cc0:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cc6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cce:	4916      	ldr	r1, [pc, #88]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cde:	d10c      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f820 	bl	8001d2c <RCCEx_PLLSAI1_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001cf0:	7cfb      	ldrb	r3, [r7, #19]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8001cf6:	7cfb      	ldrb	r3, [r7, #19]
 8001cf8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00a      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d0c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d14:	4904      	ldr	r1, [pc, #16]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001d1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000

08001d2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001d3a:	4b74      	ldr	r3, [pc, #464]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d018      	beq.n	8001d78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001d46:	4b71      	ldr	r3, [pc, #452]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f003 0203 	and.w	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d10d      	bne.n	8001d72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
       ||
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001d5e:	4b6b      	ldr	r3, [pc, #428]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
       ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d047      	beq.n	8001e02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	e044      	b.n	8001e02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d018      	beq.n	8001db2 <RCCEx_PLLSAI1_Config+0x86>
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d825      	bhi.n	8001dd0 <RCCEx_PLLSAI1_Config+0xa4>
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d002      	beq.n	8001d8e <RCCEx_PLLSAI1_Config+0x62>
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d009      	beq.n	8001da0 <RCCEx_PLLSAI1_Config+0x74>
 8001d8c:	e020      	b.n	8001dd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001d8e:	4b5f      	ldr	r3, [pc, #380]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d11d      	bne.n	8001dd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d9e:	e01a      	b.n	8001dd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001da0:	4b5a      	ldr	r3, [pc, #360]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d116      	bne.n	8001dda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db0:	e013      	b.n	8001dda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001db2:	4b56      	ldr	r3, [pc, #344]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10f      	bne.n	8001dde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001dbe:	4b53      	ldr	r3, [pc, #332]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001dce:	e006      	b.n	8001dde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd4:	e004      	b.n	8001de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001dd6:	bf00      	nop
 8001dd8:	e002      	b.n	8001de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001dda:	bf00      	nop
 8001ddc:	e000      	b.n	8001de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001dde:	bf00      	nop
    }

    if(status == HAL_OK)
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10d      	bne.n	8001e02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001de6:	4b49      	ldr	r3, [pc, #292]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6819      	ldr	r1, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	4943      	ldr	r1, [pc, #268]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d17c      	bne.n	8001f02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001e08:	4b40      	ldr	r3, [pc, #256]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e14:	f7fe fcda 	bl	80007cc <HAL_GetTick>
 8001e18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e1a:	e009      	b.n	8001e30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e1c:	f7fe fcd6 	bl	80007cc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d902      	bls.n	8001e30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	73fb      	strb	r3, [r7, #15]
        break;
 8001e2e:	e005      	b.n	8001e3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e30:	4b36      	ldr	r3, [pc, #216]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1ef      	bne.n	8001e1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d15f      	bne.n	8001f02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d110      	bne.n	8001e6a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e48:	4b30      	ldr	r3, [pc, #192]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8001e50:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6892      	ldr	r2, [r2, #8]
 8001e58:	0211      	lsls	r1, r2, #8
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68d2      	ldr	r2, [r2, #12]
 8001e5e:	06d2      	lsls	r2, r2, #27
 8001e60:	430a      	orrs	r2, r1
 8001e62:	492a      	ldr	r1, [pc, #168]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	610b      	str	r3, [r1, #16]
 8001e68:	e027      	b.n	8001eba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d112      	bne.n	8001e96 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e70:	4b26      	ldr	r3, [pc, #152]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8001e78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6892      	ldr	r2, [r2, #8]
 8001e80:	0211      	lsls	r1, r2, #8
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6912      	ldr	r2, [r2, #16]
 8001e86:	0852      	lsrs	r2, r2, #1
 8001e88:	3a01      	subs	r2, #1
 8001e8a:	0552      	lsls	r2, r2, #21
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	491f      	ldr	r1, [pc, #124]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	610b      	str	r3, [r1, #16]
 8001e94:	e011      	b.n	8001eba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e96:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001e9e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6892      	ldr	r2, [r2, #8]
 8001ea6:	0211      	lsls	r1, r2, #8
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6952      	ldr	r2, [r2, #20]
 8001eac:	0852      	lsrs	r2, r2, #1
 8001eae:	3a01      	subs	r2, #1
 8001eb0:	0652      	lsls	r2, r2, #25
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	4915      	ldr	r1, [pc, #84]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001eba:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a13      	ldr	r2, [pc, #76]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ec0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ec4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec6:	f7fe fc81 	bl	80007cc <HAL_GetTick>
 8001eca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ecc:	e009      	b.n	8001ee2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ece:	f7fe fc7d 	bl	80007cc <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d902      	bls.n	8001ee2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	73fb      	strb	r3, [r7, #15]
          break;
 8001ee0:	e005      	b.n	8001eee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0ef      	beq.n	8001ece <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d106      	bne.n	8001f02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001ef4:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4903      	ldr	r1, [pc, #12]	@ (8001f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000

08001f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e049      	b.n	8001fb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f841 	bl	8001fbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f000 f9c4 	bl	80022dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d001      	beq.n	8001fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e03b      	b.n	8002064 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_TIM_Base_Start_IT+0x9c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d009      	beq.n	8002022 <HAL_TIM_Base_Start_IT+0x4e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002016:	d004      	beq.n	8002022 <HAL_TIM_Base_Start_IT+0x4e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a15      	ldr	r2, [pc, #84]	@ (8002074 <HAL_TIM_Base_Start_IT+0xa0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d115      	bne.n	800204e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <HAL_TIM_Base_Start_IT+0xa4>)
 800202a:	4013      	ands	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b06      	cmp	r3, #6
 8002032:	d015      	beq.n	8002060 <HAL_TIM_Base_Start_IT+0x8c>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800203a:	d011      	beq.n	8002060 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204c:	e008      	b.n	8002060 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0201 	orr.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e000      	b.n	8002062 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002060:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	40012c00 	.word	0x40012c00
 8002074:	40014000 	.word	0x40014000
 8002078:	00010007 	.word	0x00010007

0800207c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d020      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01b      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0202 	mvn.w	r2, #2
 80020b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8e9 	bl	800229e <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8db 	bl	800228a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f8ec 	bl	80022b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d020      	beq.n	800212c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0204 	mvn.w	r2, #4
 80020fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2202      	movs	r2, #2
 8002102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f8c3 	bl	800229e <HAL_TIM_IC_CaptureCallback>
 8002118:	e005      	b.n	8002126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f8b5 	bl	800228a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f8c6 	bl	80022b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d020      	beq.n	8002178 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01b      	beq.n	8002178 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0208 	mvn.w	r2, #8
 8002148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2204      	movs	r2, #4
 800214e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f89d 	bl	800229e <HAL_TIM_IC_CaptureCallback>
 8002164:	e005      	b.n	8002172 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f88f 	bl	800228a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f8a0 	bl	80022b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	d020      	beq.n	80021c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01b      	beq.n	80021c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0210 	mvn.w	r2, #16
 8002194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2208      	movs	r2, #8
 800219a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f877 	bl	800229e <HAL_TIM_IC_CaptureCallback>
 80021b0:	e005      	b.n	80021be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f869 	bl	800228a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f87a 	bl	80022b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0201 	mvn.w	r2, #1
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe f996 	bl	8000514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d104      	bne.n	80021fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00c      	beq.n	8002216 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800220e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f8dd 	bl	80023d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00c      	beq.n	800223a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f8d5 	bl	80023e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00c      	beq.n	800225e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f834 	bl	80022c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00c      	beq.n	8002282 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f06f 0220 	mvn.w	r2, #32
 800227a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f89d 	bl	80023bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a30      	ldr	r2, [pc, #192]	@ (80023b0 <TIM_Base_SetConfig+0xd4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d003      	beq.n	80022fc <TIM_Base_SetConfig+0x20>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022fa:	d108      	bne.n	800230e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a27      	ldr	r2, [pc, #156]	@ (80023b0 <TIM_Base_SetConfig+0xd4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00b      	beq.n	800232e <TIM_Base_SetConfig+0x52>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800231c:	d007      	beq.n	800232e <TIM_Base_SetConfig+0x52>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a24      	ldr	r2, [pc, #144]	@ (80023b4 <TIM_Base_SetConfig+0xd8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d003      	beq.n	800232e <TIM_Base_SetConfig+0x52>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a23      	ldr	r2, [pc, #140]	@ (80023b8 <TIM_Base_SetConfig+0xdc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d108      	bne.n	8002340 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a12      	ldr	r2, [pc, #72]	@ (80023b0 <TIM_Base_SetConfig+0xd4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d007      	beq.n	800237c <TIM_Base_SetConfig+0xa0>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a11      	ldr	r2, [pc, #68]	@ (80023b4 <TIM_Base_SetConfig+0xd8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d003      	beq.n	800237c <TIM_Base_SetConfig+0xa0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a10      	ldr	r2, [pc, #64]	@ (80023b8 <TIM_Base_SetConfig+0xdc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d103      	bne.n	8002384 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f023 0201 	bic.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	611a      	str	r2, [r3, #16]
  }
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40014000 	.word	0x40014000
 80023b8:	40014400 	.word	0x40014400

080023bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b08b      	sub	sp, #44	@ 0x2c
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800241e:	2320      	movs	r3, #32
 8002420:	e003      	b.n	800242a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2103      	movs	r1, #3
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	401a      	ands	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	61fb      	str	r3, [r7, #28]
  return result;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e003      	b.n	8002458 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	431a      	orrs	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	601a      	str	r2, [r3, #0]
}
 8002466:	bf00      	nop
 8002468:	372c      	adds	r7, #44	@ 0x2c
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002472:	b480      	push	{r7}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	43db      	mvns	r3, r3
 8002486:	401a      	ands	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	431a      	orrs	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	605a      	str	r2, [r3, #4]
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b08b      	sub	sp, #44	@ 0x2c
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	613b      	str	r3, [r7, #16]
  return result;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80024c8:	2320      	movs	r3, #32
 80024ca:	e003      	b.n	80024d4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2103      	movs	r1, #3
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	401a      	ands	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	61fb      	str	r3, [r7, #28]
  return result;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e003      	b.n	8002502 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	431a      	orrs	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002510:	bf00      	nop
 8002512:	372c      	adds	r7, #44	@ 0x2c
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800251c:	b480      	push	{r7}
 800251e:	b08b      	sub	sp, #44	@ 0x2c
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	613b      	str	r3, [r7, #16]
  return result;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e003      	b.n	800254e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2103      	movs	r1, #3
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	401a      	ands	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	61fb      	str	r3, [r7, #28]
  return result;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002570:	2320      	movs	r3, #32
 8002572:	e003      	b.n	800257c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	431a      	orrs	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	60da      	str	r2, [r3, #12]
}
 800258a:	bf00      	nop
 800258c:	372c      	adds	r7, #44	@ 0x2c
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002596:	b480      	push	{r7}
 8002598:	b08b      	sub	sp, #44	@ 0x2c
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a1a      	ldr	r2, [r3, #32]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	613b      	str	r3, [r7, #16]
  return result;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80025bc:	2320      	movs	r3, #32
 80025be:	e003      	b.n	80025c8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	210f      	movs	r1, #15
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	401a      	ands	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	61fb      	str	r3, [r7, #28]
  return result;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80025ea:	2320      	movs	r3, #32
 80025ec:	e003      	b.n	80025f6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	431a      	orrs	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002604:	bf00      	nop
 8002606:	372c      	adds	r7, #44	@ 0x2c
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002610:	b480      	push	{r7}
 8002612:	b08b      	sub	sp, #44	@ 0x2c
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	613b      	str	r3, [r7, #16]
  return result;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002638:	2320      	movs	r3, #32
 800263a:	e003      	b.n	8002644 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	210f      	movs	r1, #15
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	401a      	ands	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	61fb      	str	r3, [r7, #28]
  return result;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	e003      	b.n	8002674 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002682:	bf00      	nop
 8002684:	372c      	adds	r7, #44	@ 0x2c
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b088      	sub	sp, #32
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	60fb      	str	r3, [r7, #12]
  return result;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <LL_GPIO_Init+0x26>
    return 32U;
 80026b0:	2320      	movs	r3, #32
 80026b2:	e003      	b.n	80026bc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80026be:	e048      	b.n	8002752 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2101      	movs	r1, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d03a      	beq.n	800274c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d003      	beq.n	80026e6 <LL_GPIO_Init+0x58>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d10e      	bne.n	8002704 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	461a      	mov	r2, r3
 80026ec:	69b9      	ldr	r1, [r7, #24]
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff fed7 	bl	80024a2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6819      	ldr	r1, [r3, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	461a      	mov	r2, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff feb7 	bl	8002472 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	461a      	mov	r2, r3
 800270a:	69b9      	ldr	r1, [r7, #24]
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff ff05 	bl	800251c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d111      	bne.n	800273e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2bff      	cmp	r3, #255	@ 0xff
 800271e:	d807      	bhi.n	8002730 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	461a      	mov	r2, r3
 8002726:	69b9      	ldr	r1, [r7, #24]
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ff34 	bl	8002596 <LL_GPIO_SetAFPin_0_7>
 800272e:	e006      	b.n	800273e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	461a      	mov	r2, r3
 8002736:	69b9      	ldr	r1, [r7, #24]
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff ff69 	bl	8002610 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	461a      	mov	r2, r3
 8002744:	69b9      	ldr	r1, [r7, #24]
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff fe56 	bl	80023f8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	3301      	adds	r3, #1
 8002750:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1af      	bne.n	80026c0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002770:	4b07      	ldr	r3, [pc, #28]	@ (8002790 <LL_RCC_HSI_IsReady+0x24>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800277c:	d101      	bne.n	8002782 <LL_RCC_HSI_IsReady+0x16>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <LL_RCC_HSI_IsReady+0x18>
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000

08002794 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8002798:	4b07      	ldr	r3, [pc, #28]	@ (80027b8 <LL_RCC_LSE_IsReady+0x24>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d101      	bne.n	80027aa <LL_RCC_LSE_IsReady+0x16>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <LL_RCC_LSE_IsReady+0x18>
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000

080027bc <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80027c0:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d101      	bne.n	80027d0 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40021000 	.word	0x40021000

080027e0 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80027e4:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <LL_RCC_MSI_GetRange+0x18>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000

080027fc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002800:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8002802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002806:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40021000 	.word	0x40021000

08002818 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800281c:	4b04      	ldr	r3, [pc, #16]	@ (8002830 <LL_RCC_GetSysClkSource+0x18>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 030c 	and.w	r3, r3, #12
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000

08002834 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002838:	4b04      	ldr	r3, [pc, #16]	@ (800284c <LL_RCC_GetAHBPrescaler+0x18>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000

08002850 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002854:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000

0800286c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002870:	4b04      	ldr	r3, [pc, #16]	@ (8002884 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000

08002888 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <LL_RCC_GetUSARTClockSource+0x24>)
 8002892:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	401a      	ands	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	041b      	lsls	r3, r3, #16
 800289e:	4313      	orrs	r3, r2
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40021000 	.word	0x40021000

080028b0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80028b4:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <LL_RCC_PLL_GetMainSource+0x18>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0303 	and.w	r3, r3, #3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000

080028cc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80028d0:	4b04      	ldr	r3, [pc, #16]	@ (80028e4 <LL_RCC_PLL_GetN+0x18>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40021000 	.word	0x40021000

080028e8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80028ec:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <LL_RCC_PLL_GetR+0x18>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000

08002904 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002908:	4b04      	ldr	r3, [pc, #16]	@ (800291c <LL_RCC_PLL_GetDivider+0x18>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000

08002920 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d137      	bne.n	80029a2 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ffa8 	bl	8002888 <LL_RCC_GetUSARTClockSource>
 8002938:	4603      	mov	r3, r0
 800293a:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800293e:	2b03      	cmp	r3, #3
 8002940:	f200 80b3 	bhi.w	8002aaa <LL_RCC_GetUSARTClockFreq+0x18a>
 8002944:	a201      	add	r2, pc, #4	@ (adr r2, 800294c <LL_RCC_GetUSARTClockFreq+0x2c>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	0800298b 	.word	0x0800298b
 8002950:	0800295d 	.word	0x0800295d
 8002954:	08002965 	.word	0x08002965
 8002958:	08002977 	.word	0x08002977
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800295c:	f000 f8c2 	bl	8002ae4 <RCC_GetSystemClockFreq>
 8002960:	60f8      	str	r0, [r7, #12]
        break;
 8002962:	e0b3      	b.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002964:	f7ff ff02 	bl	800276c <LL_RCC_HSI_IsReady>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 809f 	beq.w	8002aae <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8002970:	4b59      	ldr	r3, [pc, #356]	@ (8002ad8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002972:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002974:	e09b      	b.n	8002aae <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002976:	f7ff ff0d 	bl	8002794 <LL_RCC_LSE_IsReady>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8098 	beq.w	8002ab2 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8002982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002986:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002988:	e093      	b.n	8002ab2 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800298a:	f000 f8ab 	bl	8002ae4 <RCC_GetSystemClockFreq>
 800298e:	4603      	mov	r3, r0
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f937 	bl	8002c04 <RCC_GetHCLKClockFreq>
 8002996:	4603      	mov	r3, r0
 8002998:	4618      	mov	r0, r3
 800299a:	f000 f95d 	bl	8002c58 <RCC_GetPCLK2ClockFreq>
 800299e:	60f8      	str	r0, [r7, #12]
        break;
 80029a0:	e094      	b.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	d146      	bne.n	8002a36 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff6d 	bl	8002888 <LL_RCC_GetUSARTClockSource>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	d87e      	bhi.n	8002ab6 <LL_RCC_GetUSARTClockFreq+0x196>
 80029b8:	a201      	add	r2, pc, #4	@ (adr r2, 80029c0 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	08002a1f 	.word	0x08002a1f
 80029c4:	08002ab7 	.word	0x08002ab7
 80029c8:	08002ab7 	.word	0x08002ab7
 80029cc:	08002ab7 	.word	0x08002ab7
 80029d0:	080029f5 	.word	0x080029f5
 80029d4:	08002ab7 	.word	0x08002ab7
 80029d8:	08002ab7 	.word	0x08002ab7
 80029dc:	08002ab7 	.word	0x08002ab7
 80029e0:	080029fd 	.word	0x080029fd
 80029e4:	08002ab7 	.word	0x08002ab7
 80029e8:	08002ab7 	.word	0x08002ab7
 80029ec:	08002ab7 	.word	0x08002ab7
 80029f0:	08002a0d 	.word	0x08002a0d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80029f4:	f000 f876 	bl	8002ae4 <RCC_GetSystemClockFreq>
 80029f8:	60f8      	str	r0, [r7, #12]
        break;
 80029fa:	e067      	b.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80029fc:	f7ff feb6 	bl	800276c <LL_RCC_HSI_IsReady>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d059      	beq.n	8002aba <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8002a06:	4b34      	ldr	r3, [pc, #208]	@ (8002ad8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002a08:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002a0a:	e056      	b.n	8002aba <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002a0c:	f7ff fec2 	bl	8002794 <LL_RCC_LSE_IsReady>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d053      	beq.n	8002abe <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8002a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a1a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002a1c:	e04f      	b.n	8002abe <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002a1e:	f000 f861 	bl	8002ae4 <RCC_GetSystemClockFreq>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 f8ed 	bl	8002c04 <RCC_GetHCLKClockFreq>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 f8ff 	bl	8002c30 <RCC_GetPCLK1ClockFreq>
 8002a32:	60f8      	str	r0, [r7, #12]
        break;
 8002a34:	e04a      	b.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b30      	cmp	r3, #48	@ 0x30
 8002a3a:	d147      	bne.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ff23 	bl	8002888 <LL_RCC_GetUSARTClockSource>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8002a48:	d01a      	beq.n	8002a80 <LL_RCC_GetUSARTClockFreq+0x160>
 8002a4a:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8002a4e:	d838      	bhi.n	8002ac2 <LL_RCC_GetUSARTClockFreq+0x1a2>
 8002a50:	4a22      	ldr	r2, [pc, #136]	@ (8002adc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00c      	beq.n	8002a70 <LL_RCC_GetUSARTClockFreq+0x150>
 8002a56:	4a21      	ldr	r2, [pc, #132]	@ (8002adc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d832      	bhi.n	8002ac2 <LL_RCC_GetUSARTClockFreq+0x1a2>
 8002a5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a60:	d017      	beq.n	8002a92 <LL_RCC_GetUSARTClockFreq+0x172>
 8002a62:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae0 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d12c      	bne.n	8002ac2 <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8002a68:	f000 f83c 	bl	8002ae4 <RCC_GetSystemClockFreq>
 8002a6c:	60f8      	str	r0, [r7, #12]
          break;
 8002a6e:	e02d      	b.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8002a70:	f7ff fe7c 	bl	800276c <LL_RCC_HSI_IsReady>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d025      	beq.n	8002ac6 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002a7c:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002a7e:	e022      	b.n	8002ac6 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8002a80:	f7ff fe88 	bl	8002794 <LL_RCC_LSE_IsReady>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01f      	beq.n	8002aca <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 8002a8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a8e:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002a90:	e01b      	b.n	8002aca <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002a92:	f000 f827 	bl	8002ae4 <RCC_GetSystemClockFreq>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f8b3 	bl	8002c04 <RCC_GetHCLKClockFreq>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 f8c5 	bl	8002c30 <RCC_GetPCLK1ClockFreq>
 8002aa6:	60f8      	str	r0, [r7, #12]
          break;
 8002aa8:	e010      	b.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002aaa:	bf00      	nop
 8002aac:	e00e      	b.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002aae:	bf00      	nop
 8002ab0:	e00c      	b.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002ab2:	bf00      	nop
 8002ab4:	e00a      	b.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002ab6:	bf00      	nop
 8002ab8:	e008      	b.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002aba:	bf00      	nop
 8002abc:	e006      	b.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002abe:	bf00      	nop
 8002ac0:	e004      	b.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8002ac2:	bf00      	nop
 8002ac4:	e002      	b.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8002ac6:	bf00      	nop
 8002ac8:	e000      	b.n	8002acc <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8002aca:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8002acc:	68fb      	ldr	r3, [r7, #12]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	00f42400 	.word	0x00f42400
 8002adc:	00300020 	.word	0x00300020
 8002ae0:	00300010 	.word	0x00300010

08002ae4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002aea:	f7ff fe95 	bl	8002818 <LL_RCC_GetSysClkSource>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	d851      	bhi.n	8002b98 <RCC_GetSystemClockFreq+0xb4>
 8002af4:	a201      	add	r2, pc, #4	@ (adr r2, 8002afc <RCC_GetSystemClockFreq+0x18>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b31 	.word	0x08002b31
 8002b00:	08002b99 	.word	0x08002b99
 8002b04:	08002b99 	.word	0x08002b99
 8002b08:	08002b99 	.word	0x08002b99
 8002b0c:	08002b85 	.word	0x08002b85
 8002b10:	08002b99 	.word	0x08002b99
 8002b14:	08002b99 	.word	0x08002b99
 8002b18:	08002b99 	.word	0x08002b99
 8002b1c:	08002b8b 	.word	0x08002b8b
 8002b20:	08002b99 	.word	0x08002b99
 8002b24:	08002b99 	.word	0x08002b99
 8002b28:	08002b99 	.word	0x08002b99
 8002b2c:	08002b91 	.word	0x08002b91
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002b30:	f7ff fe44 	bl	80027bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d111      	bne.n	8002b5e <RCC_GetSystemClockFreq+0x7a>
 8002b3a:	f7ff fe3f 	bl	80027bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d004      	beq.n	8002b4e <RCC_GetSystemClockFreq+0x6a>
 8002b44:	f7ff fe4c 	bl	80027e0 <LL_RCC_MSI_GetRange>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	e003      	b.n	8002b56 <RCC_GetSystemClockFreq+0x72>
 8002b4e:	f7ff fe55 	bl	80027fc <LL_RCC_MSI_GetRangeAfterStandby>
 8002b52:	4603      	mov	r3, r0
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	4a28      	ldr	r2, [pc, #160]	@ (8002bf8 <RCC_GetSystemClockFreq+0x114>)
 8002b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5c:	e010      	b.n	8002b80 <RCC_GetSystemClockFreq+0x9c>
 8002b5e:	f7ff fe2d 	bl	80027bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <RCC_GetSystemClockFreq+0x8e>
 8002b68:	f7ff fe3a 	bl	80027e0 <LL_RCC_MSI_GetRange>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	e003      	b.n	8002b7a <RCC_GetSystemClockFreq+0x96>
 8002b72:	f7ff fe43 	bl	80027fc <LL_RCC_MSI_GetRangeAfterStandby>
 8002b76:	4603      	mov	r3, r0
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf8 <RCC_GetSystemClockFreq+0x114>)
 8002b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b80:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002b82:	e033      	b.n	8002bec <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002b84:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <RCC_GetSystemClockFreq+0x118>)
 8002b86:	607b      	str	r3, [r7, #4]
      break;
 8002b88:	e030      	b.n	8002bec <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c00 <RCC_GetSystemClockFreq+0x11c>)
 8002b8c:	607b      	str	r3, [r7, #4]
      break;
 8002b8e:	e02d      	b.n	8002bec <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002b90:	f000 f876 	bl	8002c80 <RCC_PLL_GetFreqDomain_SYS>
 8002b94:	6078      	str	r0, [r7, #4]
      break;
 8002b96:	e029      	b.n	8002bec <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002b98:	f7ff fe10 	bl	80027bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d111      	bne.n	8002bc6 <RCC_GetSystemClockFreq+0xe2>
 8002ba2:	f7ff fe0b 	bl	80027bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d004      	beq.n	8002bb6 <RCC_GetSystemClockFreq+0xd2>
 8002bac:	f7ff fe18 	bl	80027e0 <LL_RCC_MSI_GetRange>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	e003      	b.n	8002bbe <RCC_GetSystemClockFreq+0xda>
 8002bb6:	f7ff fe21 	bl	80027fc <LL_RCC_MSI_GetRangeAfterStandby>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf8 <RCC_GetSystemClockFreq+0x114>)
 8002bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc4:	e010      	b.n	8002be8 <RCC_GetSystemClockFreq+0x104>
 8002bc6:	f7ff fdf9 	bl	80027bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <RCC_GetSystemClockFreq+0xf6>
 8002bd0:	f7ff fe06 	bl	80027e0 <LL_RCC_MSI_GetRange>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	e003      	b.n	8002be2 <RCC_GetSystemClockFreq+0xfe>
 8002bda:	f7ff fe0f 	bl	80027fc <LL_RCC_MSI_GetRangeAfterStandby>
 8002bde:	4603      	mov	r3, r0
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	4a05      	ldr	r2, [pc, #20]	@ (8002bf8 <RCC_GetSystemClockFreq+0x114>)
 8002be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002bea:	bf00      	nop
  }

  return frequency;
 8002bec:	687b      	ldr	r3, [r7, #4]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	08005b78 	.word	0x08005b78
 8002bfc:	00f42400 	.word	0x00f42400
 8002c00:	007a1200 	.word	0x007a1200

08002c04 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002c0c:	f7ff fe12 	bl	8002834 <LL_RCC_GetAHBPrescaler>
 8002c10:	4603      	mov	r3, r0
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	4a04      	ldr	r2, [pc, #16]	@ (8002c2c <RCC_GetHCLKClockFreq+0x28>)
 8002c1a:	5cd3      	ldrb	r3, [r2, r3]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	40d3      	lsrs	r3, r2
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	08005b60 	.word	0x08005b60

08002c30 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002c38:	f7ff fe0a 	bl	8002850 <LL_RCC_GetAPB1Prescaler>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	4a04      	ldr	r2, [pc, #16]	@ (8002c54 <RCC_GetPCLK1ClockFreq+0x24>)
 8002c42:	5cd3      	ldrb	r3, [r2, r3]
 8002c44:	461a      	mov	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	40d3      	lsrs	r3, r2
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	08005b70 	.word	0x08005b70

08002c58 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002c60:	f7ff fe04 	bl	800286c <LL_RCC_GetAPB2Prescaler>
 8002c64:	4603      	mov	r3, r0
 8002c66:	0adb      	lsrs	r3, r3, #11
 8002c68:	4a04      	ldr	r2, [pc, #16]	@ (8002c7c <RCC_GetPCLK2ClockFreq+0x24>)
 8002c6a:	5cd3      	ldrb	r3, [r2, r3]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	40d3      	lsrs	r3, r2
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	08005b70 	.word	0x08005b70

08002c80 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002c86:	f7ff fe13 	bl	80028b0 <LL_RCC_PLL_GetMainSource>
 8002c8a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d036      	beq.n	8002d00 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d836      	bhi.n	8002d06 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d003      	beq.n	8002ca6 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d02a      	beq.n	8002cfa <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8002ca4:	e02f      	b.n	8002d06 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002ca6:	f7ff fd89 	bl	80027bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d111      	bne.n	8002cd4 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8002cb0:	f7ff fd84 	bl	80027bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d004      	beq.n	8002cc4 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8002cba:	f7ff fd91 	bl	80027e0 <LL_RCC_MSI_GetRange>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	e003      	b.n	8002ccc <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8002cc4:	f7ff fd9a 	bl	80027fc <LL_RCC_MSI_GetRangeAfterStandby>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	4a2f      	ldr	r2, [pc, #188]	@ (8002d8c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd2:	e010      	b.n	8002cf6 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8002cd4:	f7ff fd72 	bl	80027bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8002cde:	f7ff fd7f 	bl	80027e0 <LL_RCC_MSI_GetRange>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	e003      	b.n	8002cf0 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8002ce8:	f7ff fd88 	bl	80027fc <LL_RCC_MSI_GetRangeAfterStandby>
 8002cec:	4603      	mov	r3, r0
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	4a26      	ldr	r2, [pc, #152]	@ (8002d8c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf6:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002cf8:	e02f      	b.n	8002d5a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002cfa:	4b25      	ldr	r3, [pc, #148]	@ (8002d90 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8002cfc:	607b      	str	r3, [r7, #4]
      break;
 8002cfe:	e02c      	b.n	8002d5a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002d00:	4b24      	ldr	r3, [pc, #144]	@ (8002d94 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8002d02:	607b      	str	r3, [r7, #4]
      break;
 8002d04:	e029      	b.n	8002d5a <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002d06:	f7ff fd59 	bl	80027bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d111      	bne.n	8002d34 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8002d10:	f7ff fd54 	bl	80027bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d004      	beq.n	8002d24 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8002d1a:	f7ff fd61 	bl	80027e0 <LL_RCC_MSI_GetRange>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	e003      	b.n	8002d2c <RCC_PLL_GetFreqDomain_SYS+0xac>
 8002d24:	f7ff fd6a 	bl	80027fc <LL_RCC_MSI_GetRangeAfterStandby>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	4a17      	ldr	r2, [pc, #92]	@ (8002d8c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d32:	e010      	b.n	8002d56 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8002d34:	f7ff fd42 	bl	80027bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d004      	beq.n	8002d48 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8002d3e:	f7ff fd4f 	bl	80027e0 <LL_RCC_MSI_GetRange>
 8002d42:	4603      	mov	r3, r0
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	e003      	b.n	8002d50 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8002d48:	f7ff fd58 	bl	80027fc <LL_RCC_MSI_GetRangeAfterStandby>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	4a0e      	ldr	r2, [pc, #56]	@ (8002d8c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d56:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002d58:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002d5a:	f7ff fdd3 	bl	8002904 <LL_RCC_PLL_GetDivider>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	3301      	adds	r3, #1
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	fbb2 f4f3 	udiv	r4, r2, r3
 8002d6a:	f7ff fdaf 	bl	80028cc <LL_RCC_PLL_GetN>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	fb03 f404 	mul.w	r4, r3, r4
 8002d74:	f7ff fdb8 	bl	80028e8 <LL_RCC_PLL_GetR>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	0e5b      	lsrs	r3, r3, #25
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd90      	pop	{r4, r7, pc}
 8002d8c:	08005b78 	.word	0x08005b78
 8002d90:	00f42400 	.word	0x00f42400
 8002d94:	007a1200 	.word	0x007a1200

08002d98 <LL_USART_IsEnabled>:
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <LL_USART_IsEnabled+0x18>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <LL_USART_IsEnabled+0x1a>
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_USART_SetStopBitsLength>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	605a      	str	r2, [r3, #4]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_USART_SetHWFlowCtrl>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	609a      	str	r2, [r3, #8]
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <LL_USART_SetBaudRate>:
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b087      	sub	sp, #28
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e1e:	d11a      	bne.n	8002e56 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	005a      	lsls	r2, r3, #1
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	441a      	add	r2, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	60da      	str	r2, [r3, #12]
}
 8002e54:	e00a      	b.n	8002e6c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	085a      	lsrs	r2, r3, #1
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	441a      	add	r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	60da      	str	r2, [r3, #12]
}
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ff84 	bl	8002d98 <LL_USART_IsEnabled>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d148      	bne.n	8002f28 <LL_USART_Init+0xb0>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b26      	ldr	r3, [pc, #152]	@ (8002f34 <LL_USART_Init+0xbc>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	6851      	ldr	r1, [r2, #4]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	68d2      	ldr	r2, [r2, #12]
 8002ea6:	4311      	orrs	r1, r2
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	6912      	ldr	r2, [r2, #16]
 8002eac:	4311      	orrs	r1, r2
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	6992      	ldr	r2, [r2, #24]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ff7c 	bl	8002dbe <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff ff89 	bl	8002de4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a18      	ldr	r2, [pc, #96]	@ (8002f38 <LL_USART_Init+0xc0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d104      	bne.n	8002ee4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002eda:	2003      	movs	r0, #3
 8002edc:	f7ff fd20 	bl	8002920 <LL_RCC_GetUSARTClockFreq>
 8002ee0:	60b8      	str	r0, [r7, #8]
 8002ee2:	e010      	b.n	8002f06 <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a15      	ldr	r2, [pc, #84]	@ (8002f3c <LL_USART_Init+0xc4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d104      	bne.n	8002ef6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002eec:	200c      	movs	r0, #12
 8002eee:	f7ff fd17 	bl	8002920 <LL_RCC_GetUSARTClockFreq>
 8002ef2:	60b8      	str	r0, [r7, #8]
 8002ef4:	e007      	b.n	8002f06 <LL_USART_Init+0x8e>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a11      	ldr	r2, [pc, #68]	@ (8002f40 <LL_USART_Init+0xc8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d103      	bne.n	8002f06 <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002efe:	2030      	movs	r0, #48	@ 0x30
 8002f00:	f7ff fd0e 	bl	8002920 <LL_RCC_GetUSARTClockFreq>
 8002f04:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00d      	beq.n	8002f28 <LL_USART_Init+0xb0>
        && (USART_InitStruct->BaudRate != 0U))
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <LL_USART_Init+0xb0>
    {
      status = SUCCESS;
 8002f14:	2300      	movs	r3, #0
 8002f16:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff ff71 	bl	8002e0a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	efff69f3 	.word	0xefff69f3
 8002f38:	40013800 	.word	0x40013800
 8002f3c:	40004400 	.word	0x40004400
 8002f40:	40004800 	.word	0x40004800

08002f44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f56:	2b84      	cmp	r3, #132	@ 0x84
 8002f58:	d005      	beq.n	8002f66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002f5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4413      	add	r3, r2
 8002f62:	3303      	adds	r3, #3
 8002f64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002f66:	68fb      	ldr	r3, [r7, #12]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002f78:	f000 fff4 	bl	8003f64 <vTaskStartScheduler>
  
  return osOK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f84:	b089      	sub	sp, #36	@ 0x24
 8002f86:	af04      	add	r7, sp, #16
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <osThreadCreate+0x54>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01c      	beq.n	8002fd6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685c      	ldr	r4, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691e      	ldr	r6, [r3, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff ffc8 	bl	8002f44 <makeFreeRtosPriority>
 8002fb4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fbe:	9202      	str	r2, [sp, #8]
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	9100      	str	r1, [sp, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	4632      	mov	r2, r6
 8002fc8:	4629      	mov	r1, r5
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f000 fde4 	bl	8003b98 <xTaskCreateStatic>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	e01c      	b.n	8003010 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685c      	ldr	r4, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fe2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff ffaa 	bl	8002f44 <makeFreeRtosPriority>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	f107 030c 	add.w	r3, r7, #12
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	9200      	str	r2, [sp, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	4632      	mov	r2, r6
 8002ffe:	4629      	mov	r1, r5
 8003000:	4620      	mov	r0, r4
 8003002:	f000 fe29 	bl	8003c58 <xTaskCreate>
 8003006:	4603      	mov	r3, r0
 8003008:	2b01      	cmp	r3, #1
 800300a:	d001      	beq.n	8003010 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	e000      	b.n	8003012 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003010:	68fb      	ldr	r3, [r7, #12]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800301a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <osDelay+0x16>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	e000      	b.n	8003032 <osDelay+0x18>
 8003030:	2301      	movs	r3, #1
 8003032:	4618      	mov	r0, r3
 8003034:	f000 ff60 	bl	8003ef8 <vTaskDelay>
  
  return osOK;
 8003038:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f103 0208 	add.w	r2, r3, #8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f04f 32ff 	mov.w	r2, #4294967295
 800305a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f103 0208 	add.w	r2, r3, #8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f103 0208 	add.w	r2, r3, #8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	601a      	str	r2, [r3, #0]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fa:	d103      	bne.n	8003104 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	e00c      	b.n	800311e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3308      	adds	r3, #8
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e002      	b.n	8003112 <vListInsert+0x2e>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	429a      	cmp	r2, r3
 800311c:	d2f6      	bcs.n	800310c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	601a      	str	r2, [r3, #0]
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6892      	ldr	r2, [r2, #8]
 800316c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6852      	ldr	r2, [r2, #4]
 8003176:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	429a      	cmp	r2, r3
 8003180:	d103      	bne.n	800318a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	1e5a      	subs	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10b      	bne.n	80031d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031d2:	bf00      	nop
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80031d8:	f002 f89e 	bl	8005318 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e4:	68f9      	ldr	r1, [r7, #12]
 80031e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	441a      	add	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003208:	3b01      	subs	r3, #1
 800320a:	68f9      	ldr	r1, [r7, #12]
 800320c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	441a      	add	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	22ff      	movs	r2, #255	@ 0xff
 800321c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	22ff      	movs	r2, #255	@ 0xff
 8003224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d114      	bne.n	8003258 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01a      	beq.n	800326c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3310      	adds	r3, #16
 800323a:	4618      	mov	r0, r3
 800323c:	f001 f92e 	bl	800449c <xTaskRemoveFromEventList>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d012      	beq.n	800326c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003246:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <xQueueGenericReset+0xd0>)
 8003248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	e009      	b.n	800326c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3310      	adds	r3, #16
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fef0 	bl	8003042 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3324      	adds	r3, #36	@ 0x24
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff feeb 	bl	8003042 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800326c:	f002 f886 	bl	800537c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003270:	2301      	movs	r3, #1
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	e000ed04 	.word	0xe000ed04

08003280 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08e      	sub	sp, #56	@ 0x38
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	e7fd      	b.n	80032a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10b      	bne.n	80032ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	e7fd      	b.n	80032c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <xQueueGenericCreateStatic+0x56>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <xQueueGenericCreateStatic+0x5a>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <xQueueGenericCreateStatic+0x5c>
 80032da:	2300      	movs	r3, #0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10b      	bne.n	80032f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	623b      	str	r3, [r7, #32]
}
 80032f2:	bf00      	nop
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <xQueueGenericCreateStatic+0x84>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <xQueueGenericCreateStatic+0x88>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <xQueueGenericCreateStatic+0x8a>
 8003308:	2300      	movs	r3, #0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10b      	bne.n	8003326 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	61fb      	str	r3, [r7, #28]
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop
 8003324:	e7fd      	b.n	8003322 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003326:	2348      	movs	r3, #72	@ 0x48
 8003328:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b48      	cmp	r3, #72	@ 0x48
 800332e:	d00b      	beq.n	8003348 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	61bb      	str	r3, [r7, #24]
}
 8003342:	bf00      	nop
 8003344:	bf00      	nop
 8003346:	e7fd      	b.n	8003344 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003348:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800334e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00d      	beq.n	8003370 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800335c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f805 	bl	800337a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003372:	4618      	mov	r0, r3
 8003374:	3730      	adds	r7, #48	@ 0x30
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d103      	bne.n	8003396 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e002      	b.n	800339c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033a8:	2101      	movs	r1, #1
 80033aa:	69b8      	ldr	r0, [r7, #24]
 80033ac:	f7ff fefe 	bl	80031ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08e      	sub	sp, #56	@ 0x38
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033c6:	2300      	movs	r3, #0
 80033c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80033ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10b      	bne.n	80033ec <xQueueGenericSend+0x34>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80033e6:	bf00      	nop
 80033e8:	bf00      	nop
 80033ea:	e7fd      	b.n	80033e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d103      	bne.n	80033fa <xQueueGenericSend+0x42>
 80033f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <xQueueGenericSend+0x46>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <xQueueGenericSend+0x48>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <xQueueGenericSend+0x64>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003416:	bf00      	nop
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d103      	bne.n	800342a <xQueueGenericSend+0x72>
 8003422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <xQueueGenericSend+0x76>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <xQueueGenericSend+0x78>
 800342e:	2300      	movs	r3, #0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <xQueueGenericSend+0x94>
	__asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	623b      	str	r3, [r7, #32]
}
 8003446:	bf00      	nop
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800344c:	f001 f9ec 	bl	8004828 <xTaskGetSchedulerState>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <xQueueGenericSend+0xa4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <xQueueGenericSend+0xa8>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <xQueueGenericSend+0xaa>
 8003460:	2300      	movs	r3, #0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <xQueueGenericSend+0xc6>
	__asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	61fb      	str	r3, [r7, #28]
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	e7fd      	b.n	800347a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800347e:	f001 ff4b 	bl	8005318 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <xQueueGenericSend+0xdc>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d129      	bne.n	80034e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800349a:	f000 fa0f 	bl	80038bc <prvCopyDataToQueue>
 800349e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d010      	beq.n	80034ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034aa:	3324      	adds	r3, #36	@ 0x24
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fff5 	bl	800449c <xTaskRemoveFromEventList>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d013      	beq.n	80034e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034b8:	4b3f      	ldr	r3, [pc, #252]	@ (80035b8 <xQueueGenericSend+0x200>)
 80034ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	e00a      	b.n	80034e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034d0:	4b39      	ldr	r3, [pc, #228]	@ (80035b8 <xQueueGenericSend+0x200>)
 80034d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034e0:	f001 ff4c 	bl	800537c <vPortExitCritical>
				return pdPASS;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e063      	b.n	80035b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d103      	bne.n	80034f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034ee:	f001 ff45 	bl	800537c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e05c      	b.n	80035b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	4618      	mov	r0, r3
 8003502:	f001 f82f 	bl	8004564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003506:	2301      	movs	r3, #1
 8003508:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800350a:	f001 ff37 	bl	800537c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800350e:	f000 fd99 	bl	8004044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003512:	f001 ff01 	bl	8005318 <vPortEnterCritical>
 8003516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800351c:	b25b      	sxtb	r3, r3
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d103      	bne.n	800352c <xQueueGenericSend+0x174>
 8003524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003532:	b25b      	sxtb	r3, r3
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d103      	bne.n	8003542 <xQueueGenericSend+0x18a>
 800353a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003542:	f001 ff1b 	bl	800537c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003546:	1d3a      	adds	r2, r7, #4
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f001 f81e 	bl	8004590 <xTaskCheckForTimeOut>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d124      	bne.n	80035a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800355a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800355c:	f000 faa6 	bl	8003aac <prvIsQueueFull>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d018      	beq.n	8003598 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	3310      	adds	r3, #16
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f000 ff42 	bl	80043f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003576:	f000 fa31 	bl	80039dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800357a:	f000 fd71 	bl	8004060 <xTaskResumeAll>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	f47f af7c 	bne.w	800347e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <xQueueGenericSend+0x200>)
 8003588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	e772      	b.n	800347e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800359a:	f000 fa1f 	bl	80039dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800359e:	f000 fd5f 	bl	8004060 <xTaskResumeAll>
 80035a2:	e76c      	b.n	800347e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035a6:	f000 fa19 	bl	80039dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035aa:	f000 fd59 	bl	8004060 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3738      	adds	r7, #56	@ 0x38
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b090      	sub	sp, #64	@ 0x40
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80035ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d103      	bne.n	80035fa <xQueueGenericSendFromISR+0x3e>
 80035f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <xQueueGenericSendFromISR+0x42>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <xQueueGenericSendFromISR+0x44>
 80035fe:	2300      	movs	r3, #0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10b      	bne.n	800361c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	e7fd      	b.n	8003618 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d103      	bne.n	800362a <xQueueGenericSendFromISR+0x6e>
 8003622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <xQueueGenericSendFromISR+0x72>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <xQueueGenericSendFromISR+0x74>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10b      	bne.n	800364c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	623b      	str	r3, [r7, #32]
}
 8003646:	bf00      	nop
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800364c:	f001 ff44 	bl	80054d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003650:	f3ef 8211 	mrs	r2, BASEPRI
 8003654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	61fa      	str	r2, [r7, #28]
 8003666:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003668:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800366a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800366c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800366e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003674:	429a      	cmp	r2, r3
 8003676:	d302      	bcc.n	800367e <xQueueGenericSendFromISR+0xc2>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d12f      	bne.n	80036de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800367e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003680:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003684:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003694:	f000 f912 	bl	80038bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003698:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d112      	bne.n	80036c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d016      	beq.n	80036d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ac:	3324      	adds	r3, #36	@ 0x24
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fef4 	bl	800449c <xTaskRemoveFromEventList>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00e      	beq.n	80036d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e007      	b.n	80036d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036cc:	3301      	adds	r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	b25a      	sxtb	r2, r3
 80036d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80036d8:	2301      	movs	r3, #1
 80036da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80036dc:	e001      	b.n	80036e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3740      	adds	r7, #64	@ 0x40
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08c      	sub	sp, #48	@ 0x30
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003704:	2300      	movs	r3, #0
 8003706:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10b      	bne.n	800372a <xQueueReceive+0x32>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	623b      	str	r3, [r7, #32]
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	e7fd      	b.n	8003726 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d103      	bne.n	8003738 <xQueueReceive+0x40>
 8003730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <xQueueReceive+0x44>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <xQueueReceive+0x46>
 800373c:	2300      	movs	r3, #0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10b      	bne.n	800375a <xQueueReceive+0x62>
	__asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	61fb      	str	r3, [r7, #28]
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	e7fd      	b.n	8003756 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800375a:	f001 f865 	bl	8004828 <xTaskGetSchedulerState>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <xQueueReceive+0x72>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <xQueueReceive+0x76>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <xQueueReceive+0x78>
 800376e:	2300      	movs	r3, #0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10b      	bne.n	800378c <xQueueReceive+0x94>
	__asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	61bb      	str	r3, [r7, #24]
}
 8003786:	bf00      	nop
 8003788:	bf00      	nop
 800378a:	e7fd      	b.n	8003788 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800378c:	f001 fdc4 	bl	8005318 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01f      	beq.n	80037dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037a0:	f000 f8f6 	bl	8003990 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a6:	1e5a      	subs	r2, r3, #1
 80037a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00f      	beq.n	80037d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b6:	3310      	adds	r3, #16
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fe6f 	bl	800449c <xTaskRemoveFromEventList>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037c4:	4b3c      	ldr	r3, [pc, #240]	@ (80038b8 <xQueueReceive+0x1c0>)
 80037c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037d4:	f001 fdd2 	bl	800537c <vPortExitCritical>
				return pdPASS;
 80037d8:	2301      	movs	r3, #1
 80037da:	e069      	b.n	80038b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037e2:	f001 fdcb 	bl	800537c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e062      	b.n	80038b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d106      	bne.n	80037fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037f0:	f107 0310 	add.w	r3, r7, #16
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 feb5 	bl	8004564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037fa:	2301      	movs	r3, #1
 80037fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037fe:	f001 fdbd 	bl	800537c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003802:	f000 fc1f 	bl	8004044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003806:	f001 fd87 	bl	8005318 <vPortEnterCritical>
 800380a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003810:	b25b      	sxtb	r3, r3
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d103      	bne.n	8003820 <xQueueReceive+0x128>
 8003818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003822:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003826:	b25b      	sxtb	r3, r3
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d103      	bne.n	8003836 <xQueueReceive+0x13e>
 800382e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003836:	f001 fda1 	bl	800537c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800383a:	1d3a      	adds	r2, r7, #4
 800383c:	f107 0310 	add.w	r3, r7, #16
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fea4 	bl	8004590 <xTaskCheckForTimeOut>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d123      	bne.n	8003896 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800384e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003850:	f000 f916 	bl	8003a80 <prvIsQueueEmpty>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d017      	beq.n	800388a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800385a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385c:	3324      	adds	r3, #36	@ 0x24
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fdc8 	bl	80043f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003868:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800386a:	f000 f8b7 	bl	80039dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800386e:	f000 fbf7 	bl	8004060 <xTaskResumeAll>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d189      	bne.n	800378c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003878:	4b0f      	ldr	r3, [pc, #60]	@ (80038b8 <xQueueReceive+0x1c0>)
 800387a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	e780      	b.n	800378c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800388a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800388c:	f000 f8a6 	bl	80039dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003890:	f000 fbe6 	bl	8004060 <xTaskResumeAll>
 8003894:	e77a      	b.n	800378c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003898:	f000 f8a0 	bl	80039dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800389c:	f000 fbe0 	bl	8004060 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038a2:	f000 f8ed 	bl	8003a80 <prvIsQueueEmpty>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f43f af6f 	beq.w	800378c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3730      	adds	r7, #48	@ 0x30
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10d      	bne.n	80038f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d14d      	bne.n	800397e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 ffbc 	bl	8004864 <xTaskPriorityDisinherit>
 80038ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	e043      	b.n	800397e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d119      	bne.n	8003930 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6858      	ldr	r0, [r3, #4]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003904:	461a      	mov	r2, r3
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	f002 f89a 	bl	8005a40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	441a      	add	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	d32b      	bcc.n	800397e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	e026      	b.n	800397e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68d8      	ldr	r0, [r3, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	461a      	mov	r2, r3
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	f002 f880 	bl	8005a40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	425b      	negs	r3, r3
 800394a:	441a      	add	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d207      	bcs.n	800396c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	425b      	negs	r3, r3
 8003966:	441a      	add	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d105      	bne.n	800397e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	3b01      	subs	r3, #1
 800397c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003986:	697b      	ldr	r3, [r7, #20]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d018      	beq.n	80039d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	441a      	add	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d303      	bcc.n	80039c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68d9      	ldr	r1, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039cc:	461a      	mov	r2, r3
 80039ce:	6838      	ldr	r0, [r7, #0]
 80039d0:	f002 f836 	bl	8005a40 <memcpy>
	}
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039e4:	f001 fc98 	bl	8005318 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039f0:	e011      	b.n	8003a16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d012      	beq.n	8003a20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3324      	adds	r3, #36	@ 0x24
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fd4c 	bl	800449c <xTaskRemoveFromEventList>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a0a:	f000 fe25 	bl	8004658 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	dce9      	bgt.n	80039f2 <prvUnlockQueue+0x16>
 8003a1e:	e000      	b.n	8003a22 <prvUnlockQueue+0x46>
					break;
 8003a20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	22ff      	movs	r2, #255	@ 0xff
 8003a26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003a2a:	f001 fca7 	bl	800537c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a2e:	f001 fc73 	bl	8005318 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a3a:	e011      	b.n	8003a60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d012      	beq.n	8003a6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3310      	adds	r3, #16
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fd27 	bl	800449c <xTaskRemoveFromEventList>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a54:	f000 fe00 	bl	8004658 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a58:	7bbb      	ldrb	r3, [r7, #14]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	dce9      	bgt.n	8003a3c <prvUnlockQueue+0x60>
 8003a68:	e000      	b.n	8003a6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	22ff      	movs	r2, #255	@ 0xff
 8003a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003a74:	f001 fc82 	bl	800537c <vPortExitCritical>
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a88:	f001 fc46 	bl	8005318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d102      	bne.n	8003a9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a94:	2301      	movs	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e001      	b.n	8003a9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a9e:	f001 fc6d 	bl	800537c <vPortExitCritical>

	return xReturn;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ab4:	f001 fc30 	bl	8005318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d102      	bne.n	8003aca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e001      	b.n	8003ace <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ace:	f001 fc55 	bl	800537c <vPortExitCritical>

	return xReturn;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e014      	b.n	8003b16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003aec:	4a0f      	ldr	r2, [pc, #60]	@ (8003b2c <vQueueAddToRegistry+0x50>)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003af8:	490c      	ldr	r1, [pc, #48]	@ (8003b2c <vQueueAddToRegistry+0x50>)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b02:	4a0a      	ldr	r2, [pc, #40]	@ (8003b2c <vQueueAddToRegistry+0x50>)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b0e:	e006      	b.n	8003b1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3301      	adds	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b07      	cmp	r3, #7
 8003b1a:	d9e7      	bls.n	8003aec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000b34 	.word	0x20000b34

08003b30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b40:	f001 fbea 	bl	8005318 <vPortEnterCritical>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b4a:	b25b      	sxtb	r3, r3
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d103      	bne.n	8003b5a <vQueueWaitForMessageRestricted+0x2a>
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b60:	b25b      	sxtb	r3, r3
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d103      	bne.n	8003b70 <vQueueWaitForMessageRestricted+0x40>
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b70:	f001 fc04 	bl	800537c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3324      	adds	r3, #36	@ 0x24
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fc5d 	bl	8004444 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b8a:	6978      	ldr	r0, [r7, #20]
 8003b8c:	f7ff ff26 	bl	80039dc <prvUnlockQueue>
	}
 8003b90:	bf00      	nop
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08e      	sub	sp, #56	@ 0x38
 8003b9c:	af04      	add	r7, sp, #16
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	623b      	str	r3, [r7, #32]
}
 8003bbe:	bf00      	nop
 8003bc0:	bf00      	nop
 8003bc2:	e7fd      	b.n	8003bc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10b      	bne.n	8003be2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	61fb      	str	r3, [r7, #28]
}
 8003bdc:	bf00      	nop
 8003bde:	bf00      	nop
 8003be0:	e7fd      	b.n	8003bde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003be2:	23a0      	movs	r3, #160	@ 0xa0
 8003be4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2ba0      	cmp	r3, #160	@ 0xa0
 8003bea:	d00b      	beq.n	8003c04 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	61bb      	str	r3, [r7, #24]
}
 8003bfe:	bf00      	nop
 8003c00:	bf00      	nop
 8003c02:	e7fd      	b.n	8003c00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01e      	beq.n	8003c4a <xTaskCreateStatic+0xb2>
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01b      	beq.n	8003c4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c24:	2300      	movs	r3, #0
 8003c26:	9303      	str	r3, [sp, #12]
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	9302      	str	r3, [sp, #8]
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f851 	bl	8003ce4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c44:	f000 f8ee 	bl	8003e24 <prvAddNewTaskToReadyList>
 8003c48:	e001      	b.n	8003c4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c4e:	697b      	ldr	r3, [r7, #20]
	}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3728      	adds	r7, #40	@ 0x28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08c      	sub	sp, #48	@ 0x30
 8003c5c:	af04      	add	r7, sp, #16
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fc75 	bl	800555c <pvPortMalloc>
 8003c72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00e      	beq.n	8003c98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c7a:	20a0      	movs	r0, #160	@ 0xa0
 8003c7c:	f001 fc6e 	bl	800555c <pvPortMalloc>
 8003c80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c8e:	e005      	b.n	8003c9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c90:	6978      	ldr	r0, [r7, #20]
 8003c92:	f001 fd31 	bl	80056f8 <vPortFree>
 8003c96:	e001      	b.n	8003c9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d017      	beq.n	8003cd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003caa:	88fa      	ldrh	r2, [r7, #6]
 8003cac:	2300      	movs	r3, #0
 8003cae:	9303      	str	r3, [sp, #12]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	9302      	str	r3, [sp, #8]
 8003cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f80f 	bl	8003ce4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cc6:	69f8      	ldr	r0, [r7, #28]
 8003cc8:	f000 f8ac 	bl	8003e24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	e002      	b.n	8003cd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cd8:	69bb      	ldr	r3, [r7, #24]
	}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f023 0307 	bic.w	r3, r3, #7
 8003d0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	617b      	str	r3, [r7, #20]
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	e7fd      	b.n	8003d2a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01f      	beq.n	8003d74 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d34:	2300      	movs	r3, #0
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	e012      	b.n	8003d60 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	7819      	ldrb	r1, [r3, #0]
 8003d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	4413      	add	r3, r2
 8003d48:	3334      	adds	r3, #52	@ 0x34
 8003d4a:	460a      	mov	r2, r1
 8003d4c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	4413      	add	r3, r2
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d006      	beq.n	8003d68 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	61fb      	str	r3, [r7, #28]
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b0f      	cmp	r3, #15
 8003d64:	d9e9      	bls.n	8003d3a <prvInitialiseNewTask+0x56>
 8003d66:	e000      	b.n	8003d6a <prvInitialiseNewTask+0x86>
			{
				break;
 8003d68:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d72:	e003      	b.n	8003d7c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7e:	2b06      	cmp	r3, #6
 8003d80:	d901      	bls.n	8003d86 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d82:	2306      	movs	r3, #6
 8003d84:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d90:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d94:	2200      	movs	r2, #0
 8003d96:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff f970 	bl	8003082 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da4:	3318      	adds	r3, #24
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff f96b 	bl	8003082 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db4:	f1c3 0207 	rsb	r2, r3, #7
 8003db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd4:	334c      	adds	r3, #76	@ 0x4c
 8003dd6:	224c      	movs	r2, #76	@ 0x4c
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f001 fdac 	bl	8005938 <memset>
 8003de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de2:	4a0d      	ldr	r2, [pc, #52]	@ (8003e18 <prvInitialiseNewTask+0x134>)
 8003de4:	651a      	str	r2, [r3, #80]	@ 0x50
 8003de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e1c <prvInitialiseNewTask+0x138>)
 8003dea:	655a      	str	r2, [r3, #84]	@ 0x54
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dee:	4a0c      	ldr	r2, [pc, #48]	@ (8003e20 <prvInitialiseNewTask+0x13c>)
 8003df0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	68f9      	ldr	r1, [r7, #12]
 8003df6:	69b8      	ldr	r0, [r7, #24]
 8003df8:	f001 f960 	bl	80050bc <pxPortInitialiseStack>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e0e:	bf00      	nop
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	2000aa04 	.word	0x2000aa04
 8003e1c:	2000aa6c 	.word	0x2000aa6c
 8003e20:	2000aad4 	.word	0x2000aad4

08003e24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e2c:	f001 fa74 	bl	8005318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e30:	4b2a      	ldr	r3, [pc, #168]	@ (8003edc <prvAddNewTaskToReadyList+0xb8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3301      	adds	r3, #1
 8003e36:	4a29      	ldr	r2, [pc, #164]	@ (8003edc <prvAddNewTaskToReadyList+0xb8>)
 8003e38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e3a:	4b29      	ldr	r3, [pc, #164]	@ (8003ee0 <prvAddNewTaskToReadyList+0xbc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e42:	4a27      	ldr	r2, [pc, #156]	@ (8003ee0 <prvAddNewTaskToReadyList+0xbc>)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e48:	4b24      	ldr	r3, [pc, #144]	@ (8003edc <prvAddNewTaskToReadyList+0xb8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d110      	bne.n	8003e72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e50:	f000 fc26 	bl	80046a0 <prvInitialiseTaskLists>
 8003e54:	e00d      	b.n	8003e72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e56:	4b23      	ldr	r3, [pc, #140]	@ (8003ee4 <prvAddNewTaskToReadyList+0xc0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ee0 <prvAddNewTaskToReadyList+0xbc>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d802      	bhi.n	8003e72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee0 <prvAddNewTaskToReadyList+0xbc>)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e72:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee8 <prvAddNewTaskToReadyList+0xc4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3301      	adds	r3, #1
 8003e78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee8 <prvAddNewTaskToReadyList+0xc4>)
 8003e7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	2201      	movs	r2, #1
 8003e82:	409a      	lsls	r2, r3
 8003e84:	4b19      	ldr	r3, [pc, #100]	@ (8003eec <prvAddNewTaskToReadyList+0xc8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	4a18      	ldr	r2, [pc, #96]	@ (8003eec <prvAddNewTaskToReadyList+0xc8>)
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4a15      	ldr	r2, [pc, #84]	@ (8003ef0 <prvAddNewTaskToReadyList+0xcc>)
 8003e9c:	441a      	add	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7ff f8f9 	bl	800309c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003eaa:	f001 fa67 	bl	800537c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003eae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee4 <prvAddNewTaskToReadyList+0xc0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00e      	beq.n	8003ed4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee0 <prvAddNewTaskToReadyList+0xbc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d207      	bcs.n	8003ed4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <prvAddNewTaskToReadyList+0xd0>)
 8003ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000c74 	.word	0x20000c74
 8003ee0:	20000b74 	.word	0x20000b74
 8003ee4:	20000c80 	.word	0x20000c80
 8003ee8:	20000c90 	.word	0x20000c90
 8003eec:	20000c7c 	.word	0x20000c7c
 8003ef0:	20000b78 	.word	0x20000b78
 8003ef4:	e000ed04 	.word	0xe000ed04

08003ef8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d018      	beq.n	8003f3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f0a:	4b14      	ldr	r3, [pc, #80]	@ (8003f5c <vTaskDelay+0x64>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <vTaskDelay+0x32>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	60bb      	str	r3, [r7, #8]
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	e7fd      	b.n	8003f26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f2a:	f000 f88b 	bl	8004044 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f2e:	2100      	movs	r1, #0
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fd1f 	bl	8004974 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f36:	f000 f893 	bl	8004060 <xTaskResumeAll>
 8003f3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d107      	bne.n	8003f52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003f42:	4b07      	ldr	r3, [pc, #28]	@ (8003f60 <vTaskDelay+0x68>)
 8003f44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000c9c 	.word	0x20000c9c
 8003f60:	e000ed04 	.word	0xe000ed04

08003f64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	@ 0x28
 8003f68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f72:	463a      	mov	r2, r7
 8003f74:	1d39      	adds	r1, r7, #4
 8003f76:	f107 0308 	add.w	r3, r7, #8
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fc f928 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f80:	6839      	ldr	r1, [r7, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	9202      	str	r2, [sp, #8]
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	460a      	mov	r2, r1
 8003f92:	4924      	ldr	r1, [pc, #144]	@ (8004024 <vTaskStartScheduler+0xc0>)
 8003f94:	4824      	ldr	r0, [pc, #144]	@ (8004028 <vTaskStartScheduler+0xc4>)
 8003f96:	f7ff fdff 	bl	8003b98 <xTaskCreateStatic>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4a23      	ldr	r2, [pc, #140]	@ (800402c <vTaskStartScheduler+0xc8>)
 8003f9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fa0:	4b22      	ldr	r3, [pc, #136]	@ (800402c <vTaskStartScheduler+0xc8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	e001      	b.n	8003fb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d102      	bne.n	8003fbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003fb8:	f000 fd42 	bl	8004a40 <xTimerCreateTimerTask>
 8003fbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d11b      	bne.n	8003ffc <vTaskStartScheduler+0x98>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	613b      	str	r3, [r7, #16]
}
 8003fd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fd8:	4b15      	ldr	r3, [pc, #84]	@ (8004030 <vTaskStartScheduler+0xcc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	334c      	adds	r3, #76	@ 0x4c
 8003fde:	4a15      	ldr	r2, [pc, #84]	@ (8004034 <vTaskStartScheduler+0xd0>)
 8003fe0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fe2:	4b15      	ldr	r3, [pc, #84]	@ (8004038 <vTaskStartScheduler+0xd4>)
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fea:	4b14      	ldr	r3, [pc, #80]	@ (800403c <vTaskStartScheduler+0xd8>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ff0:	4b13      	ldr	r3, [pc, #76]	@ (8004040 <vTaskStartScheduler+0xdc>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ff6:	f001 f8eb 	bl	80051d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ffa:	e00f      	b.n	800401c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d10b      	bne.n	800401c <vTaskStartScheduler+0xb8>
	__asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	60fb      	str	r3, [r7, #12]
}
 8004016:	bf00      	nop
 8004018:	bf00      	nop
 800401a:	e7fd      	b.n	8004018 <vTaskStartScheduler+0xb4>
}
 800401c:	bf00      	nop
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	08005b48 	.word	0x08005b48
 8004028:	08004671 	.word	0x08004671
 800402c:	20000c98 	.word	0x20000c98
 8004030:	20000b74 	.word	0x20000b74
 8004034:	20000010 	.word	0x20000010
 8004038:	20000c94 	.word	0x20000c94
 800403c:	20000c80 	.word	0x20000c80
 8004040:	20000c78 	.word	0x20000c78

08004044 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004048:	4b04      	ldr	r3, [pc, #16]	@ (800405c <vTaskSuspendAll+0x18>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3301      	adds	r3, #1
 800404e:	4a03      	ldr	r2, [pc, #12]	@ (800405c <vTaskSuspendAll+0x18>)
 8004050:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004052:	bf00      	nop
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	20000c9c 	.word	0x20000c9c

08004060 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800406a:	2300      	movs	r3, #0
 800406c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800406e:	4b42      	ldr	r3, [pc, #264]	@ (8004178 <xTaskResumeAll+0x118>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10b      	bne.n	800408e <xTaskResumeAll+0x2e>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	603b      	str	r3, [r7, #0]
}
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	e7fd      	b.n	800408a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800408e:	f001 f943 	bl	8005318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004092:	4b39      	ldr	r3, [pc, #228]	@ (8004178 <xTaskResumeAll+0x118>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3b01      	subs	r3, #1
 8004098:	4a37      	ldr	r2, [pc, #220]	@ (8004178 <xTaskResumeAll+0x118>)
 800409a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800409c:	4b36      	ldr	r3, [pc, #216]	@ (8004178 <xTaskResumeAll+0x118>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d161      	bne.n	8004168 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040a4:	4b35      	ldr	r3, [pc, #212]	@ (800417c <xTaskResumeAll+0x11c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d05d      	beq.n	8004168 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ac:	e02e      	b.n	800410c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ae:	4b34      	ldr	r3, [pc, #208]	@ (8004180 <xTaskResumeAll+0x120>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3318      	adds	r3, #24
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff f84b 	bl	8003156 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3304      	adds	r3, #4
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff f846 	bl	8003156 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	2201      	movs	r2, #1
 80040d0:	409a      	lsls	r2, r3
 80040d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004184 <xTaskResumeAll+0x124>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004184 <xTaskResumeAll+0x124>)
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4a27      	ldr	r2, [pc, #156]	@ (8004188 <xTaskResumeAll+0x128>)
 80040ea:	441a      	add	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3304      	adds	r3, #4
 80040f0:	4619      	mov	r1, r3
 80040f2:	4610      	mov	r0, r2
 80040f4:	f7fe ffd2 	bl	800309c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fc:	4b23      	ldr	r3, [pc, #140]	@ (800418c <xTaskResumeAll+0x12c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004102:	429a      	cmp	r2, r3
 8004104:	d302      	bcc.n	800410c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004106:	4b22      	ldr	r3, [pc, #136]	@ (8004190 <xTaskResumeAll+0x130>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800410c:	4b1c      	ldr	r3, [pc, #112]	@ (8004180 <xTaskResumeAll+0x120>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1cc      	bne.n	80040ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800411a:	f000 fb65 	bl	80047e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800411e:	4b1d      	ldr	r3, [pc, #116]	@ (8004194 <xTaskResumeAll+0x134>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d010      	beq.n	800414c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800412a:	f000 f847 	bl	80041bc <xTaskIncrementTick>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004134:	4b16      	ldr	r3, [pc, #88]	@ (8004190 <xTaskResumeAll+0x130>)
 8004136:	2201      	movs	r2, #1
 8004138:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3b01      	subs	r3, #1
 800413e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f1      	bne.n	800412a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004146:	4b13      	ldr	r3, [pc, #76]	@ (8004194 <xTaskResumeAll+0x134>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800414c:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <xTaskResumeAll+0x130>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d009      	beq.n	8004168 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004154:	2301      	movs	r3, #1
 8004156:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004158:	4b0f      	ldr	r3, [pc, #60]	@ (8004198 <xTaskResumeAll+0x138>)
 800415a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004168:	f001 f908 	bl	800537c <vPortExitCritical>

	return xAlreadyYielded;
 800416c:	68bb      	ldr	r3, [r7, #8]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000c9c 	.word	0x20000c9c
 800417c:	20000c74 	.word	0x20000c74
 8004180:	20000c34 	.word	0x20000c34
 8004184:	20000c7c 	.word	0x20000c7c
 8004188:	20000b78 	.word	0x20000b78
 800418c:	20000b74 	.word	0x20000b74
 8004190:	20000c88 	.word	0x20000c88
 8004194:	20000c84 	.word	0x20000c84
 8004198:	e000ed04 	.word	0xe000ed04

0800419c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041a2:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <xTaskGetTickCount+0x1c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041a8:	687b      	ldr	r3, [r7, #4]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20000c78 	.word	0x20000c78

080041bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004304 <xTaskIncrementTick+0x148>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f040 808f 	bne.w	80042ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004308 <xTaskIncrementTick+0x14c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3301      	adds	r3, #1
 80041d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004308 <xTaskIncrementTick+0x14c>)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d121      	bne.n	8004228 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80041e4:	4b49      	ldr	r3, [pc, #292]	@ (800430c <xTaskIncrementTick+0x150>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <xTaskIncrementTick+0x4a>
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	603b      	str	r3, [r7, #0]
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	e7fd      	b.n	8004202 <xTaskIncrementTick+0x46>
 8004206:	4b41      	ldr	r3, [pc, #260]	@ (800430c <xTaskIncrementTick+0x150>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	4b40      	ldr	r3, [pc, #256]	@ (8004310 <xTaskIncrementTick+0x154>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a3e      	ldr	r2, [pc, #248]	@ (800430c <xTaskIncrementTick+0x150>)
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	4a3e      	ldr	r2, [pc, #248]	@ (8004310 <xTaskIncrementTick+0x154>)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b3e      	ldr	r3, [pc, #248]	@ (8004314 <xTaskIncrementTick+0x158>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3301      	adds	r3, #1
 8004220:	4a3c      	ldr	r2, [pc, #240]	@ (8004314 <xTaskIncrementTick+0x158>)
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	f000 fae0 	bl	80047e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004228:	4b3b      	ldr	r3, [pc, #236]	@ (8004318 <xTaskIncrementTick+0x15c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	429a      	cmp	r2, r3
 8004230:	d348      	bcc.n	80042c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004232:	4b36      	ldr	r3, [pc, #216]	@ (800430c <xTaskIncrementTick+0x150>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800423c:	4b36      	ldr	r3, [pc, #216]	@ (8004318 <xTaskIncrementTick+0x15c>)
 800423e:	f04f 32ff 	mov.w	r2, #4294967295
 8004242:	601a      	str	r2, [r3, #0]
					break;
 8004244:	e03e      	b.n	80042c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004246:	4b31      	ldr	r3, [pc, #196]	@ (800430c <xTaskIncrementTick+0x150>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	429a      	cmp	r2, r3
 800425c:	d203      	bcs.n	8004266 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800425e:	4a2e      	ldr	r2, [pc, #184]	@ (8004318 <xTaskIncrementTick+0x15c>)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004264:	e02e      	b.n	80042c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	3304      	adds	r3, #4
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe ff73 	bl	8003156 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	3318      	adds	r3, #24
 800427c:	4618      	mov	r0, r3
 800427e:	f7fe ff6a 	bl	8003156 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	2201      	movs	r2, #1
 8004288:	409a      	lsls	r2, r3
 800428a:	4b24      	ldr	r3, [pc, #144]	@ (800431c <xTaskIncrementTick+0x160>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4313      	orrs	r3, r2
 8004290:	4a22      	ldr	r2, [pc, #136]	@ (800431c <xTaskIncrementTick+0x160>)
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004320 <xTaskIncrementTick+0x164>)
 80042a2:	441a      	add	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f7fe fef6 	bl	800309c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004324 <xTaskIncrementTick+0x168>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d3b9      	bcc.n	8004232 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80042be:	2301      	movs	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042c2:	e7b6      	b.n	8004232 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042c4:	4b17      	ldr	r3, [pc, #92]	@ (8004324 <xTaskIncrementTick+0x168>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ca:	4915      	ldr	r1, [pc, #84]	@ (8004320 <xTaskIncrementTick+0x164>)
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d901      	bls.n	80042e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80042dc:	2301      	movs	r3, #1
 80042de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042e0:	4b11      	ldr	r3, [pc, #68]	@ (8004328 <xTaskIncrementTick+0x16c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80042e8:	2301      	movs	r3, #1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e004      	b.n	80042f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80042ee:	4b0f      	ldr	r3, [pc, #60]	@ (800432c <xTaskIncrementTick+0x170>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	4a0d      	ldr	r2, [pc, #52]	@ (800432c <xTaskIncrementTick+0x170>)
 80042f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042f8:	697b      	ldr	r3, [r7, #20]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000c9c 	.word	0x20000c9c
 8004308:	20000c78 	.word	0x20000c78
 800430c:	20000c2c 	.word	0x20000c2c
 8004310:	20000c30 	.word	0x20000c30
 8004314:	20000c8c 	.word	0x20000c8c
 8004318:	20000c94 	.word	0x20000c94
 800431c:	20000c7c 	.word	0x20000c7c
 8004320:	20000b78 	.word	0x20000b78
 8004324:	20000b74 	.word	0x20000b74
 8004328:	20000c88 	.word	0x20000c88
 800432c:	20000c84 	.word	0x20000c84

08004330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004336:	4b2a      	ldr	r3, [pc, #168]	@ (80043e0 <vTaskSwitchContext+0xb0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800433e:	4b29      	ldr	r3, [pc, #164]	@ (80043e4 <vTaskSwitchContext+0xb4>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004344:	e045      	b.n	80043d2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004346:	4b27      	ldr	r3, [pc, #156]	@ (80043e4 <vTaskSwitchContext+0xb4>)
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800434c:	4b26      	ldr	r3, [pc, #152]	@ (80043e8 <vTaskSwitchContext+0xb8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	fab3 f383 	clz	r3, r3
 8004358:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800435a:	7afb      	ldrb	r3, [r7, #11]
 800435c:	f1c3 031f 	rsb	r3, r3, #31
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	4922      	ldr	r1, [pc, #136]	@ (80043ec <vTaskSwitchContext+0xbc>)
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	607b      	str	r3, [r7, #4]
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	e7fd      	b.n	800438a <vTaskSwitchContext+0x5a>
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4a14      	ldr	r2, [pc, #80]	@ (80043ec <vTaskSwitchContext+0xbc>)
 800439a:	4413      	add	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	3308      	adds	r3, #8
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d104      	bne.n	80043be <vTaskSwitchContext+0x8e>
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a0a      	ldr	r2, [pc, #40]	@ (80043f0 <vTaskSwitchContext+0xc0>)
 80043c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043c8:	4b09      	ldr	r3, [pc, #36]	@ (80043f0 <vTaskSwitchContext+0xc0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	334c      	adds	r3, #76	@ 0x4c
 80043ce:	4a09      	ldr	r2, [pc, #36]	@ (80043f4 <vTaskSwitchContext+0xc4>)
 80043d0:	6013      	str	r3, [r2, #0]
}
 80043d2:	bf00      	nop
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	20000c9c 	.word	0x20000c9c
 80043e4:	20000c88 	.word	0x20000c88
 80043e8:	20000c7c 	.word	0x20000c7c
 80043ec:	20000b78 	.word	0x20000b78
 80043f0:	20000b74 	.word	0x20000b74
 80043f4:	20000010 	.word	0x20000010

080043f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	60fb      	str	r3, [r7, #12]
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	e7fd      	b.n	800441c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004420:	4b07      	ldr	r3, [pc, #28]	@ (8004440 <vTaskPlaceOnEventList+0x48>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3318      	adds	r3, #24
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7fe fe5b 	bl	80030e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800442e:	2101      	movs	r1, #1
 8004430:	6838      	ldr	r0, [r7, #0]
 8004432:	f000 fa9f 	bl	8004974 <prvAddCurrentTaskToDelayedList>
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000b74 	.word	0x20000b74

08004444 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	617b      	str	r3, [r7, #20]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800446e:	4b0a      	ldr	r3, [pc, #40]	@ (8004498 <vTaskPlaceOnEventListRestricted+0x54>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3318      	adds	r3, #24
 8004474:	4619      	mov	r1, r3
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7fe fe10 	bl	800309c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004482:	f04f 33ff 	mov.w	r3, #4294967295
 8004486:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	68b8      	ldr	r0, [r7, #8]
 800448c:	f000 fa72 	bl	8004974 <prvAddCurrentTaskToDelayedList>
	}
 8004490:	bf00      	nop
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000b74 	.word	0x20000b74

0800449c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10b      	bne.n	80044ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	60fb      	str	r3, [r7, #12]
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	e7fd      	b.n	80044c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	3318      	adds	r3, #24
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe fe41 	bl	8003156 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044d4:	4b1d      	ldr	r3, [pc, #116]	@ (800454c <xTaskRemoveFromEventList+0xb0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d11c      	bne.n	8004516 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	3304      	adds	r3, #4
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe fe38 	bl	8003156 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ea:	2201      	movs	r2, #1
 80044ec:	409a      	lsls	r2, r3
 80044ee:	4b18      	ldr	r3, [pc, #96]	@ (8004550 <xTaskRemoveFromEventList+0xb4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	4a16      	ldr	r2, [pc, #88]	@ (8004550 <xTaskRemoveFromEventList+0xb4>)
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4a13      	ldr	r2, [pc, #76]	@ (8004554 <xTaskRemoveFromEventList+0xb8>)
 8004506:	441a      	add	r2, r3
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	3304      	adds	r3, #4
 800450c:	4619      	mov	r1, r3
 800450e:	4610      	mov	r0, r2
 8004510:	f7fe fdc4 	bl	800309c <vListInsertEnd>
 8004514:	e005      	b.n	8004522 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	3318      	adds	r3, #24
 800451a:	4619      	mov	r1, r3
 800451c:	480e      	ldr	r0, [pc, #56]	@ (8004558 <xTaskRemoveFromEventList+0xbc>)
 800451e:	f7fe fdbd 	bl	800309c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004526:	4b0d      	ldr	r3, [pc, #52]	@ (800455c <xTaskRemoveFromEventList+0xc0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452c:	429a      	cmp	r2, r3
 800452e:	d905      	bls.n	800453c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004530:	2301      	movs	r3, #1
 8004532:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004534:	4b0a      	ldr	r3, [pc, #40]	@ (8004560 <xTaskRemoveFromEventList+0xc4>)
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e001      	b.n	8004540 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004540:	697b      	ldr	r3, [r7, #20]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000c9c 	.word	0x20000c9c
 8004550:	20000c7c 	.word	0x20000c7c
 8004554:	20000b78 	.word	0x20000b78
 8004558:	20000c34 	.word	0x20000c34
 800455c:	20000b74 	.word	0x20000b74
 8004560:	20000c88 	.word	0x20000c88

08004564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800456c:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <vTaskInternalSetTimeOutState+0x24>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004574:	4b05      	ldr	r3, [pc, #20]	@ (800458c <vTaskInternalSetTimeOutState+0x28>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	605a      	str	r2, [r3, #4]
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	20000c8c 	.word	0x20000c8c
 800458c:	20000c78 	.word	0x20000c78

08004590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	613b      	str	r3, [r7, #16]
}
 80045b2:	bf00      	nop
 80045b4:	bf00      	nop
 80045b6:	e7fd      	b.n	80045b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	60fb      	str	r3, [r7, #12]
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	e7fd      	b.n	80045d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80045d6:	f000 fe9f 	bl	8005318 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045da:	4b1d      	ldr	r3, [pc, #116]	@ (8004650 <xTaskCheckForTimeOut+0xc0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d102      	bne.n	80045fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	e023      	b.n	8004642 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b15      	ldr	r3, [pc, #84]	@ (8004654 <xTaskCheckForTimeOut+0xc4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d007      	beq.n	8004616 <xTaskCheckForTimeOut+0x86>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	429a      	cmp	r2, r3
 800460e:	d302      	bcc.n	8004616 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004610:	2301      	movs	r3, #1
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	e015      	b.n	8004642 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	429a      	cmp	r2, r3
 800461e:	d20b      	bcs.n	8004638 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	1ad2      	subs	r2, r2, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ff99 	bl	8004564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	e004      	b.n	8004642 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800463e:	2301      	movs	r3, #1
 8004640:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004642:	f000 fe9b 	bl	800537c <vPortExitCritical>

	return xReturn;
 8004646:	69fb      	ldr	r3, [r7, #28]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000c78 	.word	0x20000c78
 8004654:	20000c8c 	.word	0x20000c8c

08004658 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800465c:	4b03      	ldr	r3, [pc, #12]	@ (800466c <vTaskMissedYield+0x14>)
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]
}
 8004662:	bf00      	nop
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	20000c88 	.word	0x20000c88

08004670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004678:	f000 f852 	bl	8004720 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800467c:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <prvIdleTask+0x28>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d9f9      	bls.n	8004678 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004684:	4b05      	ldr	r3, [pc, #20]	@ (800469c <prvIdleTask+0x2c>)
 8004686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004694:	e7f0      	b.n	8004678 <prvIdleTask+0x8>
 8004696:	bf00      	nop
 8004698:	20000b78 	.word	0x20000b78
 800469c:	e000ed04 	.word	0xe000ed04

080046a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046a6:	2300      	movs	r3, #0
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	e00c      	b.n	80046c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4a12      	ldr	r2, [pc, #72]	@ (8004700 <prvInitialiseTaskLists+0x60>)
 80046b8:	4413      	add	r3, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe fcc1 	bl	8003042 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3301      	adds	r3, #1
 80046c4:	607b      	str	r3, [r7, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b06      	cmp	r3, #6
 80046ca:	d9ef      	bls.n	80046ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046cc:	480d      	ldr	r0, [pc, #52]	@ (8004704 <prvInitialiseTaskLists+0x64>)
 80046ce:	f7fe fcb8 	bl	8003042 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046d2:	480d      	ldr	r0, [pc, #52]	@ (8004708 <prvInitialiseTaskLists+0x68>)
 80046d4:	f7fe fcb5 	bl	8003042 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046d8:	480c      	ldr	r0, [pc, #48]	@ (800470c <prvInitialiseTaskLists+0x6c>)
 80046da:	f7fe fcb2 	bl	8003042 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046de:	480c      	ldr	r0, [pc, #48]	@ (8004710 <prvInitialiseTaskLists+0x70>)
 80046e0:	f7fe fcaf 	bl	8003042 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046e4:	480b      	ldr	r0, [pc, #44]	@ (8004714 <prvInitialiseTaskLists+0x74>)
 80046e6:	f7fe fcac 	bl	8003042 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <prvInitialiseTaskLists+0x78>)
 80046ec:	4a05      	ldr	r2, [pc, #20]	@ (8004704 <prvInitialiseTaskLists+0x64>)
 80046ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046f0:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <prvInitialiseTaskLists+0x7c>)
 80046f2:	4a05      	ldr	r2, [pc, #20]	@ (8004708 <prvInitialiseTaskLists+0x68>)
 80046f4:	601a      	str	r2, [r3, #0]
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000b78 	.word	0x20000b78
 8004704:	20000c04 	.word	0x20000c04
 8004708:	20000c18 	.word	0x20000c18
 800470c:	20000c34 	.word	0x20000c34
 8004710:	20000c48 	.word	0x20000c48
 8004714:	20000c60 	.word	0x20000c60
 8004718:	20000c2c 	.word	0x20000c2c
 800471c:	20000c30 	.word	0x20000c30

08004720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004726:	e019      	b.n	800475c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004728:	f000 fdf6 	bl	8005318 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800472c:	4b10      	ldr	r3, [pc, #64]	@ (8004770 <prvCheckTasksWaitingTermination+0x50>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	4618      	mov	r0, r3
 800473a:	f7fe fd0c 	bl	8003156 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800473e:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <prvCheckTasksWaitingTermination+0x54>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3b01      	subs	r3, #1
 8004744:	4a0b      	ldr	r2, [pc, #44]	@ (8004774 <prvCheckTasksWaitingTermination+0x54>)
 8004746:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004748:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <prvCheckTasksWaitingTermination+0x58>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3b01      	subs	r3, #1
 800474e:	4a0a      	ldr	r2, [pc, #40]	@ (8004778 <prvCheckTasksWaitingTermination+0x58>)
 8004750:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004752:	f000 fe13 	bl	800537c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f810 	bl	800477c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800475c:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <prvCheckTasksWaitingTermination+0x58>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e1      	bne.n	8004728 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000c48 	.word	0x20000c48
 8004774:	20000c74 	.word	0x20000c74
 8004778:	20000c5c 	.word	0x20000c5c

0800477c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	334c      	adds	r3, #76	@ 0x4c
 8004788:	4618      	mov	r0, r3
 800478a:	f001 f8dd 	bl	8005948 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004794:	2b00      	cmp	r3, #0
 8004796:	d108      	bne.n	80047aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479c:	4618      	mov	r0, r3
 800479e:	f000 ffab 	bl	80056f8 <vPortFree>
				vPortFree( pxTCB );
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 ffa8 	bl	80056f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047a8:	e019      	b.n	80047de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d103      	bne.n	80047bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 ff9f 	bl	80056f8 <vPortFree>
	}
 80047ba:	e010      	b.n	80047de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d00b      	beq.n	80047de <prvDeleteTCB+0x62>
	__asm volatile
 80047c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	60fb      	str	r3, [r7, #12]
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	e7fd      	b.n	80047da <prvDeleteTCB+0x5e>
	}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004820 <prvResetNextTaskUnblockTime+0x38>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004824 <prvResetNextTaskUnblockTime+0x3c>)
 80047fa:	f04f 32ff 	mov.w	r2, #4294967295
 80047fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004800:	e008      	b.n	8004814 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004802:	4b07      	ldr	r3, [pc, #28]	@ (8004820 <prvResetNextTaskUnblockTime+0x38>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	4a04      	ldr	r2, [pc, #16]	@ (8004824 <prvResetNextTaskUnblockTime+0x3c>)
 8004812:	6013      	str	r3, [r2, #0]
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	20000c2c 	.word	0x20000c2c
 8004824:	20000c94 	.word	0x20000c94

08004828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800482e:	4b0b      	ldr	r3, [pc, #44]	@ (800485c <xTaskGetSchedulerState+0x34>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004836:	2301      	movs	r3, #1
 8004838:	607b      	str	r3, [r7, #4]
 800483a:	e008      	b.n	800484e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800483c:	4b08      	ldr	r3, [pc, #32]	@ (8004860 <xTaskGetSchedulerState+0x38>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004844:	2302      	movs	r3, #2
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	e001      	b.n	800484e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800484a:	2300      	movs	r3, #0
 800484c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800484e:	687b      	ldr	r3, [r7, #4]
	}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	20000c80 	.word	0x20000c80
 8004860:	20000c9c 	.word	0x20000c9c

08004864 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d070      	beq.n	800495c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800487a:	4b3b      	ldr	r3, [pc, #236]	@ (8004968 <xTaskPriorityDisinherit+0x104>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	429a      	cmp	r2, r3
 8004882:	d00b      	beq.n	800489c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	60fb      	str	r3, [r7, #12]
}
 8004896:	bf00      	nop
 8004898:	bf00      	nop
 800489a:	e7fd      	b.n	8004898 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10b      	bne.n	80048bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	60bb      	str	r3, [r7, #8]
}
 80048b6:	bf00      	nop
 80048b8:	bf00      	nop
 80048ba:	e7fd      	b.n	80048b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c0:	1e5a      	subs	r2, r3, #1
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d044      	beq.n	800495c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d140      	bne.n	800495c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	3304      	adds	r3, #4
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe fc39 	bl	8003156 <uxListRemove>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d115      	bne.n	8004916 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ee:	491f      	ldr	r1, [pc, #124]	@ (800496c <xTaskPriorityDisinherit+0x108>)
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <xTaskPriorityDisinherit+0xb2>
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004904:	2201      	movs	r2, #1
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43da      	mvns	r2, r3
 800490c:	4b18      	ldr	r3, [pc, #96]	@ (8004970 <xTaskPriorityDisinherit+0x10c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4013      	ands	r3, r2
 8004912:	4a17      	ldr	r2, [pc, #92]	@ (8004970 <xTaskPriorityDisinherit+0x10c>)
 8004914:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004922:	f1c3 0207 	rsb	r2, r3, #7
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492e:	2201      	movs	r2, #1
 8004930:	409a      	lsls	r2, r3
 8004932:	4b0f      	ldr	r3, [pc, #60]	@ (8004970 <xTaskPriorityDisinherit+0x10c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4313      	orrs	r3, r2
 8004938:	4a0d      	ldr	r2, [pc, #52]	@ (8004970 <xTaskPriorityDisinherit+0x10c>)
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4a08      	ldr	r2, [pc, #32]	@ (800496c <xTaskPriorityDisinherit+0x108>)
 800494a:	441a      	add	r2, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	3304      	adds	r3, #4
 8004950:	4619      	mov	r1, r3
 8004952:	4610      	mov	r0, r2
 8004954:	f7fe fba2 	bl	800309c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004958:	2301      	movs	r3, #1
 800495a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800495c:	697b      	ldr	r3, [r7, #20]
	}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000b74 	.word	0x20000b74
 800496c:	20000b78 	.word	0x20000b78
 8004970:	20000c7c 	.word	0x20000c7c

08004974 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800497e:	4b29      	ldr	r3, [pc, #164]	@ (8004a24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004984:	4b28      	ldr	r3, [pc, #160]	@ (8004a28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3304      	adds	r3, #4
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe fbe3 	bl	8003156 <uxListRemove>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10b      	bne.n	80049ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004996:	4b24      	ldr	r3, [pc, #144]	@ (8004a28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	2201      	movs	r2, #1
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43da      	mvns	r2, r3
 80049a4:	4b21      	ldr	r3, [pc, #132]	@ (8004a2c <prvAddCurrentTaskToDelayedList+0xb8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4013      	ands	r3, r2
 80049aa:	4a20      	ldr	r2, [pc, #128]	@ (8004a2c <prvAddCurrentTaskToDelayedList+0xb8>)
 80049ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b4:	d10a      	bne.n	80049cc <prvAddCurrentTaskToDelayedList+0x58>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a28 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	481a      	ldr	r0, [pc, #104]	@ (8004a30 <prvAddCurrentTaskToDelayedList+0xbc>)
 80049c6:	f7fe fb69 	bl	800309c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049ca:	e026      	b.n	8004a1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049d4:	4b14      	ldr	r3, [pc, #80]	@ (8004a28 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d209      	bcs.n	80049f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049e4:	4b13      	ldr	r3, [pc, #76]	@ (8004a34 <prvAddCurrentTaskToDelayedList+0xc0>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a28 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7fe fb77 	bl	80030e4 <vListInsert>
}
 80049f6:	e010      	b.n	8004a1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a38 <prvAddCurrentTaskToDelayedList+0xc4>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004a28 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3304      	adds	r3, #4
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f7fe fb6d 	bl	80030e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d202      	bcs.n	8004a1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004a14:	4a09      	ldr	r2, [pc, #36]	@ (8004a3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	6013      	str	r3, [r2, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000c78 	.word	0x20000c78
 8004a28:	20000b74 	.word	0x20000b74
 8004a2c:	20000c7c 	.word	0x20000c7c
 8004a30:	20000c60 	.word	0x20000c60
 8004a34:	20000c30 	.word	0x20000c30
 8004a38:	20000c2c 	.word	0x20000c2c
 8004a3c:	20000c94 	.word	0x20000c94

08004a40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	@ 0x28
 8004a44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a4a:	f000 faf7 	bl	800503c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac4 <xTimerCreateTimerTask+0x84>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d021      	beq.n	8004a9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a5e:	1d3a      	adds	r2, r7, #4
 8004a60:	f107 0108 	add.w	r1, r7, #8
 8004a64:	f107 030c 	add.w	r3, r7, #12
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fb fbcb 	bl	8000204 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	9202      	str	r2, [sp, #8]
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	2302      	movs	r3, #2
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	460a      	mov	r2, r1
 8004a80:	4911      	ldr	r1, [pc, #68]	@ (8004ac8 <xTimerCreateTimerTask+0x88>)
 8004a82:	4812      	ldr	r0, [pc, #72]	@ (8004acc <xTimerCreateTimerTask+0x8c>)
 8004a84:	f7ff f888 	bl	8003b98 <xTaskCreateStatic>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4a11      	ldr	r2, [pc, #68]	@ (8004ad0 <xTimerCreateTimerTask+0x90>)
 8004a8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a8e:	4b10      	ldr	r3, [pc, #64]	@ (8004ad0 <xTimerCreateTimerTask+0x90>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a96:	2301      	movs	r3, #1
 8004a98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	613b      	str	r3, [r7, #16]
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	e7fd      	b.n	8004ab4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004ab8:	697b      	ldr	r3, [r7, #20]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000cd0 	.word	0x20000cd0
 8004ac8:	08005b50 	.word	0x08005b50
 8004acc:	08004c0d 	.word	0x08004c0d
 8004ad0:	20000cd4 	.word	0x20000cd4

08004ad4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	@ 0x28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <xTimerGenericCommand+0x30>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	623b      	str	r3, [r7, #32]
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	e7fd      	b.n	8004b00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b04:	4b19      	ldr	r3, [pc, #100]	@ (8004b6c <xTimerGenericCommand+0x98>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d02a      	beq.n	8004b62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	dc18      	bgt.n	8004b50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b1e:	f7ff fe83 	bl	8004828 <xTaskGetSchedulerState>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d109      	bne.n	8004b3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b28:	4b10      	ldr	r3, [pc, #64]	@ (8004b6c <xTimerGenericCommand+0x98>)
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	f107 0114 	add.w	r1, r7, #20
 8004b30:	2300      	movs	r3, #0
 8004b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b34:	f7fe fc40 	bl	80033b8 <xQueueGenericSend>
 8004b38:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b3a:	e012      	b.n	8004b62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <xTimerGenericCommand+0x98>)
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	f107 0114 	add.w	r1, r7, #20
 8004b44:	2300      	movs	r3, #0
 8004b46:	2200      	movs	r2, #0
 8004b48:	f7fe fc36 	bl	80033b8 <xQueueGenericSend>
 8004b4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b4e:	e008      	b.n	8004b62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b50:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <xTimerGenericCommand+0x98>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	f107 0114 	add.w	r1, r7, #20
 8004b58:	2300      	movs	r3, #0
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	f7fe fd2e 	bl	80035bc <xQueueGenericSendFromISR>
 8004b60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3728      	adds	r7, #40	@ 0x28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20000cd0 	.word	0x20000cd0

08004b70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b7a:	4b23      	ldr	r3, [pc, #140]	@ (8004c08 <prvProcessExpiredTimer+0x98>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fe fae4 	bl	8003156 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d023      	beq.n	8004be4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	18d1      	adds	r1, r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	6978      	ldr	r0, [r7, #20]
 8004baa:	f000 f8d5 	bl	8004d58 <prvInsertTimerInActiveList>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d020      	beq.n	8004bf6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	6978      	ldr	r0, [r7, #20]
 8004bc0:	f7ff ff88 	bl	8004ad4 <xTimerGenericCommand>
 8004bc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d114      	bne.n	8004bf6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	60fb      	str	r3, [r7, #12]
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	e7fd      	b.n	8004be0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bea:	f023 0301 	bic.w	r3, r3, #1
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	6978      	ldr	r0, [r7, #20]
 8004bfc:	4798      	blx	r3
}
 8004bfe:	bf00      	nop
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000cc8 	.word	0x20000cc8

08004c0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c14:	f107 0308 	add.w	r3, r7, #8
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 f859 	bl	8004cd0 <prvGetNextExpireTime>
 8004c1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4619      	mov	r1, r3
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f805 	bl	8004c34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c2a:	f000 f8d7 	bl	8004ddc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c2e:	bf00      	nop
 8004c30:	e7f0      	b.n	8004c14 <prvTimerTask+0x8>
	...

08004c34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c3e:	f7ff fa01 	bl	8004044 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c42:	f107 0308 	add.w	r3, r7, #8
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 f866 	bl	8004d18 <prvSampleTimeNow>
 8004c4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d130      	bne.n	8004cb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <prvProcessTimerOrBlockTask+0x3c>
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d806      	bhi.n	8004c70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c62:	f7ff f9fd 	bl	8004060 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c66:	68f9      	ldr	r1, [r7, #12]
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff ff81 	bl	8004b70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c6e:	e024      	b.n	8004cba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d008      	beq.n	8004c88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c76:	4b13      	ldr	r3, [pc, #76]	@ (8004cc4 <prvProcessTimerOrBlockTask+0x90>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <prvProcessTimerOrBlockTask+0x50>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <prvProcessTimerOrBlockTask+0x52>
 8004c84:	2300      	movs	r3, #0
 8004c86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c88:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc8 <prvProcessTimerOrBlockTask+0x94>)
 8004c8a:	6818      	ldr	r0, [r3, #0]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	4619      	mov	r1, r3
 8004c96:	f7fe ff4b 	bl	8003b30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c9a:	f7ff f9e1 	bl	8004060 <xTaskResumeAll>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ca4:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <prvProcessTimerOrBlockTask+0x98>)
 8004ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	f3bf 8f6f 	isb	sy
}
 8004cb4:	e001      	b.n	8004cba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004cb6:	f7ff f9d3 	bl	8004060 <xTaskResumeAll>
}
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000ccc 	.word	0x20000ccc
 8004cc8:	20000cd0 	.word	0x20000cd0
 8004ccc:	e000ed04 	.word	0xe000ed04

08004cd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004d14 <prvGetNextExpireTime+0x44>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <prvGetNextExpireTime+0x16>
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	e000      	b.n	8004ce8 <prvGetNextExpireTime+0x18>
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d105      	bne.n	8004d00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cf4:	4b07      	ldr	r3, [pc, #28]	@ (8004d14 <prvGetNextExpireTime+0x44>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	e001      	b.n	8004d04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d04:	68fb      	ldr	r3, [r7, #12]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000cc8 	.word	0x20000cc8

08004d18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d20:	f7ff fa3c 	bl	800419c <xTaskGetTickCount>
 8004d24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d26:	4b0b      	ldr	r3, [pc, #44]	@ (8004d54 <prvSampleTimeNow+0x3c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d205      	bcs.n	8004d3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d30:	f000 f91e 	bl	8004f70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	e002      	b.n	8004d42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d42:	4a04      	ldr	r2, [pc, #16]	@ (8004d54 <prvSampleTimeNow+0x3c>)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d48:	68fb      	ldr	r3, [r7, #12]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000cd8 	.word	0x20000cd8

08004d58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d812      	bhi.n	8004da4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	1ad2      	subs	r2, r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d302      	bcc.n	8004d92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	e01b      	b.n	8004dca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d92:	4b10      	ldr	r3, [pc, #64]	@ (8004dd4 <prvInsertTimerInActiveList+0x7c>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f7fe f9a1 	bl	80030e4 <vListInsert>
 8004da2:	e012      	b.n	8004dca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d206      	bcs.n	8004dba <prvInsertTimerInActiveList+0x62>
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d302      	bcc.n	8004dba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004db4:	2301      	movs	r3, #1
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e007      	b.n	8004dca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dba:	4b07      	ldr	r3, [pc, #28]	@ (8004dd8 <prvInsertTimerInActiveList+0x80>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	f7fe f98d 	bl	80030e4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004dca:	697b      	ldr	r3, [r7, #20]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000ccc 	.word	0x20000ccc
 8004dd8:	20000cc8 	.word	0x20000cc8

08004ddc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08c      	sub	sp, #48	@ 0x30
 8004de0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004de2:	e0b2      	b.n	8004f4a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f2c0 80af 	blt.w	8004f4a <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d004      	beq.n	8004e02 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe f9aa 	bl	8003156 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e02:	1d3b      	adds	r3, r7, #4
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff87 	bl	8004d18 <prvSampleTimeNow>
 8004e0a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b09      	cmp	r3, #9
 8004e10:	f200 8098 	bhi.w	8004f44 <prvProcessReceivedCommands+0x168>
 8004e14:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <prvProcessReceivedCommands+0x40>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e45 	.word	0x08004e45
 8004e20:	08004e45 	.word	0x08004e45
 8004e24:	08004e45 	.word	0x08004e45
 8004e28:	08004ebb 	.word	0x08004ebb
 8004e2c:	08004ecf 	.word	0x08004ecf
 8004e30:	08004f1b 	.word	0x08004f1b
 8004e34:	08004e45 	.word	0x08004e45
 8004e38:	08004e45 	.word	0x08004e45
 8004e3c:	08004ebb 	.word	0x08004ebb
 8004e40:	08004ecf 	.word	0x08004ecf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	18d1      	adds	r1, r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a3a      	ldr	r2, [r7, #32]
 8004e62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e64:	f7ff ff78 	bl	8004d58 <prvInsertTimerInActiveList>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d06c      	beq.n	8004f48 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d061      	beq.n	8004f48 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	441a      	add	r2, r3
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	2300      	movs	r3, #0
 8004e92:	2100      	movs	r1, #0
 8004e94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e96:	f7ff fe1d 	bl	8004ad4 <xTimerGenericCommand>
 8004e9a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d152      	bne.n	8004f48 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	61bb      	str	r3, [r7, #24]
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	e7fd      	b.n	8004eb6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8004ecc:	e03d      	b.n	8004f4a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ed4:	f043 0301 	orr.w	r3, r3, #1
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10b      	bne.n	8004f06 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	617b      	str	r3, [r7, #20]
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	e7fd      	b.n	8004f02 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	18d1      	adds	r1, r2, r3
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	6a3a      	ldr	r2, [r7, #32]
 8004f12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f14:	f7ff ff20 	bl	8004d58 <prvInsertTimerInActiveList>
					break;
 8004f18:	e017      	b.n	8004f4a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8004f28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f2a:	f000 fbe5 	bl	80056f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f2e:	e00c      	b.n	8004f4a <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8004f42:	e002      	b.n	8004f4a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8004f44:	bf00      	nop
 8004f46:	e000      	b.n	8004f4a <prvProcessReceivedCommands+0x16e>
					break;
 8004f48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f4a:	4b08      	ldr	r3, [pc, #32]	@ (8004f6c <prvProcessReceivedCommands+0x190>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f107 0108 	add.w	r1, r7, #8
 8004f52:	2200      	movs	r2, #0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fe fbcf 	bl	80036f8 <xQueueReceive>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f47f af41 	bne.w	8004de4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	3728      	adds	r7, #40	@ 0x28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000cd0 	.word	0x20000cd0

08004f70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f76:	e049      	b.n	800500c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f78:	4b2e      	ldr	r3, [pc, #184]	@ (8005034 <prvSwitchTimerLists+0xc4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f82:	4b2c      	ldr	r3, [pc, #176]	@ (8005034 <prvSwitchTimerLists+0xc4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fe f8e0 	bl	8003156 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d02f      	beq.n	800500c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d90e      	bls.n	8004fdc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fca:	4b1a      	ldr	r3, [pc, #104]	@ (8005034 <prvSwitchTimerLists+0xc4>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f7fe f885 	bl	80030e4 <vListInsert>
 8004fda:	e017      	b.n	800500c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fdc:	2300      	movs	r3, #0
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff fd74 	bl	8004ad4 <xTimerGenericCommand>
 8004fec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10b      	bne.n	800500c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	603b      	str	r3, [r7, #0]
}
 8005006:	bf00      	nop
 8005008:	bf00      	nop
 800500a:	e7fd      	b.n	8005008 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800500c:	4b09      	ldr	r3, [pc, #36]	@ (8005034 <prvSwitchTimerLists+0xc4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1b0      	bne.n	8004f78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005016:	4b07      	ldr	r3, [pc, #28]	@ (8005034 <prvSwitchTimerLists+0xc4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800501c:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <prvSwitchTimerLists+0xc8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a04      	ldr	r2, [pc, #16]	@ (8005034 <prvSwitchTimerLists+0xc4>)
 8005022:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005024:	4a04      	ldr	r2, [pc, #16]	@ (8005038 <prvSwitchTimerLists+0xc8>)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	6013      	str	r3, [r2, #0]
}
 800502a:	bf00      	nop
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20000cc8 	.word	0x20000cc8
 8005038:	20000ccc 	.word	0x20000ccc

0800503c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005042:	f000 f969 	bl	8005318 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005046:	4b15      	ldr	r3, [pc, #84]	@ (800509c <prvCheckForValidListAndQueue+0x60>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d120      	bne.n	8005090 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800504e:	4814      	ldr	r0, [pc, #80]	@ (80050a0 <prvCheckForValidListAndQueue+0x64>)
 8005050:	f7fd fff7 	bl	8003042 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005054:	4813      	ldr	r0, [pc, #76]	@ (80050a4 <prvCheckForValidListAndQueue+0x68>)
 8005056:	f7fd fff4 	bl	8003042 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800505a:	4b13      	ldr	r3, [pc, #76]	@ (80050a8 <prvCheckForValidListAndQueue+0x6c>)
 800505c:	4a10      	ldr	r2, [pc, #64]	@ (80050a0 <prvCheckForValidListAndQueue+0x64>)
 800505e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005060:	4b12      	ldr	r3, [pc, #72]	@ (80050ac <prvCheckForValidListAndQueue+0x70>)
 8005062:	4a10      	ldr	r2, [pc, #64]	@ (80050a4 <prvCheckForValidListAndQueue+0x68>)
 8005064:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005066:	2300      	movs	r3, #0
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	4b11      	ldr	r3, [pc, #68]	@ (80050b0 <prvCheckForValidListAndQueue+0x74>)
 800506c:	4a11      	ldr	r2, [pc, #68]	@ (80050b4 <prvCheckForValidListAndQueue+0x78>)
 800506e:	210c      	movs	r1, #12
 8005070:	200a      	movs	r0, #10
 8005072:	f7fe f905 	bl	8003280 <xQueueGenericCreateStatic>
 8005076:	4603      	mov	r3, r0
 8005078:	4a08      	ldr	r2, [pc, #32]	@ (800509c <prvCheckForValidListAndQueue+0x60>)
 800507a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800507c:	4b07      	ldr	r3, [pc, #28]	@ (800509c <prvCheckForValidListAndQueue+0x60>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005084:	4b05      	ldr	r3, [pc, #20]	@ (800509c <prvCheckForValidListAndQueue+0x60>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	490b      	ldr	r1, [pc, #44]	@ (80050b8 <prvCheckForValidListAndQueue+0x7c>)
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe fd26 	bl	8003adc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005090:	f000 f974 	bl	800537c <vPortExitCritical>
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000cd0 	.word	0x20000cd0
 80050a0:	20000ca0 	.word	0x20000ca0
 80050a4:	20000cb4 	.word	0x20000cb4
 80050a8:	20000cc8 	.word	0x20000cc8
 80050ac:	20000ccc 	.word	0x20000ccc
 80050b0:	20000d54 	.word	0x20000d54
 80050b4:	20000cdc 	.word	0x20000cdc
 80050b8:	08005b58 	.word	0x08005b58

080050bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3b04      	subs	r3, #4
 80050cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3b04      	subs	r3, #4
 80050da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f023 0201 	bic.w	r2, r3, #1
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3b04      	subs	r3, #4
 80050ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005120 <pxPortInitialiseStack+0x64>)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3b14      	subs	r3, #20
 80050f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3b04      	subs	r3, #4
 8005102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f06f 0202 	mvn.w	r2, #2
 800510a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3b20      	subs	r3, #32
 8005110:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005112:	68fb      	ldr	r3, [r7, #12]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	08005125 	.word	0x08005125

08005124 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800512a:	2300      	movs	r3, #0
 800512c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800512e:	4b13      	ldr	r3, [pc, #76]	@ (800517c <prvTaskExitError+0x58>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005136:	d00b      	beq.n	8005150 <prvTaskExitError+0x2c>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	60fb      	str	r3, [r7, #12]
}
 800514a:	bf00      	nop
 800514c:	bf00      	nop
 800514e:	e7fd      	b.n	800514c <prvTaskExitError+0x28>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	60bb      	str	r3, [r7, #8]
}
 8005162:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005164:	bf00      	nop
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0fc      	beq.n	8005166 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	2000000c 	.word	0x2000000c

08005180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005180:	4b07      	ldr	r3, [pc, #28]	@ (80051a0 <pxCurrentTCBConst2>)
 8005182:	6819      	ldr	r1, [r3, #0]
 8005184:	6808      	ldr	r0, [r1, #0]
 8005186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518a:	f380 8809 	msr	PSP, r0
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f380 8811 	msr	BASEPRI, r0
 800519a:	4770      	bx	lr
 800519c:	f3af 8000 	nop.w

080051a0 <pxCurrentTCBConst2>:
 80051a0:	20000b74 	.word	0x20000b74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop

080051a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80051a8:	4808      	ldr	r0, [pc, #32]	@ (80051cc <prvPortStartFirstTask+0x24>)
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	6800      	ldr	r0, [r0, #0]
 80051ae:	f380 8808 	msr	MSP, r0
 80051b2:	f04f 0000 	mov.w	r0, #0
 80051b6:	f380 8814 	msr	CONTROL, r0
 80051ba:	b662      	cpsie	i
 80051bc:	b661      	cpsie	f
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	df00      	svc	0
 80051c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051ca:	bf00      	nop
 80051cc:	e000ed08 	.word	0xe000ed08

080051d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051d6:	4b47      	ldr	r3, [pc, #284]	@ (80052f4 <xPortStartScheduler+0x124>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a47      	ldr	r2, [pc, #284]	@ (80052f8 <xPortStartScheduler+0x128>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d10b      	bne.n	80051f8 <xPortStartScheduler+0x28>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	613b      	str	r3, [r7, #16]
}
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051f8:	4b3e      	ldr	r3, [pc, #248]	@ (80052f4 <xPortStartScheduler+0x124>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a3f      	ldr	r2, [pc, #252]	@ (80052fc <xPortStartScheduler+0x12c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d10b      	bne.n	800521a <xPortStartScheduler+0x4a>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	60fb      	str	r3, [r7, #12]
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	e7fd      	b.n	8005216 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800521a:	4b39      	ldr	r3, [pc, #228]	@ (8005300 <xPortStartScheduler+0x130>)
 800521c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	22ff      	movs	r2, #255	@ 0xff
 800522a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800523c:	b2da      	uxtb	r2, r3
 800523e:	4b31      	ldr	r3, [pc, #196]	@ (8005304 <xPortStartScheduler+0x134>)
 8005240:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005242:	4b31      	ldr	r3, [pc, #196]	@ (8005308 <xPortStartScheduler+0x138>)
 8005244:	2207      	movs	r2, #7
 8005246:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005248:	e009      	b.n	800525e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800524a:	4b2f      	ldr	r3, [pc, #188]	@ (8005308 <xPortStartScheduler+0x138>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3b01      	subs	r3, #1
 8005250:	4a2d      	ldr	r2, [pc, #180]	@ (8005308 <xPortStartScheduler+0x138>)
 8005252:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	b2db      	uxtb	r3, r3
 800525c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	b2db      	uxtb	r3, r3
 8005262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005266:	2b80      	cmp	r3, #128	@ 0x80
 8005268:	d0ef      	beq.n	800524a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800526a:	4b27      	ldr	r3, [pc, #156]	@ (8005308 <xPortStartScheduler+0x138>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f1c3 0307 	rsb	r3, r3, #7
 8005272:	2b04      	cmp	r3, #4
 8005274:	d00b      	beq.n	800528e <xPortStartScheduler+0xbe>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	60bb      	str	r3, [r7, #8]
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800528e:	4b1e      	ldr	r3, [pc, #120]	@ (8005308 <xPortStartScheduler+0x138>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	4a1c      	ldr	r2, [pc, #112]	@ (8005308 <xPortStartScheduler+0x138>)
 8005296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005298:	4b1b      	ldr	r3, [pc, #108]	@ (8005308 <xPortStartScheduler+0x138>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052a0:	4a19      	ldr	r2, [pc, #100]	@ (8005308 <xPortStartScheduler+0x138>)
 80052a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052ac:	4b17      	ldr	r3, [pc, #92]	@ (800530c <xPortStartScheduler+0x13c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a16      	ldr	r2, [pc, #88]	@ (800530c <xPortStartScheduler+0x13c>)
 80052b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052b8:	4b14      	ldr	r3, [pc, #80]	@ (800530c <xPortStartScheduler+0x13c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a13      	ldr	r2, [pc, #76]	@ (800530c <xPortStartScheduler+0x13c>)
 80052be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80052c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052c4:	f000 f8da 	bl	800547c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052c8:	4b11      	ldr	r3, [pc, #68]	@ (8005310 <xPortStartScheduler+0x140>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052ce:	f000 f8f9 	bl	80054c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052d2:	4b10      	ldr	r3, [pc, #64]	@ (8005314 <xPortStartScheduler+0x144>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005314 <xPortStartScheduler+0x144>)
 80052d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80052dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052de:	f7ff ff63 	bl	80051a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052e2:	f7ff f825 	bl	8004330 <vTaskSwitchContext>
	prvTaskExitError();
 80052e6:	f7ff ff1d 	bl	8005124 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	e000ed00 	.word	0xe000ed00
 80052f8:	410fc271 	.word	0x410fc271
 80052fc:	410fc270 	.word	0x410fc270
 8005300:	e000e400 	.word	0xe000e400
 8005304:	20000d9c 	.word	0x20000d9c
 8005308:	20000da0 	.word	0x20000da0
 800530c:	e000ed20 	.word	0xe000ed20
 8005310:	2000000c 	.word	0x2000000c
 8005314:	e000ef34 	.word	0xe000ef34

08005318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	607b      	str	r3, [r7, #4]
}
 8005330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005332:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <vPortEnterCritical+0x5c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	4a0e      	ldr	r2, [pc, #56]	@ (8005374 <vPortEnterCritical+0x5c>)
 800533a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800533c:	4b0d      	ldr	r3, [pc, #52]	@ (8005374 <vPortEnterCritical+0x5c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d110      	bne.n	8005366 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005344:	4b0c      	ldr	r3, [pc, #48]	@ (8005378 <vPortEnterCritical+0x60>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <vPortEnterCritical+0x4e>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	603b      	str	r3, [r7, #0]
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	e7fd      	b.n	8005362 <vPortEnterCritical+0x4a>
	}
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	2000000c 	.word	0x2000000c
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005382:	4b12      	ldr	r3, [pc, #72]	@ (80053cc <vPortExitCritical+0x50>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10b      	bne.n	80053a2 <vPortExitCritical+0x26>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	607b      	str	r3, [r7, #4]
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	e7fd      	b.n	800539e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053a2:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <vPortExitCritical+0x50>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	4a08      	ldr	r2, [pc, #32]	@ (80053cc <vPortExitCritical+0x50>)
 80053aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053ac:	4b07      	ldr	r3, [pc, #28]	@ (80053cc <vPortExitCritical+0x50>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d105      	bne.n	80053c0 <vPortExitCritical+0x44>
 80053b4:	2300      	movs	r3, #0
 80053b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f383 8811 	msr	BASEPRI, r3
}
 80053be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	2000000c 	.word	0x2000000c

080053d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053d0:	f3ef 8009 	mrs	r0, PSP
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	4b15      	ldr	r3, [pc, #84]	@ (8005430 <pxCurrentTCBConst>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	f01e 0f10 	tst.w	lr, #16
 80053e0:	bf08      	it	eq
 80053e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ea:	6010      	str	r0, [r2, #0]
 80053ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80053f4:	f380 8811 	msr	BASEPRI, r0
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f7fe ff96 	bl	8004330 <vTaskSwitchContext>
 8005404:	f04f 0000 	mov.w	r0, #0
 8005408:	f380 8811 	msr	BASEPRI, r0
 800540c:	bc09      	pop	{r0, r3}
 800540e:	6819      	ldr	r1, [r3, #0]
 8005410:	6808      	ldr	r0, [r1, #0]
 8005412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005416:	f01e 0f10 	tst.w	lr, #16
 800541a:	bf08      	it	eq
 800541c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005420:	f380 8809 	msr	PSP, r0
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	f3af 8000 	nop.w

08005430 <pxCurrentTCBConst>:
 8005430:	20000b74 	.word	0x20000b74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop

08005438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	607b      	str	r3, [r7, #4]
}
 8005450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005452:	f7fe feb3 	bl	80041bc <xTaskIncrementTick>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800545c:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <SysTick_Handler+0x40>)
 800545e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	2300      	movs	r3, #0
 8005466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f383 8811 	msr	BASEPRI, r3
}
 800546e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005470:	bf00      	nop
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	e000ed04 	.word	0xe000ed04

0800547c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005480:	4b0b      	ldr	r3, [pc, #44]	@ (80054b0 <vPortSetupTimerInterrupt+0x34>)
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005486:	4b0b      	ldr	r3, [pc, #44]	@ (80054b4 <vPortSetupTimerInterrupt+0x38>)
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800548c:	4b0a      	ldr	r3, [pc, #40]	@ (80054b8 <vPortSetupTimerInterrupt+0x3c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a0a      	ldr	r2, [pc, #40]	@ (80054bc <vPortSetupTimerInterrupt+0x40>)
 8005492:	fba2 2303 	umull	r2, r3, r2, r3
 8005496:	099b      	lsrs	r3, r3, #6
 8005498:	4a09      	ldr	r2, [pc, #36]	@ (80054c0 <vPortSetupTimerInterrupt+0x44>)
 800549a:	3b01      	subs	r3, #1
 800549c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800549e:	4b04      	ldr	r3, [pc, #16]	@ (80054b0 <vPortSetupTimerInterrupt+0x34>)
 80054a0:	2207      	movs	r2, #7
 80054a2:	601a      	str	r2, [r3, #0]
}
 80054a4:	bf00      	nop
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	e000e010 	.word	0xe000e010
 80054b4:	e000e018 	.word	0xe000e018
 80054b8:	20000000 	.word	0x20000000
 80054bc:	10624dd3 	.word	0x10624dd3
 80054c0:	e000e014 	.word	0xe000e014

080054c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80054d4 <vPortEnableVFP+0x10>
 80054c8:	6801      	ldr	r1, [r0, #0]
 80054ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80054ce:	6001      	str	r1, [r0, #0]
 80054d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054d2:	bf00      	nop
 80054d4:	e000ed88 	.word	0xe000ed88

080054d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054de:	f3ef 8305 	mrs	r3, IPSR
 80054e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b0f      	cmp	r3, #15
 80054e8:	d915      	bls.n	8005516 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054ea:	4a18      	ldr	r2, [pc, #96]	@ (800554c <vPortValidateInterruptPriority+0x74>)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054f4:	4b16      	ldr	r3, [pc, #88]	@ (8005550 <vPortValidateInterruptPriority+0x78>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	7afa      	ldrb	r2, [r7, #11]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d20b      	bcs.n	8005516 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	607b      	str	r3, [r7, #4]
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	e7fd      	b.n	8005512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005516:	4b0f      	ldr	r3, [pc, #60]	@ (8005554 <vPortValidateInterruptPriority+0x7c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800551e:	4b0e      	ldr	r3, [pc, #56]	@ (8005558 <vPortValidateInterruptPriority+0x80>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d90b      	bls.n	800553e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	603b      	str	r3, [r7, #0]
}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	e7fd      	b.n	800553a <vPortValidateInterruptPriority+0x62>
	}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	e000e3f0 	.word	0xe000e3f0
 8005550:	20000d9c 	.word	0x20000d9c
 8005554:	e000ed0c 	.word	0xe000ed0c
 8005558:	20000da0 	.word	0x20000da0

0800555c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	@ 0x28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005564:	2300      	movs	r3, #0
 8005566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005568:	f7fe fd6c 	bl	8004044 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800556c:	4b5c      	ldr	r3, [pc, #368]	@ (80056e0 <pvPortMalloc+0x184>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005574:	f000 f924 	bl	80057c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005578:	4b5a      	ldr	r3, [pc, #360]	@ (80056e4 <pvPortMalloc+0x188>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4013      	ands	r3, r2
 8005580:	2b00      	cmp	r3, #0
 8005582:	f040 8095 	bne.w	80056b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01e      	beq.n	80055ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800558c:	2208      	movs	r2, #8
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	2b00      	cmp	r3, #0
 800559c:	d015      	beq.n	80055ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f023 0307 	bic.w	r3, r3, #7
 80055a4:	3308      	adds	r3, #8
 80055a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00b      	beq.n	80055ca <pvPortMalloc+0x6e>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	617b      	str	r3, [r7, #20]
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop
 80055c8:	e7fd      	b.n	80055c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d06f      	beq.n	80056b0 <pvPortMalloc+0x154>
 80055d0:	4b45      	ldr	r3, [pc, #276]	@ (80056e8 <pvPortMalloc+0x18c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d86a      	bhi.n	80056b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055da:	4b44      	ldr	r3, [pc, #272]	@ (80056ec <pvPortMalloc+0x190>)
 80055dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055de:	4b43      	ldr	r3, [pc, #268]	@ (80056ec <pvPortMalloc+0x190>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055e4:	e004      	b.n	80055f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d903      	bls.n	8005602 <pvPortMalloc+0xa6>
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f1      	bne.n	80055e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005602:	4b37      	ldr	r3, [pc, #220]	@ (80056e0 <pvPortMalloc+0x184>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005608:	429a      	cmp	r2, r3
 800560a:	d051      	beq.n	80056b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2208      	movs	r2, #8
 8005612:	4413      	add	r3, r2
 8005614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	1ad2      	subs	r2, r2, r3
 8005626:	2308      	movs	r3, #8
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	429a      	cmp	r2, r3
 800562c:	d920      	bls.n	8005670 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800562e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4413      	add	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00b      	beq.n	8005658 <pvPortMalloc+0xfc>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	613b      	str	r3, [r7, #16]
}
 8005652:	bf00      	nop
 8005654:	bf00      	nop
 8005656:	e7fd      	b.n	8005654 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	1ad2      	subs	r2, r2, r3
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800566a:	69b8      	ldr	r0, [r7, #24]
 800566c:	f000 f90a 	bl	8005884 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005670:	4b1d      	ldr	r3, [pc, #116]	@ (80056e8 <pvPortMalloc+0x18c>)
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	4a1b      	ldr	r2, [pc, #108]	@ (80056e8 <pvPortMalloc+0x18c>)
 800567c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800567e:	4b1a      	ldr	r3, [pc, #104]	@ (80056e8 <pvPortMalloc+0x18c>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	4b1b      	ldr	r3, [pc, #108]	@ (80056f0 <pvPortMalloc+0x194>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d203      	bcs.n	8005692 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800568a:	4b17      	ldr	r3, [pc, #92]	@ (80056e8 <pvPortMalloc+0x18c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a18      	ldr	r2, [pc, #96]	@ (80056f0 <pvPortMalloc+0x194>)
 8005690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	4b13      	ldr	r3, [pc, #76]	@ (80056e4 <pvPortMalloc+0x188>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	431a      	orrs	r2, r3
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80056a6:	4b13      	ldr	r3, [pc, #76]	@ (80056f4 <pvPortMalloc+0x198>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3301      	adds	r3, #1
 80056ac:	4a11      	ldr	r2, [pc, #68]	@ (80056f4 <pvPortMalloc+0x198>)
 80056ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056b0:	f7fe fcd6 	bl	8004060 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <pvPortMalloc+0x17a>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	60fb      	str	r3, [r7, #12]
}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	e7fd      	b.n	80056d2 <pvPortMalloc+0x176>
	return pvReturn;
 80056d6:	69fb      	ldr	r3, [r7, #28]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3728      	adds	r7, #40	@ 0x28
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	2000a9ec 	.word	0x2000a9ec
 80056e4:	2000aa00 	.word	0x2000aa00
 80056e8:	2000a9f0 	.word	0x2000a9f0
 80056ec:	2000a9e4 	.word	0x2000a9e4
 80056f0:	2000a9f4 	.word	0x2000a9f4
 80056f4:	2000a9f8 	.word	0x2000a9f8

080056f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d04f      	beq.n	80057aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800570a:	2308      	movs	r3, #8
 800570c:	425b      	negs	r3, r3
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4413      	add	r3, r2
 8005712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	4b25      	ldr	r3, [pc, #148]	@ (80057b4 <vPortFree+0xbc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4013      	ands	r3, r2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10b      	bne.n	800573e <vPortFree+0x46>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	60fb      	str	r3, [r7, #12]
}
 8005738:	bf00      	nop
 800573a:	bf00      	nop
 800573c:	e7fd      	b.n	800573a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00b      	beq.n	800575e <vPortFree+0x66>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	60bb      	str	r3, [r7, #8]
}
 8005758:	bf00      	nop
 800575a:	bf00      	nop
 800575c:	e7fd      	b.n	800575a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	4b14      	ldr	r3, [pc, #80]	@ (80057b4 <vPortFree+0xbc>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4013      	ands	r3, r2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01e      	beq.n	80057aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d11a      	bne.n	80057aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	4b0e      	ldr	r3, [pc, #56]	@ (80057b4 <vPortFree+0xbc>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	43db      	mvns	r3, r3
 800577e:	401a      	ands	r2, r3
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005784:	f7fe fc5e 	bl	8004044 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	4b0a      	ldr	r3, [pc, #40]	@ (80057b8 <vPortFree+0xc0>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4413      	add	r3, r2
 8005792:	4a09      	ldr	r2, [pc, #36]	@ (80057b8 <vPortFree+0xc0>)
 8005794:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005796:	6938      	ldr	r0, [r7, #16]
 8005798:	f000 f874 	bl	8005884 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800579c:	4b07      	ldr	r3, [pc, #28]	@ (80057bc <vPortFree+0xc4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3301      	adds	r3, #1
 80057a2:	4a06      	ldr	r2, [pc, #24]	@ (80057bc <vPortFree+0xc4>)
 80057a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80057a6:	f7fe fc5b 	bl	8004060 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057aa:	bf00      	nop
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	2000aa00 	.word	0x2000aa00
 80057b8:	2000a9f0 	.word	0x2000a9f0
 80057bc:	2000a9fc 	.word	0x2000a9fc

080057c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057c6:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80057ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057cc:	4b27      	ldr	r3, [pc, #156]	@ (800586c <prvHeapInit+0xac>)
 80057ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00c      	beq.n	80057f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3307      	adds	r3, #7
 80057de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0307 	bic.w	r3, r3, #7
 80057e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	4a1f      	ldr	r2, [pc, #124]	@ (800586c <prvHeapInit+0xac>)
 80057f0:	4413      	add	r3, r2
 80057f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005870 <prvHeapInit+0xb0>)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005870 <prvHeapInit+0xb0>)
 8005800:	2200      	movs	r2, #0
 8005802:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	4413      	add	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800580c:	2208      	movs	r2, #8
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1a9b      	subs	r3, r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0307 	bic.w	r3, r3, #7
 800581a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4a15      	ldr	r2, [pc, #84]	@ (8005874 <prvHeapInit+0xb4>)
 8005820:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005822:	4b14      	ldr	r3, [pc, #80]	@ (8005874 <prvHeapInit+0xb4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2200      	movs	r2, #0
 8005828:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800582a:	4b12      	ldr	r3, [pc, #72]	@ (8005874 <prvHeapInit+0xb4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	1ad2      	subs	r2, r2, r3
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005840:	4b0c      	ldr	r3, [pc, #48]	@ (8005874 <prvHeapInit+0xb4>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	4a0a      	ldr	r2, [pc, #40]	@ (8005878 <prvHeapInit+0xb8>)
 800584e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	4a09      	ldr	r2, [pc, #36]	@ (800587c <prvHeapInit+0xbc>)
 8005856:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005858:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <prvHeapInit+0xc0>)
 800585a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800585e:	601a      	str	r2, [r3, #0]
}
 8005860:	bf00      	nop
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	20000da4 	.word	0x20000da4
 8005870:	2000a9e4 	.word	0x2000a9e4
 8005874:	2000a9ec 	.word	0x2000a9ec
 8005878:	2000a9f4 	.word	0x2000a9f4
 800587c:	2000a9f0 	.word	0x2000a9f0
 8005880:	2000aa00 	.word	0x2000aa00

08005884 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800588c:	4b28      	ldr	r3, [pc, #160]	@ (8005930 <prvInsertBlockIntoFreeList+0xac>)
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	e002      	b.n	8005898 <prvInsertBlockIntoFreeList+0x14>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d8f7      	bhi.n	8005892 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	4413      	add	r3, r2
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d108      	bne.n	80058c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	441a      	add	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	441a      	add	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d118      	bne.n	800590c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	4b15      	ldr	r3, [pc, #84]	@ (8005934 <prvInsertBlockIntoFreeList+0xb0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d00d      	beq.n	8005902 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	441a      	add	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	e008      	b.n	8005914 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005902:	4b0c      	ldr	r3, [pc, #48]	@ (8005934 <prvInsertBlockIntoFreeList+0xb0>)
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	e003      	b.n	8005914 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	429a      	cmp	r2, r3
 800591a:	d002      	beq.n	8005922 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005922:	bf00      	nop
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	2000a9e4 	.word	0x2000a9e4
 8005934:	2000a9ec 	.word	0x2000a9ec

08005938 <memset>:
 8005938:	4402      	add	r2, r0
 800593a:	4603      	mov	r3, r0
 800593c:	4293      	cmp	r3, r2
 800593e:	d100      	bne.n	8005942 <memset+0xa>
 8005940:	4770      	bx	lr
 8005942:	f803 1b01 	strb.w	r1, [r3], #1
 8005946:	e7f9      	b.n	800593c <memset+0x4>

08005948 <_reclaim_reent>:
 8005948:	4b29      	ldr	r3, [pc, #164]	@ (80059f0 <_reclaim_reent+0xa8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4283      	cmp	r3, r0
 800594e:	b570      	push	{r4, r5, r6, lr}
 8005950:	4604      	mov	r4, r0
 8005952:	d04b      	beq.n	80059ec <_reclaim_reent+0xa4>
 8005954:	69c3      	ldr	r3, [r0, #28]
 8005956:	b1ab      	cbz	r3, 8005984 <_reclaim_reent+0x3c>
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	b16b      	cbz	r3, 8005978 <_reclaim_reent+0x30>
 800595c:	2500      	movs	r5, #0
 800595e:	69e3      	ldr	r3, [r4, #28]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	5959      	ldr	r1, [r3, r5]
 8005964:	2900      	cmp	r1, #0
 8005966:	d13b      	bne.n	80059e0 <_reclaim_reent+0x98>
 8005968:	3504      	adds	r5, #4
 800596a:	2d80      	cmp	r5, #128	@ 0x80
 800596c:	d1f7      	bne.n	800595e <_reclaim_reent+0x16>
 800596e:	69e3      	ldr	r3, [r4, #28]
 8005970:	4620      	mov	r0, r4
 8005972:	68d9      	ldr	r1, [r3, #12]
 8005974:	f000 f872 	bl	8005a5c <_free_r>
 8005978:	69e3      	ldr	r3, [r4, #28]
 800597a:	6819      	ldr	r1, [r3, #0]
 800597c:	b111      	cbz	r1, 8005984 <_reclaim_reent+0x3c>
 800597e:	4620      	mov	r0, r4
 8005980:	f000 f86c 	bl	8005a5c <_free_r>
 8005984:	6961      	ldr	r1, [r4, #20]
 8005986:	b111      	cbz	r1, 800598e <_reclaim_reent+0x46>
 8005988:	4620      	mov	r0, r4
 800598a:	f000 f867 	bl	8005a5c <_free_r>
 800598e:	69e1      	ldr	r1, [r4, #28]
 8005990:	b111      	cbz	r1, 8005998 <_reclaim_reent+0x50>
 8005992:	4620      	mov	r0, r4
 8005994:	f000 f862 	bl	8005a5c <_free_r>
 8005998:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800599a:	b111      	cbz	r1, 80059a2 <_reclaim_reent+0x5a>
 800599c:	4620      	mov	r0, r4
 800599e:	f000 f85d 	bl	8005a5c <_free_r>
 80059a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059a4:	b111      	cbz	r1, 80059ac <_reclaim_reent+0x64>
 80059a6:	4620      	mov	r0, r4
 80059a8:	f000 f858 	bl	8005a5c <_free_r>
 80059ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80059ae:	b111      	cbz	r1, 80059b6 <_reclaim_reent+0x6e>
 80059b0:	4620      	mov	r0, r4
 80059b2:	f000 f853 	bl	8005a5c <_free_r>
 80059b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80059b8:	b111      	cbz	r1, 80059c0 <_reclaim_reent+0x78>
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 f84e 	bl	8005a5c <_free_r>
 80059c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80059c2:	b111      	cbz	r1, 80059ca <_reclaim_reent+0x82>
 80059c4:	4620      	mov	r0, r4
 80059c6:	f000 f849 	bl	8005a5c <_free_r>
 80059ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80059cc:	b111      	cbz	r1, 80059d4 <_reclaim_reent+0x8c>
 80059ce:	4620      	mov	r0, r4
 80059d0:	f000 f844 	bl	8005a5c <_free_r>
 80059d4:	6a23      	ldr	r3, [r4, #32]
 80059d6:	b14b      	cbz	r3, 80059ec <_reclaim_reent+0xa4>
 80059d8:	4620      	mov	r0, r4
 80059da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80059de:	4718      	bx	r3
 80059e0:	680e      	ldr	r6, [r1, #0]
 80059e2:	4620      	mov	r0, r4
 80059e4:	f000 f83a 	bl	8005a5c <_free_r>
 80059e8:	4631      	mov	r1, r6
 80059ea:	e7bb      	b.n	8005964 <_reclaim_reent+0x1c>
 80059ec:	bd70      	pop	{r4, r5, r6, pc}
 80059ee:	bf00      	nop
 80059f0:	20000010 	.word	0x20000010

080059f4 <__libc_init_array>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	4d0d      	ldr	r5, [pc, #52]	@ (8005a2c <__libc_init_array+0x38>)
 80059f8:	4c0d      	ldr	r4, [pc, #52]	@ (8005a30 <__libc_init_array+0x3c>)
 80059fa:	1b64      	subs	r4, r4, r5
 80059fc:	10a4      	asrs	r4, r4, #2
 80059fe:	2600      	movs	r6, #0
 8005a00:	42a6      	cmp	r6, r4
 8005a02:	d109      	bne.n	8005a18 <__libc_init_array+0x24>
 8005a04:	4d0b      	ldr	r5, [pc, #44]	@ (8005a34 <__libc_init_array+0x40>)
 8005a06:	4c0c      	ldr	r4, [pc, #48]	@ (8005a38 <__libc_init_array+0x44>)
 8005a08:	f000 f87e 	bl	8005b08 <_init>
 8005a0c:	1b64      	subs	r4, r4, r5
 8005a0e:	10a4      	asrs	r4, r4, #2
 8005a10:	2600      	movs	r6, #0
 8005a12:	42a6      	cmp	r6, r4
 8005a14:	d105      	bne.n	8005a22 <__libc_init_array+0x2e>
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1c:	4798      	blx	r3
 8005a1e:	3601      	adds	r6, #1
 8005a20:	e7ee      	b.n	8005a00 <__libc_init_array+0xc>
 8005a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a26:	4798      	blx	r3
 8005a28:	3601      	adds	r6, #1
 8005a2a:	e7f2      	b.n	8005a12 <__libc_init_array+0x1e>
 8005a2c:	08005ba8 	.word	0x08005ba8
 8005a30:	08005ba8 	.word	0x08005ba8
 8005a34:	08005ba8 	.word	0x08005ba8
 8005a38:	08005bac 	.word	0x08005bac

08005a3c <__retarget_lock_acquire_recursive>:
 8005a3c:	4770      	bx	lr

08005a3e <__retarget_lock_release_recursive>:
 8005a3e:	4770      	bx	lr

08005a40 <memcpy>:
 8005a40:	440a      	add	r2, r1
 8005a42:	4291      	cmp	r1, r2
 8005a44:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a48:	d100      	bne.n	8005a4c <memcpy+0xc>
 8005a4a:	4770      	bx	lr
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a56:	4291      	cmp	r1, r2
 8005a58:	d1f9      	bne.n	8005a4e <memcpy+0xe>
 8005a5a:	bd10      	pop	{r4, pc}

08005a5c <_free_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4605      	mov	r5, r0
 8005a60:	2900      	cmp	r1, #0
 8005a62:	d041      	beq.n	8005ae8 <_free_r+0x8c>
 8005a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a68:	1f0c      	subs	r4, r1, #4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	bfb8      	it	lt
 8005a6e:	18e4      	addlt	r4, r4, r3
 8005a70:	f000 f83e 	bl	8005af0 <__malloc_lock>
 8005a74:	4a1d      	ldr	r2, [pc, #116]	@ (8005aec <_free_r+0x90>)
 8005a76:	6813      	ldr	r3, [r2, #0]
 8005a78:	b933      	cbnz	r3, 8005a88 <_free_r+0x2c>
 8005a7a:	6063      	str	r3, [r4, #4]
 8005a7c:	6014      	str	r4, [r2, #0]
 8005a7e:	4628      	mov	r0, r5
 8005a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a84:	f000 b83a 	b.w	8005afc <__malloc_unlock>
 8005a88:	42a3      	cmp	r3, r4
 8005a8a:	d908      	bls.n	8005a9e <_free_r+0x42>
 8005a8c:	6820      	ldr	r0, [r4, #0]
 8005a8e:	1821      	adds	r1, r4, r0
 8005a90:	428b      	cmp	r3, r1
 8005a92:	bf01      	itttt	eq
 8005a94:	6819      	ldreq	r1, [r3, #0]
 8005a96:	685b      	ldreq	r3, [r3, #4]
 8005a98:	1809      	addeq	r1, r1, r0
 8005a9a:	6021      	streq	r1, [r4, #0]
 8005a9c:	e7ed      	b.n	8005a7a <_free_r+0x1e>
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	b10b      	cbz	r3, 8005aa8 <_free_r+0x4c>
 8005aa4:	42a3      	cmp	r3, r4
 8005aa6:	d9fa      	bls.n	8005a9e <_free_r+0x42>
 8005aa8:	6811      	ldr	r1, [r2, #0]
 8005aaa:	1850      	adds	r0, r2, r1
 8005aac:	42a0      	cmp	r0, r4
 8005aae:	d10b      	bne.n	8005ac8 <_free_r+0x6c>
 8005ab0:	6820      	ldr	r0, [r4, #0]
 8005ab2:	4401      	add	r1, r0
 8005ab4:	1850      	adds	r0, r2, r1
 8005ab6:	4283      	cmp	r3, r0
 8005ab8:	6011      	str	r1, [r2, #0]
 8005aba:	d1e0      	bne.n	8005a7e <_free_r+0x22>
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	6053      	str	r3, [r2, #4]
 8005ac2:	4408      	add	r0, r1
 8005ac4:	6010      	str	r0, [r2, #0]
 8005ac6:	e7da      	b.n	8005a7e <_free_r+0x22>
 8005ac8:	d902      	bls.n	8005ad0 <_free_r+0x74>
 8005aca:	230c      	movs	r3, #12
 8005acc:	602b      	str	r3, [r5, #0]
 8005ace:	e7d6      	b.n	8005a7e <_free_r+0x22>
 8005ad0:	6820      	ldr	r0, [r4, #0]
 8005ad2:	1821      	adds	r1, r4, r0
 8005ad4:	428b      	cmp	r3, r1
 8005ad6:	bf04      	itt	eq
 8005ad8:	6819      	ldreq	r1, [r3, #0]
 8005ada:	685b      	ldreq	r3, [r3, #4]
 8005adc:	6063      	str	r3, [r4, #4]
 8005ade:	bf04      	itt	eq
 8005ae0:	1809      	addeq	r1, r1, r0
 8005ae2:	6021      	streq	r1, [r4, #0]
 8005ae4:	6054      	str	r4, [r2, #4]
 8005ae6:	e7ca      	b.n	8005a7e <_free_r+0x22>
 8005ae8:	bd38      	pop	{r3, r4, r5, pc}
 8005aea:	bf00      	nop
 8005aec:	2000ab40 	.word	0x2000ab40

08005af0 <__malloc_lock>:
 8005af0:	4801      	ldr	r0, [pc, #4]	@ (8005af8 <__malloc_lock+0x8>)
 8005af2:	f7ff bfa3 	b.w	8005a3c <__retarget_lock_acquire_recursive>
 8005af6:	bf00      	nop
 8005af8:	2000ab3c 	.word	0x2000ab3c

08005afc <__malloc_unlock>:
 8005afc:	4801      	ldr	r0, [pc, #4]	@ (8005b04 <__malloc_unlock+0x8>)
 8005afe:	f7ff bf9e 	b.w	8005a3e <__retarget_lock_release_recursive>
 8005b02:	bf00      	nop
 8005b04:	2000ab3c 	.word	0x2000ab3c

08005b08 <_init>:
 8005b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0a:	bf00      	nop
 8005b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0e:	bc08      	pop	{r3}
 8005b10:	469e      	mov	lr, r3
 8005b12:	4770      	bx	lr

08005b14 <_fini>:
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	bf00      	nop
 8005b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1a:	bc08      	pop	{r3}
 8005b1c:	469e      	mov	lr, r3
 8005b1e:	4770      	bx	lr
